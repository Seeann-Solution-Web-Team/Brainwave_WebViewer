[{"C:\\Users\\tank6\\Desktop\\React\\brainwave_webviewer\\src\\index.js":"1","C:\\Users\\tank6\\Desktop\\React\\brainwave_webviewer\\src\\App.js":"2","C:\\Users\\tank6\\Desktop\\React\\brainwave_webviewer\\src\\reportWebVitals.js":"3","C:\\Users\\tank6\\Desktop\\React\\brainwave_webviewer\\src\\pages\\mainpage.js":"4","C:\\Users\\tank6\\Desktop\\React\\brainwave_webviewer\\src\\pages\\loginpage.js":"5","C:\\Users\\tank6\\Desktop\\React\\brainwave_webviewer\\src\\pages\\viewer.js":"6","C:\\Users\\tank6\\Desktop\\React\\brainwave_webviewer\\src\\pages\\CanvasGraph.js":"7","C:\\Users\\tank6\\Desktop\\React\\brainwave_webviewer\\src\\pages\\ScrollBar.js":"8","C:\\Users\\tank6\\Desktop\\React\\brainwave_webviewer\\src\\pages\\RHSFile.js":"9","C:\\Users\\tank6\\Desktop\\React\\brainwave_webviewer\\src\\routes.js":"10","C:\\Users\\tank6\\Desktop\\React\\brainwave_webviewer\\src\\pages\\FileManagement.js":"11"},{"size":421,"mtime":1611280424200,"results":"12","hashOfConfig":"13"},{"size":278,"mtime":1611105244323,"results":"14","hashOfConfig":"13"},{"size":375,"mtime":1609820935920,"results":"15","hashOfConfig":"13"},{"size":900,"mtime":1610072309216,"results":"16","hashOfConfig":"13"},{"size":661,"mtime":1611280424204,"results":"17","hashOfConfig":"13"},{"size":15739,"mtime":1611280424206,"results":"18","hashOfConfig":"13"},{"size":11009,"mtime":1611280424201,"results":"19","hashOfConfig":"13"},{"size":3899,"mtime":1610093475256,"results":"20","hashOfConfig":"13"},{"size":13347,"mtime":1611280424203,"results":"21","hashOfConfig":"13"},{"size":511,"mtime":1611280424207,"results":"22","hashOfConfig":"13"},{"size":3311,"mtime":1611280424202,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"8dz0pq",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Users\\tank6\\Desktop\\React\\brainwave_webviewer\\src\\index.js",[],"C:\\Users\\tank6\\Desktop\\React\\brainwave_webviewer\\src\\App.js",[],"C:\\Users\\tank6\\Desktop\\React\\brainwave_webviewer\\src\\reportWebVitals.js",[],["50","51"],"C:\\Users\\tank6\\Desktop\\React\\brainwave_webviewer\\src\\pages\\mainpage.js",["52"],"import React from 'react'\r\nimport './mainpage.css'\r\n\r\nclass MainPage extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount(){\r\n        \r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <div>\r\n                        Logo\r\n                    </div>\r\n                </div>\r\n                <div class='nemuButtons'>\r\n                    <div class='nemuCol'>\r\n                        <button class='menuButton'>a</button>\r\n                        <button class='menuButton'>b</button>\r\n                    </div>\r\n                    <div class='nemuCol'>\r\n                        <button class='menuButton'>c</button>\r\n                        <button class='menuButton'>d</button>\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n\r\nexport default MainPage;",["53","54"],"C:\\Users\\tank6\\Desktop\\React\\brainwave_webviewer\\src\\pages\\loginpage.js",[],"C:\\Users\\tank6\\Desktop\\React\\brainwave_webviewer\\src\\pages\\viewer.js",["55","56"],"import React from 'react';\r\nimport logo from '.././logo.svg';\r\nimport './viewer.css';\r\nimport CanvasGraph from './CanvasGraph';\r\nimport RHSFile from './RHSFile'\r\n\r\nclass WaveGraphPlayer extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            channels: 32,\r\n            count: 1000,\r\n            speed: 1.0,\r\n            canvasWidth: 1600,\r\n            isPlaying: false\r\n        };\r\n\r\n        this.graphRef = React.createRef();\r\n        this.currentFile = null;\r\n\r\n        this.onPlayStateChanged = this.onPlayStateChanged.bind(this);\r\n        this.onOffsetChanged = this.onOffsetChanged.bind(this);\r\n        this.onKeyDown = this.onKeyDown.bind(this);\r\n        this.onPlayButtonClicked = this.onPlayButtonClicked.bind(this);\r\n        this.onResize = this.onResize.bind(this);\r\n\r\n        this.applyFile = this.applyFile.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setState({isPlaying: this.graphRef.isPlaying});\r\n        this.onResize();\r\n        //fetch('http://localhost:3000/api');\r\n        window.addEventListener(\"resize\", this.onResize);\r\n        window.addEventListener(\"keydown\", this.onKeyDown);\r\n\r\n        this.timeLabel = document.getElementById('timeLabel');\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        window.removeEventListener(\"resize\", this.onResize);\r\n        window.removeEventListener(\"keydown\", this.onKeyDown);\r\n    }\r\n\r\n    applyFile (file){\r\n        //apply to CanvasGraph\r\n        var ampData = file.getNormalizedAmpData();\r\n        this.setState({channels: ampData.length});\r\n        this.currentFile = file;\r\n        this.graphRef.setfile(file);\r\n    }\r\n\r\n    onPlayStateChanged(){\r\n        if (this.graphRef === null)\r\n            return;\r\n\r\n        this.setState({isPlaying: this.graphRef.isPlaying});\r\n    }\r\n\r\n    onOffsetChanged(p){\r\n        if (this.currentFile === null)\r\n            return;\r\n        \r\n        var current = Math.floor(p * this.currentFile.recordLength);\r\n        var recordMin = (Math.floor(this.currentFile.recordLength / 60)).toString().padStart(2, '0');\r\n        var recordSec = (this.currentFile.recordLength % 60).toString().padStart(2, '0');\r\n\r\n        var currentMin = (Math.floor(current / 60)).toString().padStart(2, '0');\r\n        var currentSec = (current % 60).toString().padStart(2, '0');\r\n\r\n        this.timeLabel.innerHTML = currentMin + ':' + currentSec + '/' + recordMin + ':' + recordSec;\r\n    }\r\n\r\n    onPlayButtonClicked(e){\r\n        this.graphRef.togglePlay();\r\n    }\r\n\r\n    onKeyDown(e){\r\n        if (e.keyCode === 32)\r\n            this.graphRef.togglePlay();\r\n        else if (e.keyCode === 37)\r\n            this.graphRef.prev();\r\n        else if (e.keyCode === 39)\r\n            this.graphRef.next();\r\n    }\r\n\r\n    onResize(){\r\n        this.setState({\r\n            canvasWidth: this.graphRef.getCanvas().getBoundingClientRect().width\r\n        });\r\n    }\r\n\r\n    setChannelCount (c){\r\n        this.setState({channels: c});\r\n    }\r\n\r\n    setPeakCount (c){\r\n        this.setState({count: c});\r\n    }\r\n\r\n    setSpeed(s){\r\n        this.setState({speed: s * 1.0});\r\n    }\r\n\r\n    setChannelSelection(selection){\r\n        this.graphRef.setchannelsenabled(selection);\r\n        this.setState({channels: selection.length});\r\n    }\r\n\r\n    render(){\r\n        /*\r\n        var btnStyle={\r\n            height: '50px',\r\n            width: '50px'\r\n        }\r\n        */\r\n        var labelStyle={\r\n            fontSize: '18px',\r\n            display: 'flex',\r\n            alignSelf: 'start'\r\n        }\r\n\r\n        return(\r\n        <div>\r\n            <CanvasGraph ref={ref=>{this.graphRef = ref;}}\r\n            height={25} width={this.state.canvasWidth} margin={10}\r\n            channels={this.state.channels} count={this.state.count} speed={this.state.speed} \r\n            strokeColor=\"#FFFFFF\"\r\n            onPlayStateChanged={this.onPlayStateChanged}\r\n            onOffsetChanged={this.onOffsetChanged}/>\r\n            <div>\r\n                <label id='timeLabel' style={labelStyle}>00:00/00:00</label>\r\n            </div>\r\n        </div>);\r\n\r\n        /*\r\n        <button onClick={this.onPlayButtonClicked} style={btnStyle}>\r\n                    {this.state.isPlaying ? \"stop\" : \"play\"}\r\n                </button>\r\n         */\r\n    }\r\n}\r\n\r\nclass FileList extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.onFileSelected = this.onFileSelected.bind(this);\r\n        this.onProgressChanged = this.onProgressChanged.bind(this);\r\n\r\n        //Request file list to back-end\r\n        //fetch(\"/files\");\r\n\r\n        this.state = {\r\n            fileList: [\"intan_save_210107_151441.rhs\"],\r\n            selectedFile: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.timeLabel = document.getElementById('timeLabel');\r\n    }\r\n\r\n    onFileSelected (){\r\n        var selected = document.getElementById(\"fileList\").value;\r\n\r\n        if (selected === this.state.selectedFile)\r\n            return;\r\n\r\n        this.setState({selectedFile: selected});\r\n        if (this.props.onFileLoadStart !== undefined)\r\n            this.props.onFileLoadStart();\r\n        \r\n        //Load File\r\n        var rhs = new RHSFile();\r\n        rhs.load(selected, this.props.onFileLoaded, this.onProgressChanged);\r\n    }\r\n\r\n    onProgressChanged (file, prog){\r\n        this.timeLabel.innerHTML = file.path + ' (' + Math.floor(prog) + ')%'\r\n    }\r\n\r\n    render(){\r\n        var options = [];\r\n        for (var i = 0; i < this.state.fileList.length; i++){\r\n             options.push(\r\n                 <option key={i} value={this.state.fileList[i]}>{this.state.fileList[i]}</option>\r\n             )\r\n        }\r\n\r\n        return (\r\n        <select id=\"fileList\" className=\"files\"  onDoubleClick={this.onFileSelected} multiple>\r\n            {options}\r\n        </select>);\r\n    }\r\n}\r\n\r\nclass ChannelList extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            channelNameList: []\r\n        }\r\n\r\n        this.channelNameList_onchange = this.channelNameList_onchange.bind(this);\r\n    }\r\n\r\n    setChannelList(arr){\r\n        var nameArr = [];\r\n        var i = 0;\r\n        for (i = 0; i < arr.length; i++){\r\n            nameArr.push(arr[i].customName);\r\n        }\r\n\r\n        this.setState({\r\n            channelNameList: nameArr\r\n        });\r\n\r\n        //Deselect All\r\n        var elements = document.getElementById(\"channelNameList\").options;\r\n\r\n        for (i = 0; i < elements.length; i++){\r\n            elements[i].selected = false;\r\n        }\r\n    }\r\n\r\n    channelNameList_onchange(){\r\n        var select = document.getElementById(\"channelNameList\");\r\n        var selectedIdx = [];\r\n        var len = select.options.length;\r\n\r\n        for (var i = 0; i < len; i++){\r\n            if (select.options[i].selected){\r\n                selectedIdx.push(i);\r\n            }\r\n        }\r\n\r\n        this.props.onSelectionChanged(selectedIdx);\r\n    }\r\n\r\n    render(){\r\n        var options = [];\r\n        for (var i = 0; i < this.state.channelNameList.length; i++){\r\n            options.push(\r\n                <option key={i} value={this.state.channelNameList[i]}>\r\n                    {this.state.channelNameList[i]}\r\n                </option>);\r\n        }\r\n\r\n        return (\r\n        <select id=\"channelNameList\" className=\"files\" onChange={this.channelNameList_onchange} multiple>\r\n            {options}\r\n        </select>);\r\n    }\r\n}\r\n\r\nclass PlayerController extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.play_onclick = this.play_onclick.bind(this);\r\n        this.stop_onclick = this.stop_onclick.bind(this);\r\n        this.replay_onclick = this.replay_onclick.bind(this);\r\n\r\n        this.count_select_onchange = this.count_select_onchange.bind(this);\r\n        this.channel_select_onchange = this.channel_select_onchange.bind(this);\r\n        this.speed_select_onchange = this.speed_select_onchange.bind(this);\r\n    }\r\n\r\n    play_onclick(e){\r\n        if (this.props.onPlayButtonClicked !== undefined)\r\n            this.props.onPlayButtonClicked();\r\n    }\r\n\r\n    stop_onclick(e){\r\n        if (this.props.onPlayButtonClicked !== undefined)\r\n            this.props.onStopButtonClicked();\r\n    }\r\n\r\n    replay_onclick(e){\r\n        if (this.props.onPlayButtonClicked !== undefined)\r\n            this.props.onReplayButtonClicked();\r\n    }\r\n\r\n    count_select_onchange (){\r\n        if (this.props.onCountChanged !== undefined)\r\n            this.props.onCountChanged(document.getElementById(\"count_select\").value);\r\n    }\r\n\r\n    channel_select_onchange (){\r\n        if (this.props.onChannelChanged !== undefined)\r\n            this.props.onChannelChanged(document.getElementById(\"channel_select\").value);\r\n    }\r\n\r\n    speed_select_onchange(){\r\n        if (this.props.onSpeedChanged !== undefined)\r\n            this.props.onSpeedChanged(document.getElementById(\"speed_select\").value);\r\n    }\r\n\r\n    render(){\r\n        var st = {\r\n            fontSize: '24px',\r\n        }\r\n        var btnStyle={\r\n            height: '50px',\r\n            width: '50px'\r\n        }\r\n\r\n        return (\r\n        <div className=\"player_Controller\">\r\n            <span style={st}>아아아ㅏㅏ아아아메뉴우우ㅜ우ㅡ</span>\r\n            <br/>\r\n            <br/>\r\n            <div>\r\n                <button className='btn btn-secondary' onClick={this.play_onclick}>Play</button>\r\n                <button className='btn btn-secondary' onClick={this.stop_onclick}>Stop</button>\r\n                <button className='btn btn-secondary' onClick={this.replay_onclick}>Rewind</button>\r\n            </div>\r\n            <br/>\r\n            <span>확대</span>\r\n            <select id=\"count_select\" defaultValue='1000' onChange={this.count_select_onchange}>\r\n                <option value='500'>500</option>\r\n                <option value='1000'>1000</option>\r\n                <option value='2000'>2000</option>\r\n                <option value='3000'>3000</option>\r\n                <option value='4000'>4000</option>\r\n                <option value='5000'>5000</option>\r\n            </select>\r\n\r\n            <br/>\r\n            <br/>\r\n            <span>재생 속도</span>\r\n            <select id=\"speed_select\" defaultValue='1.0' onChange={this.speed_select_onchange}>\r\n                <option value='0.1'>x0.1</option>\r\n                <option value='0.25'>x0.25</option>\r\n                <option value='0.5'>x0.5</option>\r\n                <option value='1.0'>x1.0</option>\r\n                <option value='1.25'>x1.25</option>\r\n                <option value='1.5'>x1.5</option>\r\n                <option value='2.0'>x2.0</option>\r\n            </select>\r\n\r\n            <br/><br/><br/>\r\n            <span>대충 메모 들어갈자리</span>\r\n            <br/><br/>\r\n            <span>대충 메모 들어갈자리2</span>\r\n            <br/><br/>\r\n            <span>대충 메모 들어갈자리3</span>\r\n        </div>);\r\n\r\n        /*\r\n        <span>채널</span>\r\n        <select id=\"channel_select\" defaultValue='32' onChange={this.channel_select_onchange}>\r\n            <option value='1'>1</option>\r\n            <option value='2'>2</option>\r\n            <option value='4'>4</option>\r\n            <option value='8'>8</option>\r\n            <option value='16'>16</option>\r\n            <option value='32'>32</option>\r\n        </select>\r\n        */\r\n    }\r\n}\r\n\r\nclass Viewer extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.playerRef = React.createRef();\r\n        this.channelListRef = React.createRef();\r\n        this.state={isLoading: false};\r\n\r\n        this.onPlayButtonClicked = this.onPlayButtonClicked.bind(this);\r\n        this.onStopButtonClicked = this.onStopButtonClicked.bind(this);\r\n        this.onReplayButtonClicked = this.onReplayButtonClicked.bind(this);\r\n\r\n        this.onCountChanged = this.onCountChanged.bind(this);\r\n        this.onChannelChanged = this.onChannelChanged.bind(this);\r\n        this.onSpeedChanged = this.onSpeedChanged.bind(this);\r\n        this.onSelectionChanged = this.onSelectionChanged.bind(this);\r\n\r\n        this.onFileLoadStart = this.onFileLoadStart.bind(this);\r\n        this.onLoadingProgressChanged = this.onLoadingProgressChanged.bind(this);\r\n        this.onFileLoaded = this.onFileLoaded.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        if (this.props.match.params.filePath === undefined)\r\n            return;\r\n\r\n        //Load File\r\n        var rhs = new RHSFile();\r\n        this.setState({isLoading: true});\r\n        rhs.load(this.props.match.params.filePath, this.onFileLoaded, this.onLoadingProgressChanged);\r\n    }\r\n\r\n    onPlayButtonClicked(){\r\n        this.playerRef.graphRef.play();\r\n    }\r\n\r\n    onStopButtonClicked(){\r\n        this.playerRef.graphRef.stop();\r\n    }\r\n\r\n    onReplayButtonClicked(){\r\n        this.playerRef.graphRef.setoffset(0.0);\r\n    }\r\n    \r\n    onCountChanged (v){\r\n        this.playerRef.setPeakCount(v);\r\n    }\r\n\r\n    onChannelChanged(v){\r\n        this.playerRef.setChannelCount(v);\r\n    }\r\n\r\n    onSpeedChanged(v){\r\n        this.playerRef.setSpeed(v);\r\n    }\r\n\r\n    onSelectionChanged(arr){\r\n        console.log(arr);\r\n        this.playerRef.setChannelSelection(arr);\r\n    }\r\n\r\n    onFileLoadStart(){\r\n        this.playerRef.currentFile = null;\r\n        this.playerRef.graphRef.stop();\r\n        this.setState({isLoading: true});\r\n    }\r\n\r\n    onLoadingProgressChanged(file, prog){\r\n        console.log(prog + '%');\r\n\r\n        var loadingTxt = document.getElementById(\"loadingTxt\");\r\n\r\n        if (loadingTxt !== undefined){\r\n            loadingTxt.innerHTML = 'LOADING (' + (Math.floor(prog * 10) * 0.1) + '%)';\r\n        }\r\n    }\r\n\r\n    onFileLoaded(file){\r\n        if (file.isInitialized){\r\n            this.playerRef.graphRef.stop();\r\n            this.playerRef.applyFile(file);\r\n\r\n            this.channelListRef.current.setChannelList(file.getChannelData());\r\n        }\r\n        else{\r\n            alert('Failed to get file ' + file.path);\r\n        }\r\n\r\n        this.setState({isLoading: false});\r\n    }\r\n\r\n    render(){\r\n        const loadingScreenStyle={\r\n            margin: '0',\r\n            width: '100vw',\r\n            height: '100vh',\r\n            backgroundColor: '#282c3480',\r\n            zIndex: '2',\r\n            position: 'absolute'\r\n        }\r\n\r\n        const loadingTxtStyle={\r\n            top: '50%',\r\n            fontSize: '24px',\r\n            transform: 'translateY(-50%)',\r\n            position: 'absolute'\r\n        }\r\n\r\n        return (\r\n        <div className=\"Viewer\">\r\n            <div className=\"Viewer_Menu\">\r\n                <PlayerController\r\n                onPlayButtonClicked={this.onPlayButtonClicked}\r\n                onStopButtonClicked={this.onStopButtonClicked}\r\n                onReplayButtonClicked={this.onReplayButtonClicked}\r\n                onCountChanged={this.onCountChanged}\r\n                onChannelChanged={this.onChannelChanged}\r\n                onSpeedChanged={this.onSpeedChanged}/>\r\n                <ChannelList \r\n                ref={this.channelListRef}\r\n                onFileLoadStart={this.onFileLoadStart} \r\n                onFileLoaded={this.onFileLoaded}\r\n                onSelectionChanged={this.onSelectionChanged}/>\r\n            </div>\r\n            <div className=\"Viewer_Graph\">\r\n                <img src={logo} draggable='false' className=\"logo\" alt=\"logo\" \r\n                width='50px' height='50px'/>\r\n                <WaveGraphPlayer ref={ref=>{this.playerRef = ref;}} />\r\n            </div> \r\n            {this.state.isLoading ? \r\n            (<div style={loadingScreenStyle}>\r\n                <span id='loadingTxt' style={loadingTxtStyle}>LOADING</span>\r\n            </div>) : \r\n            (<div/>)}\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default Viewer;","C:\\Users\\tank6\\Desktop\\React\\brainwave_webviewer\\src\\pages\\CanvasGraph.js",[],"C:\\Users\\tank6\\Desktop\\React\\brainwave_webviewer\\src\\pages\\ScrollBar.js",[],"C:\\Users\\tank6\\Desktop\\React\\brainwave_webviewer\\src\\pages\\RHSFile.js",[],"C:\\Users\\tank6\\Desktop\\React\\brainwave_webviewer\\src\\routes.js",[],"C:\\Users\\tank6\\Desktop\\React\\brainwave_webviewer\\src\\pages\\FileManagement.js",[],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":5,"column":5,"nodeType":"63","messageId":"64","endLine":7,"endColumn":6},{"ruleId":"57","replacedBy":"65"},{"ruleId":"59","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":144,"column":7,"nodeType":"69","messageId":"70","endLine":144,"endColumn":15},{"ruleId":"67","severity":1,"message":"71","line":305,"column":13,"nodeType":"69","messageId":"70","endLine":305,"endColumn":21},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",["72"],["73"],"no-unused-vars","'FileList' is defined but never used.","Identifier","unusedVar","'btnStyle' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]