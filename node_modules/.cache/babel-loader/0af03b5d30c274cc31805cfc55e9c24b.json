{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\tank6\\\\Desktop\\\\React\\\\brainwave_webviewer\\\\src\\\\pages\\\\ScrollBar.js\";\nimport React from 'react';\n\nclass ScrollBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = /*#__PURE__*/React.createRef();\n    this.canvasContext = null;\n    this.ondragstart = this.ondragstart.bind(this);\n    this.ondrag = this.ondrag.bind(this);\n    this.ondragover = this.ondragover.bind(this);\n    this.isDragging = false;\n    this.isHoldingHandle = false;\n    this.handlePosition = 0.0;\n  }\n\n  componentDidMount() {\n    this.canvasContext = this.canvasRef.current.getContext('2d');\n    this.canvasContext.shadowBlur = 0;\n    this.renderCanvas();\n  }\n\n  componentWillUnmount() {} //Events\n\n\n  ondragstart(e) {\n    var handleWidthPx = this.props.width * this.props.handleWidth;\n    var handlePosPx = (this.props.width - handleWidthPx) * this.handlePosition;\n    var pos = this.getMousePos(this.canvasRef.current, e);\n    this.isDragging = true; //console.log('==Drag Start==');\n\n    if (Math.abs(pos.x - handlePosPx) < handleWidthPx) this.isHoldingHandle = true;\n    if (this.props.onDragStart !== undefined) this.props.onDragStart();\n    this.ondrag(e);\n  }\n\n  ondrag(e) {\n    if (this.isDragging === false) return;\n    var handleWidthPx = this.props.width * this.props.handleWidth;\n    var pos = this.getMousePos(this.canvasRef.current, e);\n    this.handlePosition = (pos.x - this.props.width / 2) / (this.props.width - handleWidthPx);\n    this.handlePosition = this.clamp(this.handlePosition, -0.5, 0.5) + 0.5; //console.log('Dragging, Pos : ' + pos.x);\n\n    if (this.props.onDrag !== undefined) this.props.onDrag(this.handlePosition);\n    this.renderCanvas();\n  }\n\n  ondragover(e) {\n    if (this.isDragging === false) return;\n    this.isDragging = false;\n    this.isHoldingHandle = false; //console.log('==Drag Over==');\n\n    if (this.props.onDragEnd !== undefined) this.props.onDragEnd();\n    this.renderCanvas();\n  }\n\n  setHandlePosition(p) {\n    this.handlePosition = p;\n    this.renderCanvas();\n  } //Render\n\n\n  renderCanvas() {\n    var width = this.canvasRef.current.offsetWidth;\n    var height = this.canvasRef.current.offsetHeight;\n    this.canvasContext.clearRect(0, 0, width, height);\n    this.canvasContext.fillStyle = 'rgba(0,0,0,.5)';\n    this.canvasContext.fillRect(0, 0, width, height); //Draw handle\n\n    var handleWidthPx = this.props.width * this.props.handleWidth;\n    var handlePosPx = (this.props.width - handleWidthPx) * this.handlePosition;\n    handlePosPx = this.clamp(handlePosPx, 0, width - handleWidthPx);\n    this.canvasContext.fillStyle = this.isHoldingHandle ? 'rgba(180.0,180.0,180.0)' : 'white';\n    this.canvasContext.fillRect(handlePosPx, 0, handleWidthPx, this.props.height);\n  }\n\n  render() {\n    if (this.canvasRef.current) this.renderCanvas();\n    return /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: this.canvasRef,\n      width: this.props.width,\n      height: this.props.height,\n      onMouseDown: this.ondragstart,\n      onMouseMove: this.ondrag,\n      onMouseUp: this.ondragover,\n      onMouseOut: this.ondragover\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 16\n    }, this);\n  } //etc\n\n\n  getMousePos(canvas, e) {\n    var rect = canvas.getBoundingClientRect();\n    return {\n      x: e.clientX - rect.left,\n      y: e.clientY - rect.top\n    };\n  }\n\n  clamp(v, min, max) {\n    if (v < min) return min;else if (v > max) return max;\n    return v;\n  }\n\n}\n\nexport default ScrollBar;","map":{"version":3,"sources":["C:/Users/tank6/Desktop/React/brainwave_webviewer/src/pages/ScrollBar.js"],"names":["React","ScrollBar","Component","constructor","props","canvasRef","createRef","canvasContext","ondragstart","bind","ondrag","ondragover","isDragging","isHoldingHandle","handlePosition","componentDidMount","current","getContext","shadowBlur","renderCanvas","componentWillUnmount","e","handleWidthPx","width","handleWidth","handlePosPx","pos","getMousePos","Math","abs","x","onDragStart","undefined","clamp","onDrag","onDragEnd","setHandlePosition","p","offsetWidth","height","offsetHeight","clearRect","fillStyle","fillRect","render","canvas","rect","getBoundingClientRect","clientX","left","y","clientY","top","v","min","max"],"mappings":"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","sourcesContent":["import React from 'react'\r\n\r\nclass ScrollBar extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.canvasRef = React.createRef();\r\n        this.canvasContext = null;\r\n\r\n        this.ondragstart = this.ondragstart.bind(this);\r\n        this.ondrag = this.ondrag.bind(this);\r\n        this.ondragover = this.ondragover.bind(this);\r\n\r\n        this.isDragging = false;\r\n        this.isHoldingHandle = false;\r\n        this.handlePosition = 0.0;\r\n    }\r\n\r\n    componentDidMount (){\r\n        this.canvasContext = this.canvasRef.current.getContext('2d');\r\n        this.canvasContext.shadowBlur = 0;\r\n\r\n        this.renderCanvas();\r\n    }\r\n\r\n    componentWillUnmount(){\r\n    }\r\n\r\n    //Events\r\n    ondragstart (e) {\r\n        var handleWidthPx = this.props.width * this.props.handleWidth;\r\n        var handlePosPx = (this.props.width - handleWidthPx) * this.handlePosition;\r\n        var pos = this.getMousePos(this.canvasRef.current, e);\r\n\r\n        this.isDragging = true;\r\n        //console.log('==Drag Start==');\r\n\r\n        if (Math.abs(pos.x - handlePosPx) < handleWidthPx)\r\n            this.isHoldingHandle = true;\r\n        if (this.props.onDragStart !== undefined)\r\n            this.props.onDragStart();\r\n        this.ondrag(e);\r\n    }\r\n\r\n    ondrag(e){\r\n        if (this.isDragging === false)\r\n            return;\r\n        \r\n        var handleWidthPx = this.props.width * this.props.handleWidth;\r\n        var pos = this.getMousePos(this.canvasRef.current, e);\r\n\r\n        this.handlePosition = (pos.x - (this.props.width / 2)) / (this.props.width - handleWidthPx);\r\n        this.handlePosition = this.clamp(this.handlePosition, -0.5, 0.5) + 0.5;\r\n        //console.log('Dragging, Pos : ' + pos.x);\r\n\r\n        if (this.props.onDrag !== undefined)\r\n            this.props.onDrag(this.handlePosition);\r\n        \r\n        this.renderCanvas();\r\n    }\r\n\r\n    ondragover (e){\r\n        if (this.isDragging === false)\r\n            return;\r\n\r\n        this.isDragging = false;\r\n        this.isHoldingHandle = false;\r\n        //console.log('==Drag Over==');\r\n\r\n        if (this.props.onDragEnd !== undefined)\r\n            this.props.onDragEnd();\r\n\r\n        this.renderCanvas();\r\n    }\r\n\r\n    setHandlePosition (p){\r\n        this.handlePosition = p;\r\n        this.renderCanvas();\r\n    }\r\n\r\n    //Render\r\n    renderCanvas(){\r\n        var width = this.canvasRef.current.offsetWidth;\r\n        var height = this.canvasRef.current.offsetHeight;\r\n        \r\n        this.canvasContext.clearRect(0, 0, width, height);\r\n        this.canvasContext.fillStyle = 'rgba(0,0,0,.5)';\r\n        this.canvasContext.fillRect(0, 0, width, height);\r\n\r\n        //Draw handle\r\n        var handleWidthPx = this.props.width * this.props.handleWidth;\r\n        var handlePosPx = (this.props.width - handleWidthPx) * this.handlePosition;\r\n        handlePosPx = this.clamp(handlePosPx, 0, width - handleWidthPx);\r\n\r\n        this.canvasContext.fillStyle = this.isHoldingHandle ? 'rgba(180.0,180.0,180.0)' : 'white';\r\n        this.canvasContext.fillRect(handlePosPx, 0, handleWidthPx, this.props.height);\r\n    }\r\n\r\n    render(){\r\n        if (this.canvasRef.current)\r\n            this.renderCanvas();\r\n\r\n        return <canvas\r\n                ref={this.canvasRef}\r\n                width={this.props.width} height={this.props.height}\r\n                onMouseDown={this.ondragstart} \r\n                onMouseMove={this.ondrag}\r\n                onMouseUp={this.ondragover}\r\n                onMouseOut={this.ondragover}/>\r\n    }\r\n\r\n    //etc\r\n    getMousePos(canvas, e) {\r\n        var rect = canvas.getBoundingClientRect();\r\n        return {\r\n            x: e.clientX - rect.left,\r\n            y: e.clientY - rect.top\r\n        };\r\n    }\r\n\r\n    clamp(v, min, max){\r\n        if (v < min)\r\n            return min;\r\n        else if (v > max)\r\n            return max;\r\n\r\n        return v;\r\n    }\r\n}\r\n\r\nexport default ScrollBar;"]},"metadata":{},"sourceType":"module"}