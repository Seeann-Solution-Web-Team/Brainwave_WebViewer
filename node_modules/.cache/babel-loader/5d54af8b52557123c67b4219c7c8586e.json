{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\tank6\\\\Desktop\\\\React\\\\brainwave_webviewer\\\\src\\\\pages\\\\CanvasGraph.js\";\nimport React from 'react';\nimport ScrollBar from './ScrollBar';\n\nclass CanvasGraph extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = /*#__PURE__*/React.createRef();\n    this.canvasContext = null;\n    this.scrollBarRef = null;\n    this.isPlaying = false;\n    this.textWidth = 100;\n    this.timelineHeight = 50; //Bind Functions\n\n    this.play = this.play.bind(this);\n    this.stop = this.stop.bind(this);\n    this.setoffset = this.setoffset.bind(this);\n    var channelCount = props.channels;\n    this.peakArray = [];\n    this.channelEnabled = [];\n    this.channelNames = [];\n    this.peakOffset = props.count / -2;\n    this.peakMaxOffset = 0;\n    this.peakMinOffset = props.count / -2; //Create Test Samples\n\n    var c;\n    var i;\n\n    for (c = 0; c < channelCount; c++) {\n      this.peakArray.push([]);\n      this.channelEnabled.push(true);\n      this.channelNames.push('channel_' + c);\n\n      for (i = 0; i < 100000; i++) {\n        this.peakArray[c].push(0);\n      }\n    }\n\n    this.peakMaxOffset = this.peakArray[0].length - this.props.count / 2;\n  }\n\n  componentDidMount() {\n    this.canvasContext = this.canvasRef.current.getContext('2d', {\n      alpha: false\n    });\n    this.canvasContext.fillStyle = 'black';\n    this.canvasContext.lineWidth = 1;\n    this.canvasContext.shadowBlur = 0;\n    this.canvasContext.font = this.props.height / 2 + 'px malgun gothic';\n    this.play();\n  }\n\n  componentWillUnmount() {\n    this.stop();\n  } //Play\n\n\n  play() {\n    if (this.isPlaying) return; //Rewind\n\n    if (this.peakOffset === this.peakMaxOffset) {\n      this.peakOffset = this.peakMinOffset;\n    }\n\n    this.timer = setInterval(() => {\n      this.update();\n      this.draw();\n    }, 5);\n    this.isPlaying = true;\n    if (this.props.onPlayStateChanged !== undefined) this.props.onPlayStateChanged();\n  }\n\n  stop() {\n    if (!this.isPlaying) return;\n    if (this.timer == null) return;\n    clearInterval(this.timer);\n    this.timer = null;\n    this.isPlaying = false;\n    if (this.props.onPlayStateChanged !== undefined) this.props.onPlayStateChanged();\n  }\n\n  togglePlay() {\n    if (this.isPlaying) this.stop();else this.play();\n  } //Controls\n\n\n  setfile(file) {\n    this.currentFile = file;\n    this.peakArray = file.getNormalizedAmpData();\n    this.peakOffset = this.peakMinOffset;\n    this.peakMaxOffset = this.peakArray[0].length - this.props.count / 2;\n    var i = 0;\n    this.channelEnabled = [];\n\n    for (i = 0; i < this.peakArray.length; i++) {\n      this.channelEnabled.push(true);\n    }\n\n    var channelData = file.getChannelData();\n    this.channelNames = [];\n\n    for (i = 0; i < channelData.length; i++) {\n      this.channelNames.push(channelData[i].customName);\n    }\n\n    this.scrollBarRef.setHandlePosition(0);\n    this.draw();\n    if (this.props.onOffsetChanged !== undefined) this.props.onOffsetChanged(0);\n  }\n\n  setchannelsenabled(arr) {\n    var j = 0;\n\n    for (var i = 0; i < this.channelEnabled.length; i++) {\n      if (arr[j] === i) {\n        this.channelEnabled[i] = true;\n\n        if (j < arr.length - 1) {\n          j++;\n        }\n      } else {\n        this.channelEnabled[i] = false;\n      }\n    }\n  }\n\n  setoffset(pos) {\n    this.peakOffset = Math.floor((this.peakMaxOffset + this.props.count / 2) * pos) - this.props.count / 2;\n    this.draw();\n    if (this.props.onOffsetChanged !== undefined) this.props.onOffsetChanged(pos);\n  }\n\n  next() {\n    this.peakOffset += this.props.speed * 10;\n    this.peakOffset = Math.min(this.peakOffset, this.peakMaxOffset);\n    this.peakOffset = Math.max(this.peakOffset, this.peakMinOffset);\n    this.draw();\n    var pos = (this.peakOffset + this.props.count / 2) / (this.peakMaxOffset + this.props.count / 2);\n    this.scrollBarRef.setHandlePosition(pos);\n    if (this.props.onOffsetChanged !== undefined) this.props.onOffsetChanged(pos);\n  }\n\n  prev() {\n    this.peakOffset -= this.props.speed * 10;\n    this.peakOffset = Math.min(this.peakOffset, this.peakMaxOffset);\n    this.peakOffset = Math.max(this.peakOffset, this.peakMinOffset);\n    this.draw();\n    var pos = (this.peakOffset + this.props.count / 2) / (this.peakMaxOffset + this.props.count / 2);\n    this.scrollBarRef.setHandlePosition(pos);\n    if (this.props.onOffsetChanged !== undefined) this.props.onOffsetChanged(pos);\n  } //Play Loop\n\n\n  update() {\n    this.peakOffset += this.props.speed;\n\n    if (this.peakOffset > this.peakMaxOffset) {\n      this.peakOffset = this.peakMaxOffset;\n      this.stop();\n    }\n\n    if (this.props.onOffsetChanged !== undefined) this.props.onOffsetChanged((this.peakOffset + this.props.count / 2) / this.peakMaxOffset);\n    if (this.scrollBarRef != null) this.scrollBarRef.setHandlePosition((this.peakOffset + this.props.count / 2) / (this.peakMaxOffset + this.props.count / 2));\n  }\n\n  draw() {\n    if (this.peakArray[0].length < 2) return;\n    var channelCount = this.props.channels > this.peakArray.length ? this.peakArray.length : this.props.channels;\n    var len = this.props.count < this.peakArray[0].length ? this.props.count : this.peakArray[0].length;\n    var width = this.canvasRef.current.offsetWidth - this.textWidth;\n    var height = this.canvasRef.current.offsetHeight;\n    var halfHeight = this.props.height / 2;\n    var widthStep = width / this.props.count;\n    var startX = widthStep * Math.min(this.peakOffset, 0) * -1 + this.textWidth;\n    var startY = 0;\n    this.canvasContext.strokeStyle = this.props.strokeColor;\n    this.canvasContext.fillStyle = 'black';\n    this.canvasContext.fillRect(0, 0, width + this.textWidth, height); //this.canvasContext.clearRect(0, 0, width, height);\n\n    var currentIdx = 0;\n    var x = 0;\n    var y = 0;\n    this.canvasContext.fillStyle = 'white';\n    this.canvasContext.lineWidth = 1;\n    this.canvasContext.beginPath(); //Draw timeline text\n\n    var currentTime = 0;\n    var i = 0;\n\n    if (this.currentFile) {\n      for (i = 0; i < len; i++) {\n        currentIdx = Math.max(i + this.peakOffset, i);\n        currentTime = currentIdx / this.currentFile.sampleRate;\n        currentTime = Math.floor(currentTime * 100) * 0.01;\n\n        if (currentIdx % Math.floor(this.currentFile.sampleRate / 100) === 0) {\n          this.canvasContext.fillText(currentTime.toString(), startX + i * widthStep, this.timelineHeight * 0.5);\n        }\n      }\n    }\n\n    var c = 0;\n    var drawnChannels = 0;\n\n    for (c = 0; c < this.peakArray.length; c++) {\n      if (!this.channelEnabled[c]) continue;\n      startY = halfHeight * (drawnChannels * 2 + 1) + this.props.margin * drawnChannels + this.timelineHeight; //Draw channel text\n\n      this.canvasContext.fillText(this.channelNames[c], 0, startY + halfHeight / 2);\n      this.canvasContext.moveTo(startX, this.peakArray[c][Math.max(this.peakOffset, 0)] * halfHeight + startY); //Draw graph\n\n      for (i = 1; i < len; i++) {\n        currentIdx = Math.max(i + this.peakOffset, i);\n        if (currentIdx > this.peakArray[c].length) continue;\n        x = widthStep * i + startX + 0.1;\n        y = this.peakArray[c][currentIdx] * halfHeight + startY + 0.1;\n        this.canvasContext.lineTo(x, y);\n      }\n\n      drawnChannels++;\n    }\n\n    this.canvasContext.stroke();\n    this.canvasContext.beginPath();\n    this.canvasContext.strokeStyle = 'red';\n    this.canvasContext.lineWidth = 0.5;\n    this.canvasContext.moveTo(width / 2 + this.textWidth, 0);\n    this.canvasContext.lineTo(width / 2 + this.textWidth, height);\n\n    for (c = 0; c < channelCount; c++) {\n      this.canvasContext.moveTo(this.textWidth, c * (this.props.height + this.props.margin) + this.timelineHeight);\n      this.canvasContext.lineTo(this.textWidth + width, c * (this.props.height + this.props.margin) + this.timelineHeight);\n      this.canvasContext.moveTo(this.textWidth, c * (this.props.height + this.props.margin) + this.props.height + this.timelineHeight);\n      this.canvasContext.lineTo(this.textWidth + width, c * (this.props.height + this.props.margin) + this.props.height + this.timelineHeight);\n    }\n\n    this.canvasContext.stroke();\n  }\n\n  getCanvas() {\n    return this.canvasRef.current;\n  }\n\n  render() {\n    var style = {\n      display: 'flex',\n      flexDirection: 'column'\n    };\n    this.peakMaxOffset = this.peakArray[0].length - this.props.count / 2;\n    this.peakMinOffset = this.props.count / -2;\n\n    if (this.canvasRef.current != null) {\n      this.draw();\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: style,\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: this.canvasRef,\n        width: this.props.width,\n        height: this.props.channels * (this.props.height + this.props.margin) + this.timelineHeight\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ScrollBar, {\n        ref: ref => {\n          this.scrollBarRef = ref;\n        },\n        width: this.props.width,\n        height: \"20\",\n        handleWidth: this.props.count / (this.peakArray[0].length + this.props.count / 2),\n        onDragStart: this.stop,\n        onDrag: this.setoffset\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default CanvasGraph;","map":{"version":3,"sources":["C:/Users/tank6/Desktop/React/brainwave_webviewer/src/pages/CanvasGraph.js"],"names":["React","ScrollBar","CanvasGraph","Component","constructor","props","canvasRef","createRef","canvasContext","scrollBarRef","isPlaying","textWidth","timelineHeight","play","bind","stop","setoffset","channelCount","channels","peakArray","channelEnabled","channelNames","peakOffset","count","peakMaxOffset","peakMinOffset","c","i","push","length","componentDidMount","current","getContext","alpha","fillStyle","lineWidth","shadowBlur","font","height","componentWillUnmount","timer","setInterval","update","draw","onPlayStateChanged","undefined","clearInterval","togglePlay","setfile","file","currentFile","getNormalizedAmpData","channelData","getChannelData","customName","setHandlePosition","onOffsetChanged","setchannelsenabled","arr","j","pos","Math","floor","next","speed","min","max","prev","len","width","offsetWidth","offsetHeight","halfHeight","widthStep","startX","startY","strokeStyle","strokeColor","fillRect","currentIdx","x","y","beginPath","currentTime","sampleRate","fillText","toString","drawnChannels","margin","moveTo","lineTo","stroke","getCanvas","render","style","display","flexDirection","ref"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ScrollBar from './ScrollBar';\r\n\r\nclass CanvasGraph extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.canvasRef = React.createRef();\r\n        this.canvasContext = null;\r\n        this.scrollBarRef = null;\r\n        this.isPlaying = false;\r\n        this.textWidth = 100;\r\n        this.timelineHeight = 50;\r\n\r\n        //Bind Functions\r\n        this.play = this.play.bind(this);\r\n        this.stop = this.stop.bind(this);\r\n        this.setoffset = this.setoffset.bind(this);\r\n\r\n        var channelCount = props.channels;\r\n        this.peakArray = [];\r\n        this.channelEnabled = [];\r\n        this.channelNames = [];\r\n        this.peakOffset = props.count / -2;\r\n        this.peakMaxOffset = 0;\r\n        this.peakMinOffset = props.count / -2;\r\n\r\n        //Create Test Samples\r\n        var c;\r\n        var i;\r\n        for (c = 0; c < channelCount; c++){\r\n            this.peakArray.push([]);\r\n            this.channelEnabled.push(true);\r\n            this.channelNames.push('channel_' + c);\r\n\r\n            for (i = 0; i < 100000; i++){\r\n                this.peakArray[c].push(0);\r\n            }\r\n        }\r\n\r\n        this.peakMaxOffset = this.peakArray[0].length - this.props.count / 2;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.canvasContext = this.canvasRef.current.getContext('2d', {alpha: false});\r\n        this.canvasContext.fillStyle = 'black';\r\n        this.canvasContext.lineWidth = 1;\r\n        this.canvasContext.shadowBlur = 0;\r\n\r\n        this.canvasContext.font = (this.props.height / 2) + 'px malgun gothic';\r\n        this.play();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.stop();\r\n    }\r\n\r\n    //Play\r\n    play (){\r\n        if (this.isPlaying)\r\n            return;\r\n\r\n        //Rewind\r\n        if (this.peakOffset === this.peakMaxOffset){\r\n            this.peakOffset = this.peakMinOffset;\r\n        }\r\n        \r\n        this.timer = setInterval(()=>{this.update(); this.draw();}, 5);\r\n        this.isPlaying = true;\r\n\r\n        if (this.props.onPlayStateChanged !== undefined)\r\n            this.props.onPlayStateChanged();\r\n    }\r\n    \r\n    stop(){\r\n        if (!this.isPlaying)\r\n            return;\r\n\r\n        if (this.timer == null)\r\n            return;\r\n\r\n        clearInterval(this.timer);\r\n        this.timer = null;\r\n        this.isPlaying = false;\r\n\r\n        if (this.props.onPlayStateChanged !== undefined)\r\n            this.props.onPlayStateChanged();\r\n    }\r\n\r\n    togglePlay (){\r\n        if (this.isPlaying)\r\n            this.stop();\r\n        else\r\n            this.play();\r\n    }\r\n    \r\n    //Controls\r\n    setfile(file){\r\n        this.currentFile = file;\r\n        this.peakArray = file.getNormalizedAmpData();\r\n        this.peakOffset = this.peakMinOffset;\r\n        this.peakMaxOffset = this.peakArray[0].length - this.props.count / 2;\r\n        \r\n        var i = 0;\r\n        this.channelEnabled = [];\r\n        for (i = 0; i < this.peakArray.length; i++){\r\n            this.channelEnabled.push(true);\r\n        }\r\n\r\n        var channelData = file.getChannelData();\r\n        this.channelNames = [];\r\n        for (i = 0; i < channelData.length; i++){\r\n            this.channelNames.push(channelData[i].customName);\r\n        }\r\n\r\n        this.scrollBarRef.setHandlePosition(0);\r\n        this.draw();\r\n\r\n        if (this.props.onOffsetChanged !== undefined)\r\n            this.props.onOffsetChanged(0);\r\n    }\r\n\r\n    setchannelsenabled(arr){\r\n        var j = 0;\r\n        for (var i = 0; i < this.channelEnabled.length; i++){\r\n            if (arr[j] === i){\r\n                this.channelEnabled[i] = true;\r\n                if(j < arr.length - 1){\r\n                    j++;\r\n                }\r\n            }\r\n            else{\r\n                this.channelEnabled[i] = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    setoffset(pos){\r\n        this.peakOffset = Math.floor((this.peakMaxOffset + (this.props.count / 2)) * pos) - (this.props.count / 2);\r\n        this.draw();\r\n\r\n        if (this.props.onOffsetChanged !== undefined)\r\n            this.props.onOffsetChanged(pos);\r\n    }\r\n\r\n    next(){\r\n        this.peakOffset += this.props.speed * 10;\r\n        this.peakOffset = Math.min(this.peakOffset, this.peakMaxOffset);\r\n        this.peakOffset = Math.max(this.peakOffset, this.peakMinOffset);\r\n\r\n        this.draw();\r\n        var pos = (this.peakOffset + (this.props.count / 2)) / (this.peakMaxOffset + (this.props.count / 2));\r\n        this.scrollBarRef.setHandlePosition(pos);\r\n\r\n        if (this.props.onOffsetChanged !== undefined)\r\n            this.props.onOffsetChanged(pos);\r\n    }\r\n\r\n    prev(){\r\n        this.peakOffset -= this.props.speed * 10;\r\n        this.peakOffset = Math.min(this.peakOffset, this.peakMaxOffset);\r\n        this.peakOffset = Math.max(this.peakOffset, this.peakMinOffset);\r\n\r\n        this.draw();\r\n        var pos = (this.peakOffset + (this.props.count / 2)) / (this.peakMaxOffset + (this.props.count / 2));\r\n        this.scrollBarRef.setHandlePosition(pos);\r\n\r\n        if (this.props.onOffsetChanged !== undefined)\r\n            this.props.onOffsetChanged(pos);\r\n    }\r\n\r\n    //Play Loop\r\n    update (){\r\n        this.peakOffset += this.props.speed;\r\n\r\n        if (this.peakOffset > this.peakMaxOffset){\r\n            this.peakOffset = this.peakMaxOffset;\r\n            this.stop();\r\n        }\r\n\r\n        if (this.props.onOffsetChanged !== undefined)\r\n            this.props.onOffsetChanged((this.peakOffset + (this.props.count / 2)) / this.peakMaxOffset);\r\n\r\n        if (this.scrollBarRef != null)\r\n            this.scrollBarRef.setHandlePosition((this.peakOffset + (this.props.count / 2)) / (this.peakMaxOffset + (this.props.count / 2)));\r\n    }\r\n\r\n    draw (){\r\n        if (this.peakArray[0].length < 2)\r\n            return;\r\n        \r\n        var channelCount = this.props.channels > this.peakArray.length ? this.peakArray.length : this.props.channels;\r\n\r\n        var len = this.props.count < this.peakArray[0].length ? this.props.count : this.peakArray[0].length;\r\n        var width = this.canvasRef.current.offsetWidth - this.textWidth;\r\n        var height = this.canvasRef.current.offsetHeight;\r\n        var halfHeight = this.props.height / 2;\r\n        var widthStep = width / this.props.count;\r\n\r\n        var startX = widthStep * Math.min(this.peakOffset, 0) * -1 + this.textWidth;\r\n        var startY = 0;\r\n        \r\n        this.canvasContext.strokeStyle = this.props.strokeColor;\r\n        this.canvasContext.fillStyle = 'black';\r\n        this.canvasContext.fillRect(0, 0, width + this.textWidth, height);\r\n        //this.canvasContext.clearRect(0, 0, width, height);\r\n\r\n        var currentIdx = 0;\r\n        var x = 0;\r\n        var y = 0;\r\n\r\n        this.canvasContext.fillStyle = 'white';\r\n        this.canvasContext.lineWidth = 1;\r\n\r\n        this.canvasContext.beginPath();\r\n\r\n        //Draw timeline text\r\n        var currentTime = 0;\r\n        var i = 0;\r\n\r\n        if (this.currentFile){\r\n            for (i = 0; i < len; i++){\r\n                currentIdx = Math.max(i + this.peakOffset, i);\r\n                currentTime = currentIdx / this.currentFile.sampleRate;\r\n                currentTime = Math.floor(currentTime * 100) * 0.01;\r\n\r\n                if (currentIdx % Math.floor(this.currentFile.sampleRate / 100) === 0){\r\n                    this.canvasContext.fillText(currentTime.toString(), startX + (i * widthStep), this.timelineHeight * 0.5);\r\n                }\r\n            }\r\n        }\r\n\r\n        var c = 0;\r\n        var drawnChannels = 0;\r\n        for (c = 0; c < this.peakArray.length; c++){\r\n            if (!this.channelEnabled[c])\r\n                continue;\r\n            \r\n            startY = halfHeight * (drawnChannels * 2 + 1) + (this.props.margin * drawnChannels) + this.timelineHeight;\r\n            \r\n            //Draw channel text\r\n            this.canvasContext.fillText(this.channelNames[c], 0, startY + (halfHeight / 2));\r\n            this.canvasContext.moveTo(startX, (this.peakArray[c][Math.max(this.peakOffset, 0)] * halfHeight) + startY);\r\n\r\n            //Draw graph\r\n            for(i = 1; i < len; i++){\r\n                currentIdx = Math.max(i + this.peakOffset, i);\r\n                if (currentIdx > this.peakArray[c].length)\r\n                    continue;\r\n\r\n                x = (widthStep * i) + startX + 0.1;\r\n                y = (this.peakArray[c][currentIdx] * halfHeight) + startY + 0.1;\r\n                this.canvasContext.lineTo(x, y);\r\n            }\r\n\r\n            drawnChannels++;\r\n        }\r\n        this.canvasContext.stroke();\r\n        \r\n        this.canvasContext.beginPath();\r\n        this.canvasContext.strokeStyle = 'red';\r\n        this.canvasContext.lineWidth = 0.5;\r\n        this.canvasContext.moveTo(width / 2 + this.textWidth, 0);\r\n        this.canvasContext.lineTo (width / 2 + this.textWidth, height);\r\n        for (c = 0; c < channelCount; c++){\r\n            this.canvasContext.moveTo(this.textWidth, c * (this.props.height + this.props.margin) + this.timelineHeight);\r\n            this.canvasContext.lineTo(this.textWidth + width, c * (this.props.height + this.props.margin) + this.timelineHeight);\r\n            this.canvasContext.moveTo(this.textWidth, c * (this.props.height + this.props.margin) + this.props.height + this.timelineHeight);\r\n            this.canvasContext.lineTo(this.textWidth + width, c * (this.props.height + this.props.margin) + this.props.height + this.timelineHeight);\r\n        }\r\n        this.canvasContext.stroke();\r\n    }\r\n\r\n    getCanvas(){\r\n        return this.canvasRef.current;\r\n    }\r\n\r\n    render(){\r\n        var style={\r\n            display: 'flex',\r\n            flexDirection: 'column'\r\n        };\r\n        \r\n        this.peakMaxOffset = this.peakArray[0].length - this.props.count / 2;\r\n        this.peakMinOffset = this.props.count / -2;\r\n\r\n        if (this.canvasRef.current != null){\r\n            this.draw();\r\n        }\r\n\r\n        return (\r\n        <div style={style}>\r\n            <canvas ref={this.canvasRef} \r\n            width={this.props.width} height={this.props.channels * (this.props.height + this.props.margin) + this.timelineHeight}/>\r\n            <ScrollBar ref={ref=>{this.scrollBarRef = ref;}}\r\n            width={this.props.width} height='20'\r\n            handleWidth={this.props.count / (this.peakArray[0].length + this.props.count / 2)}\r\n            onDragStart={this.stop}\r\n            onDrag={this.setoffset}/>\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default CanvasGraph;"]},"metadata":{},"sourceType":"module"}