{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\tank6\\\\Desktop\\\\React\\\\brainwave_webviewer\\\\src\\\\pages\\\\ScrollBar.js\";\nimport React from 'react';\n\nclass ScrollBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = /*#__PURE__*/React.createRef();\n    this.canvasContext = null;\n    this.ondragstart = this.ondragstart.bind(this);\n    this.ondrag = this.ondrag.bind(this);\n    this.ondragover = this.ondragover.bind(this);\n    this.isDragging = false;\n    this.isHoldingHandle = false;\n    this.handlePosition = 0.0;\n  }\n\n  componentDidMount() {\n    this.canvasContext = this.canvasRef.current.getContext('2d');\n    this.canvasContext.shadowBlur = 0;\n    this.renderCanvas();\n    var c = document.getElementById(\"scrollBarCanvas\");\n    c.addEventListener(\"touchstart\", this.touchHandler, true);\n    c.addEventListener(\"touchmove\", this.touchHandler, true);\n    c.addEventListener(\"touchend\", this.touchHandler, true);\n    c.addEventListener(\"touchcancel\", this.touchHandler, true);\n  }\n\n  componentWillUnmount() {\n    var c = document.getElementById(\"scrollBarCanvas\");\n    c.removeEventListener(\"touchstart\", this.touchHandler, true);\n    c.removeEventListener(\"touchmove\", this.touchHandler, true);\n    c.removeEventListener(\"touchend\", this.touchHandler, true);\n    c.removeEventListener(\"touchcancel\", this.touchHandler, true);\n  } //Touch event to mouse event\n\n\n  touchHandler(event) {\n    var touches = event.changedTouches;\n    var first = touches[0];\n    var type = \"\";\n\n    switch (event.type) {\n      case \"touchstart\":\n        type = \"mousedown\";\n        break;\n\n      case \"touchmove\":\n        type = \"mousemove\";\n        break;\n\n      case \"touchend\":\n        type = \"mouseup\";\n        break;\n\n      default:\n        return;\n    }\n\n    var simulatedEvent = document.createEvent(\"MouseEvent\");\n    simulatedEvent.initMouseEvent(type, true, true, window, 1, first.screenX, first.screenY, first.clientX, first.clientY, false, false, false, false, 0\n    /*left*/\n    , null);\n    first.target.dispatchEvent(simulatedEvent);\n    event.preventDefault();\n  } //Events\n\n\n  ondragstart(e) {\n    var handleWidthPx = this.props.width * this.props.handleWidth;\n    var handlePosPx = (this.props.width - handleWidthPx) * this.handlePosition;\n    var pos = this.getMousePos(this.canvasRef.current, e);\n    this.isDragging = true; //console.log('==Drag Start==');\n\n    if (Math.abs(pos.x - handlePosPx) < handleWidthPx) this.isHoldingHandle = true;\n    if (this.props.onDragStart !== undefined) this.props.onDragStart();\n    this.ondrag(e);\n  }\n\n  ondrag(e) {\n    if (this.isDragging === false) return;\n    var handleWidthPx = this.props.width * this.props.handleWidth;\n    var pos = this.getMousePos(this.canvasRef.current, e);\n    this.handlePosition = (pos.x - this.props.width / 2) / (this.props.width - handleWidthPx);\n    this.handlePosition = this.clamp(this.handlePosition, -0.5, 0.5) + 0.5; //console.log('Dragging, Pos : ' + pos.x);\n\n    if (this.props.onDrag !== undefined) this.props.onDrag(this.handlePosition);\n    this.renderCanvas();\n  }\n\n  ondragover(e) {\n    if (this.isDragging === false) return;\n    this.isDragging = false;\n    this.isHoldingHandle = false; //console.log('==Drag Over==');\n\n    if (this.props.onDragEnd !== undefined) this.props.onDragEnd();\n    this.renderCanvas();\n  }\n\n  setHandlePosition(p) {\n    this.handlePosition = p;\n    this.renderCanvas();\n  } //Render\n\n\n  renderCanvas() {\n    var width = this.canvasRef.current.offsetWidth;\n    var height = this.canvasRef.current.offsetHeight;\n    this.canvasContext.clearRect(0, 0, width, height);\n    this.canvasContext.fillStyle = 'rgba(0,0,0,.5)';\n    this.canvasContext.fillRect(0, 0, width, height); //Draw handle\n\n    var handleWidthPx = this.props.width * this.props.handleWidth;\n    var handlePosPx = (this.props.width - handleWidthPx) * this.handlePosition;\n    handlePosPx = this.clamp(handlePosPx, 0, width - handleWidthPx);\n    this.canvasContext.fillStyle = this.isHoldingHandle ? 'rgba(180.0,180.0,180.0)' : 'white';\n    this.canvasContext.fillRect(handlePosPx, 0, handleWidthPx, this.props.height);\n  }\n\n  render() {\n    if (this.canvasRef.current) this.renderCanvas();\n    return /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"scrollBarCanvas\",\n      ref: this.canvasRef,\n      width: this.props.width,\n      height: this.props.height,\n      onMouseDown: this.ondragstart,\n      onMouseMove: this.ondrag,\n      onMouseUp: this.ondragover,\n      onMouseOut: this.ondragover\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 16\n    }, this);\n  } //etc\n\n\n  getMousePos(canvas, e) {\n    var rect = canvas.getBoundingClientRect();\n    return {\n      x: e.clientX - rect.left,\n      y: e.clientY - rect.top\n    };\n  }\n\n  clamp(v, min, max) {\n    if (v < min) return min;else if (v > max) return max;\n    return v;\n  }\n\n}\n\nexport default ScrollBar;","map":{"version":3,"sources":["C:/Users/tank6/Desktop/React/brainwave_webviewer/src/pages/ScrollBar.js"],"names":["React","ScrollBar","Component","constructor","props","canvasRef","createRef","canvasContext","ondragstart","bind","ondrag","ondragover","isDragging","isHoldingHandle","handlePosition","componentDidMount","current","getContext","shadowBlur","renderCanvas","c","document","getElementById","addEventListener","touchHandler","componentWillUnmount","removeEventListener","event","touches","changedTouches","first","type","simulatedEvent","createEvent","initMouseEvent","window","screenX","screenY","clientX","clientY","target","dispatchEvent","preventDefault","e","handleWidthPx","width","handleWidth","handlePosPx","pos","getMousePos","Math","abs","x","onDragStart","undefined","clamp","onDrag","onDragEnd","setHandlePosition","p","offsetWidth","height","offsetHeight","clearRect","fillStyle","fillRect","render","canvas","rect","getBoundingClientRect","left","y","top","v","min","max"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,SAAN,SAAwBD,KAAK,CAACE,SAA9B,CAAuC;AACnCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,SAAL,gBAAiBL,KAAK,CAACM,SAAN,EAAjB;AACA,SAAKC,aAAL,GAAqB,IAArB;AAEA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKC,MAAL,GAAc,KAAKA,MAAL,CAAYD,IAAZ,CAAiB,IAAjB,CAAd;AACA,SAAKE,UAAL,GAAkB,KAAKA,UAAL,CAAgBF,IAAhB,CAAqB,IAArB,CAAlB;AAEA,SAAKG,UAAL,GAAkB,KAAlB;AACA,SAAKC,eAAL,GAAuB,KAAvB;AACA,SAAKC,cAAL,GAAsB,GAAtB;AACH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKR,aAAL,GAAqB,KAAKF,SAAL,CAAeW,OAAf,CAAuBC,UAAvB,CAAkC,IAAlC,CAArB;AACA,SAAKV,aAAL,CAAmBW,UAAnB,GAAgC,CAAhC;AAEA,SAAKC,YAAL;AAEA,QAAIC,CAAC,GAAGC,QAAQ,CAACC,cAAT,CAAwB,iBAAxB,CAAR;AACAF,IAAAA,CAAC,CAACG,gBAAF,CAAmB,YAAnB,EAAiC,KAAKC,YAAtC,EAAoD,IAApD;AACAJ,IAAAA,CAAC,CAACG,gBAAF,CAAmB,WAAnB,EAAgC,KAAKC,YAArC,EAAmD,IAAnD;AACAJ,IAAAA,CAAC,CAACG,gBAAF,CAAmB,UAAnB,EAA+B,KAAKC,YAApC,EAAkD,IAAlD;AACAJ,IAAAA,CAAC,CAACG,gBAAF,CAAmB,aAAnB,EAAkC,KAAKC,YAAvC,EAAqD,IAArD;AACH;;AAEDC,EAAAA,oBAAoB,GAAE;AAClB,QAAIL,CAAC,GAAGC,QAAQ,CAACC,cAAT,CAAwB,iBAAxB,CAAR;AACAF,IAAAA,CAAC,CAACM,mBAAF,CAAsB,YAAtB,EAAoC,KAAKF,YAAzC,EAAuD,IAAvD;AACAJ,IAAAA,CAAC,CAACM,mBAAF,CAAsB,WAAtB,EAAmC,KAAKF,YAAxC,EAAsD,IAAtD;AACAJ,IAAAA,CAAC,CAACM,mBAAF,CAAsB,UAAtB,EAAkC,KAAKF,YAAvC,EAAqD,IAArD;AACAJ,IAAAA,CAAC,CAACM,mBAAF,CAAsB,aAAtB,EAAqC,KAAKF,YAA1C,EAAwD,IAAxD;AACH,GAlCkC,CAoCnC;;;AACAA,EAAAA,YAAY,CAACG,KAAD,EACZ;AACI,QAAIC,OAAO,GAAGD,KAAK,CAACE,cAApB;AACA,QAAIC,KAAK,GAAGF,OAAO,CAAC,CAAD,CAAnB;AACA,QAAIG,IAAI,GAAG,EAAX;;AAEA,YAAOJ,KAAK,CAACI,IAAb;AAEI,WAAK,YAAL;AAAmBA,QAAAA,IAAI,GAAG,WAAP;AAAoB;;AACvC,WAAK,WAAL;AAAmBA,QAAAA,IAAI,GAAC,WAAL;AAAkB;;AACrC,WAAK,UAAL;AAAmBA,QAAAA,IAAI,GAAC,SAAL;AAAgB;;AACnC;AAAS;AALb;;AAOA,QAAIC,cAAc,GAAGX,QAAQ,CAACY,WAAT,CAAqB,YAArB,CAArB;AACAD,IAAAA,cAAc,CAACE,cAAf,CAA8BH,IAA9B,EAAoC,IAApC,EAA0C,IAA1C,EAAgDI,MAAhD,EAAwD,CAAxD,EACwBL,KAAK,CAACM,OAD9B,EACuCN,KAAK,CAACO,OAD7C,EAEwBP,KAAK,CAACQ,OAF9B,EAEuCR,KAAK,CAACS,OAF7C,EAEsD,KAFtD,EAGwB,KAHxB,EAG+B,KAH/B,EAGsC,KAHtC,EAG6C;AAAC;AAH9C,MAGwD,IAHxD;AAKAT,IAAAA,KAAK,CAACU,MAAN,CAAaC,aAAb,CAA2BT,cAA3B;AACAL,IAAAA,KAAK,CAACe,cAAN;AACH,GA1DkC,CA4DnC;;;AACAlC,EAAAA,WAAW,CAAEmC,CAAF,EAAK;AACZ,QAAIC,aAAa,GAAG,KAAKxC,KAAL,CAAWyC,KAAX,GAAmB,KAAKzC,KAAL,CAAW0C,WAAlD;AACA,QAAIC,WAAW,GAAG,CAAC,KAAK3C,KAAL,CAAWyC,KAAX,GAAmBD,aAApB,IAAqC,KAAK9B,cAA5D;AACA,QAAIkC,GAAG,GAAG,KAAKC,WAAL,CAAiB,KAAK5C,SAAL,CAAeW,OAAhC,EAAyC2B,CAAzC,CAAV;AAEA,SAAK/B,UAAL,GAAkB,IAAlB,CALY,CAMZ;;AAEA,QAAIsC,IAAI,CAACC,GAAL,CAASH,GAAG,CAACI,CAAJ,GAAQL,WAAjB,IAAgCH,aAApC,EACI,KAAK/B,eAAL,GAAuB,IAAvB;AACJ,QAAI,KAAKT,KAAL,CAAWiD,WAAX,KAA2BC,SAA/B,EACI,KAAKlD,KAAL,CAAWiD,WAAX;AACJ,SAAK3C,MAAL,CAAYiC,CAAZ;AACH;;AAEDjC,EAAAA,MAAM,CAACiC,CAAD,EAAG;AACL,QAAI,KAAK/B,UAAL,KAAoB,KAAxB,EACI;AAEJ,QAAIgC,aAAa,GAAG,KAAKxC,KAAL,CAAWyC,KAAX,GAAmB,KAAKzC,KAAL,CAAW0C,WAAlD;AACA,QAAIE,GAAG,GAAG,KAAKC,WAAL,CAAiB,KAAK5C,SAAL,CAAeW,OAAhC,EAAyC2B,CAAzC,CAAV;AAEA,SAAK7B,cAAL,GAAsB,CAACkC,GAAG,CAACI,CAAJ,GAAS,KAAKhD,KAAL,CAAWyC,KAAX,GAAmB,CAA7B,KAAoC,KAAKzC,KAAL,CAAWyC,KAAX,GAAmBD,aAAvD,CAAtB;AACA,SAAK9B,cAAL,GAAsB,KAAKyC,KAAL,CAAW,KAAKzC,cAAhB,EAAgC,CAAC,GAAjC,EAAsC,GAAtC,IAA6C,GAAnE,CARK,CASL;;AAEA,QAAI,KAAKV,KAAL,CAAWoD,MAAX,KAAsBF,SAA1B,EACI,KAAKlD,KAAL,CAAWoD,MAAX,CAAkB,KAAK1C,cAAvB;AAEJ,SAAKK,YAAL;AACH;;AAEDR,EAAAA,UAAU,CAAEgC,CAAF,EAAI;AACV,QAAI,KAAK/B,UAAL,KAAoB,KAAxB,EACI;AAEJ,SAAKA,UAAL,GAAkB,KAAlB;AACA,SAAKC,eAAL,GAAuB,KAAvB,CALU,CAMV;;AAEA,QAAI,KAAKT,KAAL,CAAWqD,SAAX,KAAyBH,SAA7B,EACI,KAAKlD,KAAL,CAAWqD,SAAX;AAEJ,SAAKtC,YAAL;AACH;;AAEDuC,EAAAA,iBAAiB,CAAEC,CAAF,EAAI;AACjB,SAAK7C,cAAL,GAAsB6C,CAAtB;AACA,SAAKxC,YAAL;AACH,GA9GkC,CAgHnC;;;AACAA,EAAAA,YAAY,GAAE;AACV,QAAI0B,KAAK,GAAG,KAAKxC,SAAL,CAAeW,OAAf,CAAuB4C,WAAnC;AACA,QAAIC,MAAM,GAAG,KAAKxD,SAAL,CAAeW,OAAf,CAAuB8C,YAApC;AAEA,SAAKvD,aAAL,CAAmBwD,SAAnB,CAA6B,CAA7B,EAAgC,CAAhC,EAAmClB,KAAnC,EAA0CgB,MAA1C;AACA,SAAKtD,aAAL,CAAmByD,SAAnB,GAA+B,gBAA/B;AACA,SAAKzD,aAAL,CAAmB0D,QAAnB,CAA4B,CAA5B,EAA+B,CAA/B,EAAkCpB,KAAlC,EAAyCgB,MAAzC,EANU,CAQV;;AACA,QAAIjB,aAAa,GAAG,KAAKxC,KAAL,CAAWyC,KAAX,GAAmB,KAAKzC,KAAL,CAAW0C,WAAlD;AACA,QAAIC,WAAW,GAAG,CAAC,KAAK3C,KAAL,CAAWyC,KAAX,GAAmBD,aAApB,IAAqC,KAAK9B,cAA5D;AACAiC,IAAAA,WAAW,GAAG,KAAKQ,KAAL,CAAWR,WAAX,EAAwB,CAAxB,EAA2BF,KAAK,GAAGD,aAAnC,CAAd;AAEA,SAAKrC,aAAL,CAAmByD,SAAnB,GAA+B,KAAKnD,eAAL,GAAuB,yBAAvB,GAAmD,OAAlF;AACA,SAAKN,aAAL,CAAmB0D,QAAnB,CAA4BlB,WAA5B,EAAyC,CAAzC,EAA4CH,aAA5C,EAA2D,KAAKxC,KAAL,CAAWyD,MAAtE;AACH;;AAEDK,EAAAA,MAAM,GAAE;AACJ,QAAI,KAAK7D,SAAL,CAAeW,OAAnB,EACI,KAAKG,YAAL;AAEJ,wBAAO;AAAQ,MAAA,EAAE,EAAC,iBAAX;AACC,MAAA,GAAG,EAAE,KAAKd,SADX;AAEC,MAAA,KAAK,EAAE,KAAKD,KAAL,CAAWyC,KAFnB;AAE0B,MAAA,MAAM,EAAE,KAAKzC,KAAL,CAAWyD,MAF7C;AAGC,MAAA,WAAW,EAAE,KAAKrD,WAHnB;AAIC,MAAA,WAAW,EAAE,KAAKE,MAJnB;AAKC,MAAA,SAAS,EAAE,KAAKC,UALjB;AAMC,MAAA,UAAU,EAAE,KAAKA;AANlB;AAAA;AAAA;AAAA;AAAA,YAAP;AAOH,GA7IkC,CA+InC;;;AACAsC,EAAAA,WAAW,CAACkB,MAAD,EAASxB,CAAT,EAAY;AACnB,QAAIyB,IAAI,GAAGD,MAAM,CAACE,qBAAP,EAAX;AACA,WAAO;AACHjB,MAAAA,CAAC,EAAET,CAAC,CAACL,OAAF,GAAY8B,IAAI,CAACE,IADjB;AAEHC,MAAAA,CAAC,EAAE5B,CAAC,CAACJ,OAAF,GAAY6B,IAAI,CAACI;AAFjB,KAAP;AAIH;;AAEDjB,EAAAA,KAAK,CAACkB,CAAD,EAAIC,GAAJ,EAASC,GAAT,EAAa;AACd,QAAIF,CAAC,GAAGC,GAAR,EACI,OAAOA,GAAP,CADJ,KAEK,IAAID,CAAC,GAAGE,GAAR,EACD,OAAOA,GAAP;AAEJ,WAAOF,CAAP;AACH;;AA/JkC;;AAkKvC,eAAexE,SAAf","sourcesContent":["import React from 'react'\r\n\r\nclass ScrollBar extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.canvasRef = React.createRef();\r\n        this.canvasContext = null;\r\n\r\n        this.ondragstart = this.ondragstart.bind(this);\r\n        this.ondrag = this.ondrag.bind(this);\r\n        this.ondragover = this.ondragover.bind(this);\r\n\r\n        this.isDragging = false;\r\n        this.isHoldingHandle = false;\r\n        this.handlePosition = 0.0;\r\n    }\r\n\r\n    componentDidMount (){\r\n        this.canvasContext = this.canvasRef.current.getContext('2d');\r\n        this.canvasContext.shadowBlur = 0;\r\n\r\n        this.renderCanvas();\r\n\r\n        var c = document.getElementById(\"scrollBarCanvas\");\r\n        c.addEventListener(\"touchstart\", this.touchHandler, true);\r\n        c.addEventListener(\"touchmove\", this.touchHandler, true);\r\n        c.addEventListener(\"touchend\", this.touchHandler, true);\r\n        c.addEventListener(\"touchcancel\", this.touchHandler, true);\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        var c = document.getElementById(\"scrollBarCanvas\");\r\n        c.removeEventListener(\"touchstart\", this.touchHandler, true);\r\n        c.removeEventListener(\"touchmove\", this.touchHandler, true);\r\n        c.removeEventListener(\"touchend\", this.touchHandler, true);\r\n        c.removeEventListener(\"touchcancel\", this.touchHandler, true);\r\n    }\r\n\r\n    //Touch event to mouse event\r\n    touchHandler(event)\r\n    {\r\n        var touches = event.changedTouches;\r\n        var first = touches[0];\r\n        var type = \"\";\r\n    \r\n        switch(event.type)\r\n        {\r\n            case \"touchstart\": type = \"mousedown\"; break;\r\n            case \"touchmove\":  type=\"mousemove\"; break;       \r\n            case \"touchend\":   type=\"mouseup\"; break;\r\n            default: return;\r\n        }\r\n        var simulatedEvent = document.createEvent(\"MouseEvent\");\r\n        simulatedEvent.initMouseEvent(type, true, true, window, 1,\r\n                                first.screenX, first.screenY,\r\n                                first.clientX, first.clientY, false,\r\n                                false, false, false, 0/*left*/, null);\r\n    \r\n        first.target.dispatchEvent(simulatedEvent);\r\n        event.preventDefault();\r\n    }\r\n\r\n    //Events\r\n    ondragstart (e) {\r\n        var handleWidthPx = this.props.width * this.props.handleWidth;\r\n        var handlePosPx = (this.props.width - handleWidthPx) * this.handlePosition;\r\n        var pos = this.getMousePos(this.canvasRef.current, e);\r\n\r\n        this.isDragging = true;\r\n        //console.log('==Drag Start==');\r\n\r\n        if (Math.abs(pos.x - handlePosPx) < handleWidthPx)\r\n            this.isHoldingHandle = true;\r\n        if (this.props.onDragStart !== undefined)\r\n            this.props.onDragStart();\r\n        this.ondrag(e);\r\n    }\r\n\r\n    ondrag(e){\r\n        if (this.isDragging === false)\r\n            return;\r\n        \r\n        var handleWidthPx = this.props.width * this.props.handleWidth;\r\n        var pos = this.getMousePos(this.canvasRef.current, e);\r\n\r\n        this.handlePosition = (pos.x - (this.props.width / 2)) / (this.props.width - handleWidthPx);\r\n        this.handlePosition = this.clamp(this.handlePosition, -0.5, 0.5) + 0.5;\r\n        //console.log('Dragging, Pos : ' + pos.x);\r\n\r\n        if (this.props.onDrag !== undefined)\r\n            this.props.onDrag(this.handlePosition);\r\n        \r\n        this.renderCanvas();\r\n    }\r\n\r\n    ondragover (e){\r\n        if (this.isDragging === false)\r\n            return;\r\n\r\n        this.isDragging = false;\r\n        this.isHoldingHandle = false;\r\n        //console.log('==Drag Over==');\r\n\r\n        if (this.props.onDragEnd !== undefined)\r\n            this.props.onDragEnd();\r\n\r\n        this.renderCanvas();\r\n    }\r\n\r\n    setHandlePosition (p){\r\n        this.handlePosition = p;\r\n        this.renderCanvas();\r\n    }\r\n\r\n    //Render\r\n    renderCanvas(){\r\n        var width = this.canvasRef.current.offsetWidth;\r\n        var height = this.canvasRef.current.offsetHeight;\r\n        \r\n        this.canvasContext.clearRect(0, 0, width, height);\r\n        this.canvasContext.fillStyle = 'rgba(0,0,0,.5)';\r\n        this.canvasContext.fillRect(0, 0, width, height);\r\n\r\n        //Draw handle\r\n        var handleWidthPx = this.props.width * this.props.handleWidth;\r\n        var handlePosPx = (this.props.width - handleWidthPx) * this.handlePosition;\r\n        handlePosPx = this.clamp(handlePosPx, 0, width - handleWidthPx);\r\n\r\n        this.canvasContext.fillStyle = this.isHoldingHandle ? 'rgba(180.0,180.0,180.0)' : 'white';\r\n        this.canvasContext.fillRect(handlePosPx, 0, handleWidthPx, this.props.height);\r\n    }\r\n\r\n    render(){\r\n        if (this.canvasRef.current)\r\n            this.renderCanvas();\r\n\r\n        return <canvas id=\"scrollBarCanvas\"\r\n                ref={this.canvasRef}\r\n                width={this.props.width} height={this.props.height}\r\n                onMouseDown={this.ondragstart} \r\n                onMouseMove={this.ondrag}\r\n                onMouseUp={this.ondragover}\r\n                onMouseOut={this.ondragover}/>\r\n    }\r\n\r\n    //etc\r\n    getMousePos(canvas, e) {\r\n        var rect = canvas.getBoundingClientRect();\r\n        return {\r\n            x: e.clientX - rect.left,\r\n            y: e.clientY - rect.top\r\n        };\r\n    }\r\n\r\n    clamp(v, min, max){\r\n        if (v < min)\r\n            return min;\r\n        else if (v > max)\r\n            return max;\r\n\r\n        return v;\r\n    }\r\n}\r\n\r\nexport default ScrollBar;"]},"metadata":{},"sourceType":"module"}