{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\tank6\\\\Desktop\\\\React\\\\brainwave_webviewer\\\\src\\\\pages\\\\CanvasGraph.js\";\nimport React from 'react';\nimport ScrollBar from './ScrollBar';\n\nclass CanvasGraph extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = /*#__PURE__*/React.createRef();\n    this.canvasContext = null;\n    this.scrollBarRef = null;\n    this.isPlaying = false; //Bind Functions\n\n    this.play = this.play.bind(this);\n    this.stop = this.stop.bind(this);\n    this.setoffset = this.setoffset.bind(this);\n    this.setpeaks = this.setpeaks.bind(this);\n    var channelCount = props.channels;\n    this.peakArray = [];\n    this.peakOffset = 0;\n    this.peakMaxLength = 0; //Create Test Samples\n\n    var c;\n    var i;\n\n    for (c = 0; c < channelCount; c++) {\n      this.peakArray.push([]);\n\n      for (i = 0; i < 100000; i++) {\n        this.peakArray[c].push(0);\n      }\n    }\n\n    this.peakMaxLength = this.peakArray[0].length - this.props.count / 2;\n  }\n\n  componentDidMount() {\n    this.canvasContext = this.canvasRef.current.getContext('2d', {\n      alpha: false\n    });\n    this.canvasContext.fillStyle = 'black';\n    this.canvasContext.lineWidth = 1;\n    this.canvasContext.shadowBlur = 0;\n    this.play();\n  }\n\n  componentWillUnmount() {\n    this.stop();\n  } //Play\n\n\n  play() {\n    //Rewind\n    if (this.peakOffset === this.peakMaxLength) {\n      for (var i = 0; i < this.props.channels; i++) {\n        this.peakOffset = 0;\n      }\n    }\n\n    this.timer = setInterval(() => {\n      this.update();\n      this.draw();\n    }, 5);\n    this.isPlaying = true;\n    if (this.props.onPlayStateChanged !== undefined) this.props.onPlayStateChanged();\n  }\n\n  stop() {\n    if (this.timer == null) return;\n    clearInterval(this.timer);\n    this.timer = null;\n    this.isPlaying = false;\n    if (this.props.onPlayStateChanged !== undefined) this.props.onPlayStateChanged();\n  }\n\n  togglePlay() {\n    if (this.isPlaying) this.stop();else this.play();\n  } //Controls\n\n\n  setpeaks(arr) {\n    this.peakArray = arr;\n    this.peakOffset = 0;\n    this.peakMaxLength = this.peakArray[0].length - this.props.count / 2;\n    this.scrollBarRef.setHandlePosition(0);\n    this.draw();\n    if (this.props.onOffsetChanged !== undefined) this.props.onOffsetChanged(0);\n  }\n\n  setoffset(pos) {\n    this.peakOffset = Math.floor(this.peakMaxLength * pos);\n    this.draw();\n    if (this.props.onOffsetChanged !== undefined) this.props.onOffsetChanged(pos);\n  } //Play Loop\n\n\n  update() {\n    this.peakOffset += this.props.speed;\n\n    if (this.peakOffset > this.peakMaxLength) {\n      this.peakOffset = this.peakMaxLength;\n      this.stop();\n    }\n\n    if (this.props.onOffsetChanged !== undefined) this.props.onOffsetChanged(this.peakOffset / this.peakMaxLength);\n    if (this.scrollBarRef != null) this.scrollBarRef.setHandlePosition(this.peakOffset / this.peakMaxLength);\n  }\n\n  draw() {\n    if (this.peakArray[0].length < 2) return;\n    var channelCount = this.props.channels > this.peakArray.length ? this.peakArray.length : this.props.channels;\n    var len = this.props.count < this.peakArray[0].length ? this.props.count : this.peakArray[0].length;\n    var width = this.canvasRef.current.offsetWidth;\n    var height = this.canvasRef.current.offsetHeight;\n    var halfHeight = height / 2 / channelCount;\n    var widthStep = width / this.props.count;\n    var startX = width - len * widthStep + width * 0.5;\n    var startY = 0;\n    this.canvasContext.strokeStyle = this.props.strokeColor;\n    this.canvasContext.fillRect(0, 0, width, height); //this.canvasContext.clearRect(0, 0, width, height);\n\n    var currentIdx = 0;\n    var x = 0;\n    var y = 0;\n    this.canvasContext.beginPath();\n\n    for (var c = 0; c < channelCount; c++) {\n      startY = halfHeight * (c * 2 + 1) + this.props.margin * c;\n      this.canvasContext.moveTo(widthStep * (this.props.count / 2 - Math.min(this.peakOffset, this.props.count / 2)), this.peakArray[c][0] * halfHeight + startY);\n\n      for (var i = 1; i < len; i++) {\n        currentIdx = i + this.peakOffset;\n        if (currentIdx < 0 || currentIdx > this.peakArray[c].length) continue;\n        x = widthStep * (i - Math.min(this.peakOffset, this.props.count / 2)) + startX;\n        y = this.peakArray[c][currentIdx] * halfHeight + startY;\n        this.canvasContext.lineTo(x, y);\n      }\n    }\n\n    this.canvasContext.stroke();\n  }\n\n  getCanvas() {\n    return this.canvasRef.current;\n  }\n\n  render() {\n    var style = {\n      display: 'flex',\n      flexDirection: 'column'\n    };\n    if (this.canvasRef.current != null) this.draw();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: style,\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: this.canvasRef,\n        width: this.props.width,\n        height: this.props.channels * this.props.height + this.props.margin * (this.props.channels - 1)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ScrollBar, {\n        ref: ref => {\n          this.scrollBarRef = ref;\n        },\n        width: this.props.width,\n        height: \"20\",\n        handleWidth: this.props.count / this.peakArray[0].length,\n        onDragStart: this.stop,\n        onDrag: this.setoffset\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default CanvasGraph;","map":{"version":3,"sources":["C:/Users/tank6/Desktop/React/brainwave_webviewer/src/pages/CanvasGraph.js"],"names":["React","ScrollBar","CanvasGraph","Component","constructor","props","canvasRef","createRef","canvasContext","scrollBarRef","isPlaying","play","bind","stop","setoffset","setpeaks","channelCount","channels","peakArray","peakOffset","peakMaxLength","c","i","push","length","count","componentDidMount","current","getContext","alpha","fillStyle","lineWidth","shadowBlur","componentWillUnmount","timer","setInterval","update","draw","onPlayStateChanged","undefined","clearInterval","togglePlay","arr","setHandlePosition","onOffsetChanged","pos","Math","floor","speed","len","width","offsetWidth","height","offsetHeight","halfHeight","widthStep","startX","startY","strokeStyle","strokeColor","fillRect","currentIdx","x","y","beginPath","margin","moveTo","min","lineTo","stroke","getCanvas","render","style","display","flexDirection","ref"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ScrollBar from './ScrollBar';\r\n\r\nclass CanvasGraph extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.canvasRef = React.createRef();\r\n        this.canvasContext = null;\r\n        this.scrollBarRef = null;\r\n        this.isPlaying = false;\r\n\r\n        //Bind Functions\r\n        this.play = this.play.bind(this);\r\n        this.stop = this.stop.bind(this);\r\n        this.setoffset = this.setoffset.bind(this);\r\n        this.setpeaks = this.setpeaks.bind(this);\r\n\r\n        var channelCount = props.channels;\r\n        this.peakArray = [];\r\n        this.peakOffset = 0;\r\n        this.peakMaxLength = 0;\r\n\r\n        //Create Test Samples\r\n        var c;\r\n        var i;\r\n        for (c = 0; c < channelCount; c++){\r\n            this.peakArray.push([]);\r\n\r\n            for (i = 0; i < 100000; i++){\r\n                this.peakArray[c].push(0);\r\n            }\r\n        }\r\n\r\n        this.peakMaxLength = this.peakArray[0].length - this.props.count / 2;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.canvasContext = this.canvasRef.current.getContext('2d', {alpha: false});\r\n        this.canvasContext.fillStyle = 'black';\r\n        this.canvasContext.lineWidth = 1;\r\n        this.canvasContext.shadowBlur = 0;\r\n        this.play();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.stop();\r\n    }\r\n\r\n    //Play\r\n    play (){\r\n        //Rewind\r\n        if (this.peakOffset === this.peakMaxLength){\r\n            for(var i = 0; i < this.props.channels; i++){\r\n                this.peakOffset = 0; \r\n            }\r\n        }\r\n        \r\n        this.timer = setInterval(()=>{this.update(); this.draw();}, 5);\r\n        this.isPlaying = true;\r\n\r\n        if (this.props.onPlayStateChanged !== undefined)\r\n            this.props.onPlayStateChanged();\r\n    }\r\n    \r\n    stop(){\r\n        if (this.timer == null)\r\n            return;\r\n\r\n        clearInterval(this.timer);\r\n        this.timer = null;\r\n        this.isPlaying = false;\r\n\r\n        if (this.props.onPlayStateChanged !== undefined)\r\n            this.props.onPlayStateChanged();\r\n    }\r\n\r\n    togglePlay (){\r\n        if (this.isPlaying)\r\n            this.stop();\r\n        else\r\n            this.play();\r\n    }\r\n    \r\n    //Controls\r\n    setpeaks(arr){\r\n        this.peakArray = arr;\r\n        this.peakOffset = 0;\r\n        this.peakMaxLength = this.peakArray[0].length - this.props.count / 2;\r\n\r\n        this.scrollBarRef.setHandlePosition(0);\r\n        this.draw();\r\n\r\n        if (this.props.onOffsetChanged !== undefined)\r\n            this.props.onOffsetChanged(0);\r\n    }\r\n\r\n    setoffset(pos){\r\n        this.peakOffset = Math.floor(this.peakMaxLength * pos);\r\n        this.draw();\r\n\r\n        if (this.props.onOffsetChanged !== undefined)\r\n            this.props.onOffsetChanged(pos);\r\n    }\r\n\r\n    //Play Loop\r\n    update (){\r\n        this.peakOffset += this.props.speed;\r\n\r\n        if (this.peakOffset > this.peakMaxLength){\r\n            this.peakOffset = this.peakMaxLength;\r\n            this.stop();\r\n        }\r\n\r\n        if (this.props.onOffsetChanged !== undefined)\r\n            this.props.onOffsetChanged(this.peakOffset / this.peakMaxLength);\r\n\r\n        if (this.scrollBarRef != null)\r\n            this.scrollBarRef.setHandlePosition(this.peakOffset/ this.peakMaxLength);\r\n    }\r\n\r\n    draw (){\r\n        if (this.peakArray[0].length < 2)\r\n            return;\r\n        \r\n        var channelCount = this.props.channels > this.peakArray.length ? this.peakArray.length : this.props.channels;\r\n\r\n        var len = this.props.count < this.peakArray[0].length ? this.props.count : this.peakArray[0].length;\r\n        var width = this.canvasRef.current.offsetWidth;\r\n        var height = this.canvasRef.current.offsetHeight;\r\n        var halfHeight = height / 2 / channelCount;\r\n        var widthStep = width / this.props.count;\r\n\r\n        var startX = width - (len * widthStep) + (width * 0.5);\r\n        var startY = 0;\r\n        \r\n        this.canvasContext.strokeStyle = this.props.strokeColor;\r\n        this.canvasContext.fillRect(0, 0, width, height);\r\n        //this.canvasContext.clearRect(0, 0, width, height);\r\n\r\n        var currentIdx = 0;\r\n        var x = 0;\r\n        var y = 0;\r\n\r\n        this.canvasContext.beginPath();\r\n        for (var c = 0; c < channelCount; c++){\r\n            startY = halfHeight * (c * 2 + 1) + (this.props.margin * c);\r\n            this.canvasContext.moveTo(widthStep * ((this.props.count / 2) - Math.min(this.peakOffset, this.props.count / 2)), this.peakArray[c][0] * halfHeight + startY);\r\n\r\n            for(var i = 1; i < len; i++){\r\n                currentIdx = (i + this.peakOffset);\r\n                if (currentIdx < 0 || currentIdx > this.peakArray[c].length)\r\n                    continue;\r\n\r\n                x = (widthStep * (i - Math.min(this.peakOffset, this.props.count / 2))) + startX;\r\n                y = (this.peakArray[c][currentIdx] * halfHeight) + startY;\r\n                this.canvasContext.lineTo(x, y);\r\n            }\r\n        }\r\n        this.canvasContext.stroke();\r\n    }\r\n\r\n    getCanvas(){\r\n        return this.canvasRef.current;\r\n    }\r\n\r\n    render(){\r\n        var style={\r\n            display: 'flex',\r\n            flexDirection: 'column'\r\n        };\r\n\r\n        if (this.canvasRef.current != null)\r\n            this.draw();\r\n\r\n        return (\r\n        <div style={style}>\r\n            <canvas ref={this.canvasRef} \r\n            width={this.props.width} height={this.props.channels * this.props.height + (this.props.margin * (this.props.channels - 1))}/>\r\n            <ScrollBar ref={ref=>{this.scrollBarRef = ref;}}\r\n            width={this.props.width} height='20'\r\n            handleWidth={this.props.count / this.peakArray[0].length}\r\n            onDragStart={this.stop}\r\n            onDrag={this.setoffset}/>\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default CanvasGraph;"]},"metadata":{},"sourceType":"module"}