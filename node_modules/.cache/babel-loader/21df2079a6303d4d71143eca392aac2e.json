{"ast":null,"code":"class RHSFile {\n  constructor(path) {\n    console.log(\"loading \" + path);\n    this.filestream = null;\n    this.onLoad = this.onLoad.bind(this);\n    this.onError = this.onError.bind(this); //Test\n\n    var localPath = \"http://localhost:3001/sample/\" + path;\n    this.request = new XMLHttpRequest();\n    /*\r\n    rawFile.onreadystatechange = function ()\r\n    {\r\n        if(rawFile.readyState === 4)\r\n        {\r\n            if(rawFile.status === 200 || rawFile.status == 0)\r\n            {\r\n                var reader = new FileReader();\r\n                \r\n                reader.onload = function(e){\r\n                    console.log(e.target.result);\r\n                };\r\n                reader.readAsBinaryString(rawFile.response);\r\n            }\r\n              rawFile.send(null);\r\n        }\r\n        else{\r\n            alert('Failed to read file ' + path);\r\n        }\r\n    }\r\n    */\n\n    this.request.open(\"GET\", localPath, true);\n    this.request.onload = this.onLoad;\n    this.request.onerror = this.onError;\n    this.request.overrideMimeType(\"text/plain; charset=x-user-defined\");\n    this.request.send(null); //reader.readAsBinaryString(\"intan_save_210107_151441.rhs\");\n  }\n\n  onLoad(e) {\n    if (this.request.readyState === 4) {\n      if (this.request.status === 200 || this.request.status === 0) {\n        /*\r\n        var reader = new FileReader();\r\n        \r\n        reader.onload = function(e){\r\n            console.log(e.target.result);\r\n        };\r\n        reader.readAsBinaryString(this.response);\r\n        */\n        this.filestream = this.request.responseText;\n      }\n    } else {\n      alert('Failed to read file');\n    }\n  }\n\n  onError(e) {\n    console.log('Error : ' + this.request.statusText);\n  } //Utilities\n\n\n  getByte(index) {\n    if (this.filestream) return this.filestream.charCodeAt(index) & 0xff;else return 0x00;\n  }\n\n}\n\nexport default RHSFile;","map":{"version":3,"sources":["C:/Users/tank6/Desktop/React/brainwave_webviewer/src/pages/RHSFile.js"],"names":["RHSFile","constructor","path","console","log","filestream","onLoad","bind","onError","localPath","request","XMLHttpRequest","open","onload","onerror","overrideMimeType","send","e","readyState","status","responseText","alert","statusText","getByte","index","charCodeAt"],"mappings":"AAAA,MAAMA,OAAN,CAAa;AACTC,EAAAA,WAAW,CAACC,IAAD,EAAM;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAaF,IAAzB;AACA,SAAKG,UAAL,GAAkB,IAAlB;AAEA,SAAKC,MAAL,GAAc,KAAKA,MAAL,CAAYC,IAAZ,CAAiB,IAAjB,CAAd;AACA,SAAKC,OAAL,GAAe,KAAKA,OAAL,CAAaD,IAAb,CAAkB,IAAlB,CAAf,CALa,CAOb;;AACA,QAAIE,SAAS,GAAG,kCAAkCP,IAAlD;AACA,SAAKQ,OAAL,GAAe,IAAIC,cAAJ,EAAf;AAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGQ,SAAKD,OAAL,CAAaE,IAAb,CAAkB,KAAlB,EAAyBH,SAAzB,EAAoC,IAApC;AACA,SAAKC,OAAL,CAAaG,MAAb,GAAsB,KAAKP,MAA3B;AACA,SAAKI,OAAL,CAAaI,OAAb,GAAuB,KAAKN,OAA5B;AACA,SAAKE,OAAL,CAAaK,gBAAb,CAA8B,oCAA9B;AACA,SAAKL,OAAL,CAAaM,IAAb,CAAkB,IAAlB,EAtCa,CAwCb;AACH;;AAEDV,EAAAA,MAAM,CAAEW,CAAF,EAAI;AACN,QAAG,KAAKP,OAAL,CAAaQ,UAAb,KAA4B,CAA/B,EACI;AACI,UAAG,KAAKR,OAAL,CAAaS,MAAb,KAAwB,GAAxB,IAA+B,KAAKT,OAAL,CAAaS,MAAb,KAAwB,CAA1D,EACA;AACI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACoB,aAAKd,UAAL,GAAkB,KAAKK,OAAL,CAAaU,YAA/B;AACH;AACJ,KAdL,MAeQ;AACAC,MAAAA,KAAK,CAAC,qBAAD,CAAL;AACH;AACR;;AAEDb,EAAAA,OAAO,CAAES,CAAF,EAAI;AACPd,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAa,KAAKM,OAAL,CAAaY,UAAtC;AACH,GAnEQ,CAqET;;;AACAC,EAAAA,OAAO,CAAEC,KAAF,EAAS;AACZ,QAAI,KAAKnB,UAAT,EACI,OAAO,KAAKA,UAAL,CAAgBoB,UAAhB,CAA2BD,KAA3B,IAAoC,IAA3C,CADJ,KAGI,OAAO,IAAP;AACP;;AA3EQ;;AAgFb,eAAexB,OAAf","sourcesContent":["class RHSFile{\r\n    constructor(path){\r\n        console.log(\"loading \" + path);\r\n        this.filestream = null;\r\n\r\n        this.onLoad = this.onLoad.bind(this);\r\n        this.onError = this.onError.bind(this);\r\n\r\n        //Test\r\n        var localPath = \"http://localhost:3001/sample/\" + path;\r\n        this.request = new XMLHttpRequest();\r\n\r\n        /*\r\n        rawFile.onreadystatechange = function ()\r\n        {\r\n            if(rawFile.readyState === 4)\r\n            {\r\n                if(rawFile.status === 200 || rawFile.status == 0)\r\n                {\r\n                    var reader = new FileReader();\r\n                    \r\n                    reader.onload = function(e){\r\n                        console.log(e.target.result);\r\n                    };\r\n                    reader.readAsBinaryString(rawFile.response);\r\n                }\r\n\r\n                rawFile.send(null);\r\n            }\r\n            else{\r\n                alert('Failed to read file ' + path);\r\n            }\r\n        }\r\n        */\r\n\r\n        this.request.open(\"GET\", localPath, true);\r\n        this.request.onload = this.onLoad;\r\n        this.request.onerror = this.onError;\r\n        this.request.overrideMimeType(\"text/plain; charset=x-user-defined\");\r\n        this.request.send(null);\r\n\r\n        //reader.readAsBinaryString(\"intan_save_210107_151441.rhs\");\r\n    }\r\n\r\n    onLoad (e){\r\n        if(this.request.readyState === 4)\r\n            {\r\n                if(this.request.status === 200 || this.request.status === 0)\r\n                {\r\n                    /*\r\n                    var reader = new FileReader();\r\n                    \r\n                    reader.onload = function(e){\r\n                        console.log(e.target.result);\r\n                    };\r\n                    reader.readAsBinaryString(this.response);\r\n                    */\r\n                    this.filestream = this.request.responseText;\r\n                }\r\n            }\r\n            else{\r\n                alert('Failed to read file');\r\n            }\r\n    }\r\n\r\n    onError (e){\r\n        console.log('Error : ' + this.request.statusText);\r\n    }\r\n    \r\n    //Utilities\r\n    getByte (index) {\r\n        if (this.filestream)\r\n            return this.filestream.charCodeAt(index) & 0xff;\r\n        else\r\n            return 0x00;\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default RHSFile;"]},"metadata":{},"sourceType":"module"}