{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\tank6\\\\Desktop\\\\React\\\\brainwave_webviewer\\\\src\\\\pages\\\\GLGraph.js\";\nimport React from 'react';\nimport ScrollBar from './ScrollBar';\n\nclass GLGraph extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = /*#__PURE__*/React.createRef();\n    this.canvasContext = null;\n    this.scrollBarRef = null;\n    this.isPlaying = false;\n    this.count = 1000;\n    this.deltaTime = 0;\n    this.prevTime = 0;\n    this.textWidth = 100;\n    this.timelineHeight = 50;\n    this.verticalScrollPos = 0; //WebGL\n\n    this.glContext = null;\n    this.vertexBuffer = null;\n    this.shaderProgram = null;\n    this.vertexShader = null;\n    this.fragShader = null;\n    this.coordAttr = null;\n    this.resolutionUniform = null; //Bind Functions\n\n    this.loop = this.loop.bind(this);\n    this.play = this.play.bind(this);\n    this.stop = this.stop.bind(this);\n    this.setoffset = this.setoffset.bind(this);\n    this.updatecount = this.updatecount.bind(this);\n    var channelCount = props.channels;\n    this.peakArray = [];\n    this.channelEnabled = [];\n    this.channelNames = [];\n    this.peakOffset = props.count / -2;\n    this.peakMaxOffset = 0;\n    this.peakMinOffset = props.count / -2; //Create Test Samples\n\n    var c;\n    var i;\n\n    for (c = 0; c < channelCount; c++) {\n      this.peakArray.push([]);\n      this.channelEnabled.push(true);\n      this.channelNames.push(c.toString().padStart(4, '0'));\n\n      for (i = 0; i < 100000; i++) {\n        this.peakArray[c].push(0);\n      }\n    }\n\n    this.peakMaxOffset = this.peakArray[0].length - this.count / 2;\n  }\n\n  componentDidMount() {\n    var canvas = this.canvasRef.current; //this.canvasContext = canvas.getContext('2d', {alpha: false});\n    //this.canvasContext.fillStyle = 'black';\n    //this.canvasContext.lineWidth = 1;\n    //this.canvasContext.shadowBlur = 0;\n    //this.canvasContext.font = (16) + 'px malgun gothic';\n\n    try {\n      this.glContext = canvas.getContext(\"webgl\") || canvas.getContext(\"experimental-webgl\");\n    } catch (e) {}\n\n    if (this.glContext) {\n      this.initWebGL(this.glContext);\n    } else {\n      alert(\"Unable to initialize WebGL. Your browser may not support it.\");\n      this.glContext = null;\n    }\n  }\n\n  componentDidUpdate() {\n    this.draw();\n  }\n\n  componentWillUnmount() {\n    this.stop();\n  }\n\n  initWebGL(gl) {\n    //#####Shader#####\n    var vsCode = 'attribute vec2 coordinates;' + 'uniform vec2 u_resolution;' + 'void main(void) {' + 'vec2 zeroToOne = a_position / u_resolution;' + 'vec2 zeroToTwo = zeroToOne * 2.0;' + 'vec2 clipSpace = zeroToTwo - 1.0;' + 'gl_Position = vec4(clipSpace, 0, 1);' + '}';\n    var fsCode = 'void main(void) {' + 'gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);' + '}';\n    this.vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    this.fragShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(this.vertexShader, vsCode);\n    gl.shaderSource(this.fragShader, fsCode);\n    gl.compileShader(this.vertexShader);\n    gl.compileShader(this.fragShader);\n    this.shaderProgram = gl.createProgram();\n    gl.attachShader(this.shaderProgram, this.vertexShader);\n    gl.attachShader(this.shaderProgram, this.fragShader);\n    gl.linkProgram(this.shaderProgram); //#####Vertex Buffer#####\n\n    this.vertexBuffer = gl.createBuffer();\n    var vertices = [-0.7, -0.1, 0, -0.3, 0.6, 0, -0.3, -0.3, 0, 0.2, 0.6, 0, 0.3, -0.3, 0, 0.7, 0.6, 0]; // Bind appropriate array buffer to it\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    this.coordAttr = gl.getAttribLocation(this.shaderProgram, 'coordinates');\n    this.resolutionUniform = gl.getUniformLocation(this.shaderProgram, \"u_resolution\"); // Unbind the buffer\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    console.log('WebGL Initialized Successfully');\n  } //Play\n\n\n  play() {\n    if (this.isPlaying) return; //Rewind\n\n    if (this.peakOffset === this.peakMaxOffset) {\n      this.peakOffset = this.peakMinOffset;\n    }\n\n    this.prevTime = new Date().getTime();\n    this.isPlaying = true;\n    requestAnimationFrame(this.loop);\n    if (this.props.onPlayStateChanged !== undefined) this.props.onPlayStateChanged();\n  }\n\n  stop() {\n    if (!this.isPlaying) return;\n    this.isPlaying = false;\n    if (this.props.onPlayStateChanged !== undefined) this.props.onPlayStateChanged();\n  }\n\n  togglePlay() {\n    if (this.isPlaying) this.stop();else this.play();\n  } //Controls\n\n\n  setfile(file) {\n    this.currentFile = file; //file.getFilteredAmpData(60, 10, file.sampleRate);\n\n    if (file.notchFilterMode === 0) {\n      this.peakArray = file.getNormalizedAmpData();\n    } else {\n      var notchFreq = file.notchFilterMode === 1 ? 50 : 60;\n      this.peakArray = file.getFilteredAmpData(notchFreq, 10, file.sampleRate);\n    }\n\n    this.updatecount();\n    this.peakMaxOffset = this.peakArray[0].length - this.count / 2;\n    this.peakMinOffset = this.count / -2;\n    this.peakOffset = this.peakMinOffset;\n    var i = 0;\n    this.channelEnabled = [];\n\n    for (i = 0; i < this.peakArray.length; i++) {\n      this.channelEnabled.push(true);\n    }\n\n    var channelData = file.getChannelData();\n    this.channelNames = [];\n\n    for (i = 0; i < channelData.length; i++) {\n      this.channelNames.push(channelData[i].customName);\n    }\n\n    this.scrollBarRef.setHandlePosition(0);\n    this.draw();\n    if (this.props.onOffsetChanged !== undefined) this.props.onOffsetChanged(0);\n  }\n\n  setchannelsenabled(arr) {\n    var j = 0;\n\n    for (var i = 0; i < this.channelEnabled.length; i++) {\n      if (arr[j] === i) {\n        this.channelEnabled[i] = true;\n\n        if (j < arr.length - 1) {\n          j++;\n        }\n      } else {\n        this.channelEnabled[i] = false;\n      }\n    }\n\n    this.verticalScrollPos = 0;\n    this.draw();\n  }\n\n  setoffset(pos) {\n    this.peakOffset = Math.floor((this.peakMaxOffset + this.count / 2) * pos) - this.count / 2;\n    if (!this.isPlaying) this.draw();\n    if (this.props.onOffsetChanged !== undefined) this.props.onOffsetChanged(pos);\n  }\n\n  updatecount() {\n    if (this.currentFile === undefined) this.count = 1000;else this.count = this.currentFile.sampleRate / 1000 * this.props.timescale;\n  }\n\n  addverticalscroll(v) {\n    var maxPos = 0;\n\n    for (var i = 0; i < this.channelEnabled.length; i++) {\n      if (this.channelEnabled[i]) maxPos++;\n    }\n\n    var currentHeight = Math.max(50, Math.min(150, (this.props.height - this.timelineHeight - this.props.margin * maxPos) / maxPos));\n    maxPos = Math.max(0, (currentHeight + this.props.margin) * maxPos - (this.props.height - this.timelineHeight));\n    this.verticalScrollPos = Math.max(0, Math.min(maxPos, this.verticalScrollPos + v));\n    if (!this.isPlaying) this.draw();\n  }\n\n  next() {\n    if (this.isPlaying) this.peakOffset += Math.round((this.currentFile === undefined ? 100 : this.currentFile.sampleRate) * this.props.speed);else this.peakOffset += this.count;\n    this.peakOffset = Math.min(this.peakOffset, this.peakMaxOffset);\n    this.peakOffset = Math.max(this.peakOffset, this.peakMinOffset);\n    if (!this.isPlaying) this.draw();\n    var pos = (this.peakOffset + this.count / 2) / (this.peakMaxOffset + this.count / 2);\n    this.scrollBarRef.setHandlePosition(pos);\n    if (this.props.onOffsetChanged !== undefined) this.props.onOffsetChanged(pos);\n  }\n\n  prev() {\n    if (this.isPlaying) this.peakOffset -= Math.round((this.currentFile === undefined ? 100 : this.currentFile.sampleRate) * this.props.speed);else this.peakOffset -= this.count;\n    this.peakOffset = Math.min(this.peakOffset, this.peakMaxOffset);\n    this.peakOffset = Math.max(this.peakOffset, this.peakMinOffset);\n    if (!this.isPlaying) this.draw();\n    var pos = (this.peakOffset + this.count / 2) / (this.peakMaxOffset + this.count / 2);\n    this.scrollBarRef.setHandlePosition(pos);\n    if (this.props.onOffsetChanged !== undefined) this.props.onOffsetChanged(pos);\n  } //Play Loop\n\n\n  loop() {\n    if (!this.isPlaying) return;\n    var now = new Date().getTime();\n    this.deltaTime = now - this.prevTime;\n    this.prevTime = now;\n    this.update();\n    this.draw();\n    requestAnimationFrame(this.loop);\n  }\n\n  update() {\n    this.updatecount();\n    this.peakOffset += Math.round((this.currentFile === undefined ? 100 : this.currentFile.sampleRate) * (this.deltaTime * 0.001) * this.props.speed);\n\n    if (this.peakOffset > this.peakMaxOffset) {\n      this.peakOffset = this.peakMaxOffset;\n      this.stop();\n    }\n\n    if (this.props.onOffsetChanged !== undefined) this.props.onOffsetChanged((this.peakOffset + this.count / 2) / this.peakMaxOffset);\n    if (this.scrollBarRef != null) this.scrollBarRef.setHandlePosition((this.peakOffset + this.count / 2) / (this.peakMaxOffset + this.count / 2));\n  }\n\n  draw() {\n    if (this.peakArray[0].length < 2) return;\n    this.updatecount();\n    var channelCount = this.props.channels > this.peakArray.length ? this.peakArray.length : this.props.channels;\n    var len = this.count < this.peakArray[0].length ? this.count : this.peakArray[0].length;\n    var width = this.props.width - this.textWidth;\n    var widthStep = width / this.count;\n    var currentHeight = Math.max(50, (this.props.height - this.timelineHeight - this.props.margin * channelCount) / channelCount); //Math.max(50, Math.min(150, (this.props.height - this.timelineHeight - (this.props.margin * channelCount)) / channelCount));\n\n    var halfHeight = currentHeight / 2;\n    var startX = widthStep * Math.min(this.peakOffset, 0) * -1 + this.textWidth;\n    var startY = 0;\n    var topMargin = Math.max(this.props.height - this.timelineHeight - (currentHeight + this.props.margin) * channelCount, 0) / 2;\n    this.glContext.clearColor(0.0, 0.0, 0.0, 1.0);\n    this.glContext.clear(this.glContext.COLOR_BUFFER_BIT);\n    this.glContext.viewport(0, 0, this.canvasRef.current.width, this.canvasRef.current.height); //Draw Graphs\n\n    var currentIdx = 0;\n    var x = 0;\n    var y = 0;\n    var vertices = [];\n    var c = 0;\n    var i = 0;\n    var drawnChannels = 0;\n\n    for (c = 0; c < this.peakArray.length; c++) {\n      if (!this.channelEnabled[c]) continue;\n      startY = halfHeight * (drawnChannels * 2 + 1) + this.props.margin * drawnChannels + topMargin + this.timelineHeight - this.verticalScrollPos; //Draw channel text\n      //this.canvasContext.fillText(this.channelNames[c], 0, startY);\n      //this.canvasContext.moveTo(startX, (this.peakArray[c][Math.max(this.peakOffset, 0)] * halfHeight) + startY);\n\n      vertices.push(startX);\n      vertices.push(this.peakArray[c][Math.max(this.peakOffset, 0)] * halfHeight + startY);\n      vertices.push(0.0); //Draw graph\n\n      for (i = 1; i < len + 1; i++) {\n        currentIdx = Math.floor(Math.max(i + this.peakOffset, i));\n        if (currentIdx > this.peakArray[c].length) continue;\n        x = Math.floor(widthStep * i + startX);\n        y = Math.floor(this.peakArray[c][currentIdx] * halfHeight + startY);\n        vertices.push(x);\n        vertices.push(y);\n        vertices.push(0.0); //this.canvasContext.lineTo(x, y);\n      }\n\n      drawnChannels++;\n    }\n\n    this.glContext.useProgram(this.shaderProgram);\n    this.glContext.vertexAttribPointer(this.coordAttr, 3, this.glContext.FLOAT, false, 0, 0);\n    this.glContext.enableVertexAttribArray(this.coordAttr);\n    this.glContext.uniform2f(this.resolutionUniform, this.canvasRef.current.width, this.canvasRef.current.height); // Pass the vertex data to the buffer\n\n    this.glContext.bufferData(this.glContext.ARRAY_BUFFER, new Float32Array(vertices), this.glContext.STATIC_DRAW);\n    this.glContext.bindBuffer(this.glContext.ARRAY_BUFFER, this.vertexBuffer);\n    this.glContext.drawArrays(this.glContext.LINE_STRIP, 0, Math.floor(vertices.length / 3));\n    /*\r\n    //Draw Grids\r\n    this.canvasContext.beginPath();\r\n    this.canvasContext.strokeStyle = 'red';\r\n    this.canvasContext.lineWidth = 0.5;\r\n    this.canvasContext.moveTo(width / 2 + this.textWidth, this.timelineHeight);\r\n    this.canvasContext.lineTo (width / 2 + this.textWidth, this.props.height);\r\n    for (c = 0; c < channelCount; c++){\r\n        this.canvasContext.moveTo(this.textWidth, c * (currentHeight + this.props.margin) + this.timelineHeight + topMargin - this.verticalScrollPos);\r\n        this.canvasContext.lineTo(this.textWidth + width, c * (currentHeight + this.props.margin) + this.timelineHeight + topMargin - this.verticalScrollPos);\r\n        \r\n        this.canvasContext.moveTo(this.textWidth, c * (currentHeight + this.props.margin) + currentHeight + this.timelineHeight + topMargin - this.verticalScrollPos);\r\n        this.canvasContext.lineTo(this.textWidth + width, c * (currentHeight + this.props.margin) + currentHeight + this.timelineHeight + topMargin - this.verticalScrollPos);\r\n    }\r\n    this.canvasContext.stroke();\r\n    */\n  } //etc\n\n\n  getCanvas() {\n    return this.canvasRef.current;\n  }\n\n  render() {\n    var style = {\n      display: 'flex',\n      flexDirection: 'column',\n      height: '95%'\n    };\n    this.updatecount();\n    this.peakMaxOffset = this.peakArray[0].length - this.count / 2;\n    this.peakMinOffset = this.count / -2;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: style,\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: this.canvasRef,\n        style: style,\n        id: \"graphCanvas\",\n        width: this.props.width,\n        height: this.props.height\n        /*this.props.channels * (this.props.height + this.props.margin) + this.timelineHeight*/\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ScrollBar, {\n        ref: ref => {\n          this.scrollBarRef = ref;\n        },\n        width: this.props.width,\n        height: \"20\",\n        handleWidth: this.count / (this.peakArray[0].length + this.count / 2),\n        onDragStart: this.stop,\n        onDrag: this.setoffset\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default GLGraph;","map":{"version":3,"sources":["C:/Users/tank6/Desktop/React/brainwave_webviewer/src/pages/GLGraph.js"],"names":["React","ScrollBar","GLGraph","Component","constructor","props","canvasRef","createRef","canvasContext","scrollBarRef","isPlaying","count","deltaTime","prevTime","textWidth","timelineHeight","verticalScrollPos","glContext","vertexBuffer","shaderProgram","vertexShader","fragShader","coordAttr","resolutionUniform","loop","bind","play","stop","setoffset","updatecount","channelCount","channels","peakArray","channelEnabled","channelNames","peakOffset","peakMaxOffset","peakMinOffset","c","i","push","toString","padStart","length","componentDidMount","canvas","current","getContext","e","initWebGL","alert","componentDidUpdate","draw","componentWillUnmount","gl","vsCode","fsCode","createShader","VERTEX_SHADER","FRAGMENT_SHADER","shaderSource","compileShader","createProgram","attachShader","linkProgram","createBuffer","vertices","bindBuffer","ARRAY_BUFFER","getAttribLocation","getUniformLocation","console","log","Date","getTime","requestAnimationFrame","onPlayStateChanged","undefined","togglePlay","setfile","file","currentFile","notchFilterMode","getNormalizedAmpData","notchFreq","getFilteredAmpData","sampleRate","channelData","getChannelData","customName","setHandlePosition","onOffsetChanged","setchannelsenabled","arr","j","pos","Math","floor","timescale","addverticalscroll","v","maxPos","currentHeight","max","min","height","margin","next","round","speed","prev","now","update","len","width","widthStep","halfHeight","startX","startY","topMargin","clearColor","clear","COLOR_BUFFER_BIT","viewport","currentIdx","x","y","drawnChannels","useProgram","vertexAttribPointer","FLOAT","enableVertexAttribArray","uniform2f","bufferData","Float32Array","STATIC_DRAW","drawArrays","LINE_STRIP","getCanvas","render","style","display","flexDirection","ref"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ScrollBar from './ScrollBar';\r\n\r\nclass GLGraph extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.canvasRef = React.createRef();\r\n        this.canvasContext = null;\r\n        this.scrollBarRef = null;\r\n        this.isPlaying = false;\r\n        this.count = 1000;\r\n        this.deltaTime = 0;\r\n        this.prevTime = 0;\r\n        this.textWidth = 100;\r\n        this.timelineHeight = 50;\r\n        this.verticalScrollPos = 0;\r\n\r\n        //WebGL\r\n        this.glContext = null;\r\n        this.vertexBuffer = null;\r\n        this.shaderProgram = null;\r\n        this.vertexShader = null;\r\n        this.fragShader = null;\r\n        this.coordAttr = null;\r\n        this.resolutionUniform = null;\r\n\r\n        //Bind Functions\r\n        this.loop = this.loop.bind(this);\r\n\r\n        this.play = this.play.bind(this);\r\n        this.stop = this.stop.bind(this);\r\n        this.setoffset = this.setoffset.bind(this);\r\n        this.updatecount = this.updatecount.bind(this);\r\n\r\n        var channelCount = props.channels;\r\n        this.peakArray = [];\r\n        this.channelEnabled = [];\r\n        this.channelNames = [];\r\n        this.peakOffset = props.count / -2;\r\n        this.peakMaxOffset = 0;\r\n        this.peakMinOffset = props.count / -2;\r\n\r\n        //Create Test Samples\r\n        var c;\r\n        var i;\r\n        for (c = 0; c < channelCount; c++){\r\n            this.peakArray.push([]);\r\n            this.channelEnabled.push(true);\r\n            this.channelNames.push(c.toString().padStart(4, '0'));\r\n\r\n            for (i = 0; i < 100000; i++){\r\n                this.peakArray[c].push(0);\r\n            }\r\n        }\r\n\r\n        this.peakMaxOffset = this.peakArray[0].length - this.count / 2;\r\n    }\r\n\r\n    componentDidMount() {\r\n        var canvas = this.canvasRef.current;\r\n\r\n        //this.canvasContext = canvas.getContext('2d', {alpha: false});\r\n        //this.canvasContext.fillStyle = 'black';\r\n        //this.canvasContext.lineWidth = 1;\r\n        //this.canvasContext.shadowBlur = 0;\r\n        //this.canvasContext.font = (16) + 'px malgun gothic';\r\n\r\n        try{\r\n            this.glContext = canvas.getContext(\"webgl\") || canvas.getContext(\"experimental-webgl\");\r\n        }\r\n        catch (e){}\r\n\r\n        if (this.glContext){\r\n            this.initWebGL(this.glContext);\r\n        }\r\n        else{\r\n            alert(\"Unable to initialize WebGL. Your browser may not support it.\");\r\n            this.glContext = null;\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.draw();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.stop();\r\n    }\r\n\r\n    initWebGL (gl){\r\n        //#####Shader#####\r\n        var vsCode =\r\n            'attribute vec2 coordinates;' +\r\n            'uniform vec2 u_resolution;' +\r\n            'void main(void) {' +\r\n                'vec2 zeroToOne = a_position / u_resolution;' +\r\n                'vec2 zeroToTwo = zeroToOne * 2.0;' +\r\n                'vec2 clipSpace = zeroToTwo - 1.0;' +\r\n                'gl_Position = vec4(clipSpace, 0, 1);' + \r\n            '}';\r\n        \r\n        var fsCode =\r\n            'void main(void) {' +\r\n               'gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);' +\r\n            '}';\r\n\r\n        this.vertexShader = gl.createShader(gl.VERTEX_SHADER);\r\n        this.fragShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n        \r\n        gl.shaderSource(this.vertexShader, vsCode);\r\n        gl.shaderSource(this.fragShader, fsCode);\r\n        gl.compileShader(this.vertexShader);\r\n        gl.compileShader(this.fragShader);\r\n\r\n        this.shaderProgram = gl.createProgram();\r\n        \r\n        gl.attachShader(this.shaderProgram, this.vertexShader);\r\n        gl.attachShader(this.shaderProgram, this.fragShader);\r\n\r\n        gl.linkProgram(this.shaderProgram);\r\n\r\n        //#####Vertex Buffer#####\r\n        this.vertexBuffer = gl.createBuffer();\r\n        var vertices = [\r\n            -0.7,-0.1,0,\r\n            -0.3,0.6,0,\r\n            -0.3,-0.3,0,\r\n            0.2,0.6,0,\r\n            0.3,-0.3,0,\r\n            0.7,0.6,0]\r\n            \r\n        // Bind appropriate array buffer to it\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\r\n        this.coordAttr = gl.getAttribLocation(this.shaderProgram, 'coordinates');\r\n        this.resolutionUniform = gl.getUniformLocation(this.shaderProgram, \"u_resolution\");\r\n\r\n        // Unbind the buffer\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n        console.log('WebGL Initialized Successfully');\r\n    }\r\n\r\n    //Play\r\n    play (){\r\n        if (this.isPlaying)\r\n            return;\r\n\r\n        //Rewind\r\n        if (this.peakOffset === this.peakMaxOffset){\r\n            this.peakOffset = this.peakMinOffset;\r\n        }\r\n        \r\n        this.prevTime = new Date().getTime();\r\n        this.isPlaying = true;\r\n        requestAnimationFrame(this.loop);\r\n\r\n        if (this.props.onPlayStateChanged !== undefined)\r\n            this.props.onPlayStateChanged();\r\n    }\r\n    \r\n    stop(){\r\n        if (!this.isPlaying)\r\n            return;\r\n\r\n        this.isPlaying = false;\r\n\r\n        if (this.props.onPlayStateChanged !== undefined)\r\n            this.props.onPlayStateChanged();\r\n    }\r\n\r\n    togglePlay (){\r\n        if (this.isPlaying)\r\n            this.stop();\r\n        else\r\n            this.play();\r\n    }\r\n    \r\n    //Controls\r\n    setfile(file){\r\n        this.currentFile = file;\r\n\r\n        //file.getFilteredAmpData(60, 10, file.sampleRate);\r\n        \r\n        if (file.notchFilterMode === 0){\r\n            this.peakArray = file.getNormalizedAmpData();\r\n        }\r\n        else {\r\n            var notchFreq = file.notchFilterMode === 1 ? 50 : 60;\r\n            this.peakArray = file.getFilteredAmpData(notchFreq, 10, file.sampleRate);\r\n        }\r\n\r\n        this.updatecount();\r\n        this.peakMaxOffset = this.peakArray[0].length - this.count / 2;\r\n        this.peakMinOffset = this.count / -2;\r\n        this.peakOffset = this.peakMinOffset;\r\n        \r\n        var i = 0;\r\n        this.channelEnabled = [];\r\n        for (i = 0; i < this.peakArray.length; i++){\r\n            this.channelEnabled.push(true);\r\n        }\r\n\r\n        var channelData = file.getChannelData();\r\n        this.channelNames = [];\r\n        for (i = 0; i < channelData.length; i++){\r\n            this.channelNames.push(channelData[i].customName);\r\n        }\r\n\r\n        this.scrollBarRef.setHandlePosition(0);\r\n        this.draw();\r\n\r\n        if (this.props.onOffsetChanged !== undefined)\r\n            this.props.onOffsetChanged(0);\r\n    }\r\n\r\n    setchannelsenabled(arr){\r\n        var j = 0;\r\n        for (var i = 0; i < this.channelEnabled.length; i++){\r\n            if (arr[j] === i){\r\n                this.channelEnabled[i] = true;\r\n                if(j < arr.length - 1){\r\n                    j++;\r\n                }\r\n            }\r\n            else{\r\n                this.channelEnabled[i] = false;\r\n            }\r\n        }\r\n\r\n        this.verticalScrollPos = 0;\r\n        this.draw();\r\n    }\r\n\r\n    setoffset(pos){\r\n        this.peakOffset = Math.floor((this.peakMaxOffset + (this.count / 2)) * pos) - (this.count / 2);\r\n        \r\n        if (!this.isPlaying)\r\n            this.draw();\r\n\r\n        if (this.props.onOffsetChanged !== undefined)\r\n            this.props.onOffsetChanged(pos);\r\n    }\r\n\r\n    updatecount(){\r\n        if (this.currentFile === undefined)\r\n            this.count = 1000;\r\n        else\r\n            this.count = this.currentFile.sampleRate / 1000 * this.props.timescale;\r\n    }\r\n\r\n    addverticalscroll(v){\r\n        var maxPos = 0;\r\n\r\n        for (var i = 0; i < this.channelEnabled.length; i++){\r\n            if (this.channelEnabled[i])\r\n                maxPos++;\r\n        }\r\n        \r\n        var currentHeight = Math.max(50, Math.min(150, (this.props.height - this.timelineHeight - (this.props.margin * maxPos)) / maxPos));\r\n        maxPos = Math.max(0, ((currentHeight + this.props.margin) * maxPos) - (this.props.height - this.timelineHeight));\r\n\r\n        this.verticalScrollPos = Math.max(0, Math.min(maxPos, this.verticalScrollPos + v));\r\n        \r\n        if (!this.isPlaying)\r\n            this.draw();\r\n    }\r\n\r\n    next(){\r\n        if (this.isPlaying)\r\n            this.peakOffset += Math.round((this.currentFile === undefined ? 100 : this.currentFile.sampleRate) * this.props.speed);\r\n        else\r\n            this.peakOffset += this.count;\r\n        this.peakOffset = Math.min(this.peakOffset, this.peakMaxOffset);\r\n        this.peakOffset = Math.max(this.peakOffset, this.peakMinOffset);\r\n\r\n        if (!this.isPlaying)\r\n            this.draw();\r\n\r\n        var pos = (this.peakOffset + (this.count / 2)) / (this.peakMaxOffset + (this.count / 2));\r\n        this.scrollBarRef.setHandlePosition(pos);\r\n\r\n        if (this.props.onOffsetChanged !== undefined)\r\n            this.props.onOffsetChanged(pos);\r\n    }\r\n\r\n    prev(){\r\n        if (this.isPlaying)\r\n            this.peakOffset -= Math.round((this.currentFile === undefined ? 100 : this.currentFile.sampleRate) * this.props.speed);\r\n        else\r\n            this.peakOffset -= this.count;\r\n        this.peakOffset = Math.min(this.peakOffset, this.peakMaxOffset);\r\n        this.peakOffset = Math.max(this.peakOffset, this.peakMinOffset);\r\n\r\n        if (!this.isPlaying)\r\n            this.draw();\r\n\r\n        var pos = (this.peakOffset + (this.count / 2)) / (this.peakMaxOffset + (this.count / 2));\r\n        this.scrollBarRef.setHandlePosition(pos);\r\n\r\n        if (this.props.onOffsetChanged !== undefined)\r\n            this.props.onOffsetChanged(pos);\r\n    }\r\n\r\n    //Play Loop\r\n    loop(){\r\n        if (!this.isPlaying)\r\n            return;\r\n        \r\n        var now = new Date().getTime();\r\n        this.deltaTime = now - this.prevTime;\r\n        this.prevTime = now;\r\n        this.update();\r\n        this.draw();\r\n        requestAnimationFrame(this.loop);\r\n    }\r\n\r\n    update (){\r\n        this.updatecount();\r\n        this.peakOffset += Math.round((this.currentFile === undefined ? 100 : this.currentFile.sampleRate) * (this.deltaTime * 0.001) * this.props.speed);\r\n\r\n        if (this.peakOffset > this.peakMaxOffset){\r\n            this.peakOffset = this.peakMaxOffset;\r\n            this.stop();\r\n        }\r\n\r\n        if (this.props.onOffsetChanged !== undefined)\r\n            this.props.onOffsetChanged((this.peakOffset + (this.count / 2)) / this.peakMaxOffset);\r\n\r\n        if (this.scrollBarRef != null)\r\n            this.scrollBarRef.setHandlePosition((this.peakOffset + (this.count / 2)) / (this.peakMaxOffset + (this.count / 2)));\r\n    }\r\n\r\n    draw (){\r\n        if (this.peakArray[0].length < 2)\r\n            return;\r\n        \r\n        this.updatecount();\r\n            \r\n        var channelCount = this.props.channels > this.peakArray.length ? this.peakArray.length : this.props.channels;\r\n\r\n        var len = this.count < this.peakArray[0].length ? this.count : this.peakArray[0].length;\r\n        var width = this.props.width - this.textWidth;\r\n        var widthStep = width / this.count;\r\n        var currentHeight = Math.max(50, (this.props.height - this.timelineHeight - (this.props.margin * channelCount)) / channelCount); //Math.max(50, Math.min(150, (this.props.height - this.timelineHeight - (this.props.margin * channelCount)) / channelCount));\r\n        var halfHeight = currentHeight / 2;\r\n\r\n        var startX = widthStep * Math.min(this.peakOffset, 0) * -1 + this.textWidth;\r\n        var startY = 0;\r\n        var topMargin = Math.max(this.props.height - this.timelineHeight - ((currentHeight + this.props.margin) * channelCount), 0) / 2;\r\n        \r\n        this.glContext.clearColor(0.0, 0.0, 0.0, 1.0);\r\n        this.glContext.clear(this.glContext.COLOR_BUFFER_BIT);\r\n        this.glContext.viewport(0, 0, this.canvasRef.current.width, this.canvasRef.current.height);\r\n\r\n        //Draw Graphs\r\n        var currentIdx = 0;\r\n        var x = 0;\r\n        var y = 0;\r\n        \r\n        var vertices = [];\r\n        var c = 0;\r\n        var i = 0;\r\n        var drawnChannels = 0;\r\n        for (c = 0; c < this.peakArray.length; c++){\r\n            if (!this.channelEnabled[c])\r\n                continue;\r\n            \r\n            startY = halfHeight * (drawnChannels * 2 + 1) + (this.props.margin * drawnChannels) + topMargin + this.timelineHeight - this.verticalScrollPos;\r\n            \r\n            //Draw channel text\r\n            //this.canvasContext.fillText(this.channelNames[c], 0, startY);\r\n            //this.canvasContext.moveTo(startX, (this.peakArray[c][Math.max(this.peakOffset, 0)] * halfHeight) + startY);\r\n            vertices.push(startX);\r\n            vertices.push((this.peakArray[c][Math.max(this.peakOffset, 0)] * halfHeight) + startY);\r\n            vertices.push(0.0);\r\n\r\n            //Draw graph\r\n            for(i = 1; i < len + 1; i++){\r\n                currentIdx = Math.floor(Math.max(i + this.peakOffset, i));\r\n                if (currentIdx > this.peakArray[c].length)\r\n                    continue;\r\n\r\n                x = Math.floor((widthStep * i) + startX);\r\n                y = Math.floor((this.peakArray[c][currentIdx] * halfHeight) + startY);\r\n                vertices.push(x);\r\n                vertices.push(y);\r\n                vertices.push(0.0);\r\n                //this.canvasContext.lineTo(x, y);\r\n            }\r\n\r\n            drawnChannels++;\r\n        }\r\n\r\n        this.glContext.useProgram(this.shaderProgram);\r\n        this.glContext.vertexAttribPointer(this.coordAttr, 3, this.glContext.FLOAT, false, 0, 0);\r\n        this.glContext.enableVertexAttribArray(this.coordAttr);\r\n        this.glContext.uniform2f(this.resolutionUniform, this.canvasRef.current.width, this.canvasRef.current.height);\r\n                \r\n        // Pass the vertex data to the buffer\r\n        this.glContext.bufferData(this.glContext.ARRAY_BUFFER, new Float32Array(vertices), this.glContext.STATIC_DRAW);\r\n        this.glContext.bindBuffer(this.glContext.ARRAY_BUFFER, this.vertexBuffer);\r\n        this.glContext.drawArrays(this.glContext.LINE_STRIP, 0, Math.floor(vertices.length / 3));\r\n\r\n        /*\r\n        //Draw Grids\r\n        this.canvasContext.beginPath();\r\n        this.canvasContext.strokeStyle = 'red';\r\n        this.canvasContext.lineWidth = 0.5;\r\n        this.canvasContext.moveTo(width / 2 + this.textWidth, this.timelineHeight);\r\n        this.canvasContext.lineTo (width / 2 + this.textWidth, this.props.height);\r\n        for (c = 0; c < channelCount; c++){\r\n            this.canvasContext.moveTo(this.textWidth, c * (currentHeight + this.props.margin) + this.timelineHeight + topMargin - this.verticalScrollPos);\r\n            this.canvasContext.lineTo(this.textWidth + width, c * (currentHeight + this.props.margin) + this.timelineHeight + topMargin - this.verticalScrollPos);\r\n            \r\n            this.canvasContext.moveTo(this.textWidth, c * (currentHeight + this.props.margin) + currentHeight + this.timelineHeight + topMargin - this.verticalScrollPos);\r\n            this.canvasContext.lineTo(this.textWidth + width, c * (currentHeight + this.props.margin) + currentHeight + this.timelineHeight + topMargin - this.verticalScrollPos);\r\n        }\r\n        this.canvasContext.stroke();\r\n        */\r\n    }\r\n\r\n    //etc\r\n    getCanvas(){\r\n        return this.canvasRef.current;\r\n    }\r\n\r\n    render(){\r\n        var style={\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            height: '95%'\r\n        };\r\n        \r\n        this.updatecount();\r\n        this.peakMaxOffset = this.peakArray[0].length - this.count / 2;\r\n        this.peakMinOffset = this.count / -2;\r\n\r\n        return (\r\n        <div style={style}>\r\n            <canvas ref={this.canvasRef} style={style} id='graphCanvas'\r\n            width={this.props.width} height={this.props.height/*this.props.channels * (this.props.height + this.props.margin) + this.timelineHeight*/}/>\r\n            <ScrollBar ref={ref=>{this.scrollBarRef = ref;}}\r\n            width={this.props.width} height='20'\r\n            handleWidth={this.count / (this.peakArray[0].length + this.count / 2)}\r\n            onDragStart={this.stop}\r\n            onDrag={this.setoffset}/>\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default GLGraph;"]},"metadata":{},"sourceType":"module"}