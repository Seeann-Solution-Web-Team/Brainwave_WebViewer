{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\tank6\\\\Desktop\\\\React\\\\brainwave_webviewer\\\\src\\\\pages\\\\CanvasGraph.js\";\nimport React from 'react';\nimport ScrollBar from './ScrollBar';\n\nclass CanvasGraph extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = /*#__PURE__*/React.createRef();\n    this.canvasContext = null;\n    this.scrollBarRef = null;\n    this.isPlaying = false; //Bind Functions\n\n    this.play = this.play.bind(this);\n    this.stop = this.stop.bind(this);\n    this.setoffset = this.setoffset.bind(this);\n    var channelCount = props.channels;\n    this.peakArray = [];\n    this.peakOffset = []; //Create Test Samples\n\n    var c;\n    var i;\n\n    for (c = 0; c < channelCount; c++) {\n      this.peakArray.push([]);\n      this.peakOffset.push(0);\n\n      for (i = 0; i < 100000; i++) {\n        var rand = (Math.random() - 0.5) * 2;\n        this.peakArray[c].push(rand);\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.canvasContext = this.canvasRef.current.getContext('2d', {\n      alpha: false\n    });\n    this.canvasContext.fillStyle = 'black';\n    this.canvasContext.lineWidth = 1;\n    this.canvasContext.shadowBlur = 0;\n    this.play();\n  }\n\n  componentWillUnmount() {\n    this.stop();\n  } //Play\n\n\n  play() {\n    //Rewind\n    if (this.peakOffset[0] === this.peakArray[0].length - this.props.count - 1) {\n      for (var i = 0; i < this.props.channels; i++) {\n        this.peakOffset[i] = 0;\n      }\n    }\n\n    this.timer = setInterval(() => {\n      this.update();\n      this.draw();\n    }, 5);\n    this.isPlaying = true;\n    if (this.props.onPlayStateChanged !== undefined) this.props.onPlayStateChanged();\n  }\n\n  stop() {\n    if (this.timer == null) return;\n    clearInterval(this.timer);\n    this.timer = null;\n    this.isPlaying = false;\n    if (this.props.onPlayStateChanged !== undefined) this.props.onPlayStateChanged();\n  }\n\n  togglePlay() {\n    if (this.isPlaying) this.stop();else this.play();\n  } //Events\n\n\n  setoffset(pos) {\n    for (var i = 0; i < this.peakArray.length; i++) {\n      this.peakOffset[i] = Math.floor((this.peakArray[i].length - this.props.count - 1) * pos);\n    }\n\n    this.draw();\n  } //Play Loop\n\n\n  update() {\n    for (var i = 0; i < this.peakArray.length; i++) {\n      this.peakOffset[i] += 40;\n    }\n\n    if (this.peakOffset[0] > this.peakArray[0].length - this.props.count - 1) {\n      for (i = 0; i < this.peakArray.length; i++) {\n        this.peakOffset[i] = this.peakArray[i].length - this.props.count - 1;\n      }\n\n      this.stop();\n    }\n  }\n\n  draw() {\n    if (this.peakArray[0].length < 2) return;\n    var channelCount = this.props.channels > this.peakArray.length ? this.peakArray.length : this.props.channels;\n    var len = this.props.count < this.peakArray[0].length ? this.props.count : this.peakArray[0].length;\n    var width = this.canvasRef.current.offsetWidth;\n    var height = this.canvasRef.current.offsetHeight;\n    var halfHeight = height / 2 / channelCount;\n    var widthStep = width / this.props.count;\n    var startX = width - len * widthStep + 0.5;\n    this.canvasContext.strokeStyle = this.props.strokeColor;\n    this.canvasContext.fillRect(0, 0, width, height); //this.canvasContext.clearRect(0, 0, width, height);\n\n    var currentIdx = 0;\n    this.canvasContext.beginPath();\n\n    for (var c = 0; c < channelCount; c++) {\n      this.canvasContext.moveTo(startX, this.peakArray[c][0] * halfHeight + halfHeight * (c * 2 + 1));\n\n      for (var i = 1; i < len; i++) {\n        currentIdx = (i + this.peakOffset[c]) % this.peakArray[c].length;\n        this.canvasContext.lineTo(startX + widthStep * i, this.peakArray[c][currentIdx] * halfHeight + halfHeight * (c * 2 + 1));\n      }\n    }\n\n    this.canvasContext.stroke();\n    if (this.scrollBarRef != null) this.scrollBarRef.setHandlePosition(this.peakOffset[0] / (this.peakArray[0].length - this.props.count - 1));\n  }\n\n  getCanvas() {\n    return this.canvasRef.current;\n  }\n\n  render() {\n    var style = {\n      display: 'flex',\n      flexDirection: 'column'\n    };\n    if (this.canvasRef.current != null) this.draw();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: style,\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: this.canvasRef,\n        width: this.props.width,\n        height: this.props.channels * this.props.height\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ScrollBar, {\n        ref: ref => {\n          this.scrollBarRef = ref;\n        },\n        width: this.props.width,\n        height: \"20\",\n        handleWidth: this.props.count / this.peakArray[0].length,\n        onDragStart: this.stop,\n        onDrag: this.setoffset\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nexport default CanvasGraph;","map":{"version":3,"sources":["C:/Users/tank6/Desktop/React/brainwave_webviewer/src/pages/CanvasGraph.js"],"names":["React","ScrollBar","CanvasGraph","Component","constructor","props","canvasRef","createRef","canvasContext","scrollBarRef","isPlaying","play","bind","stop","setoffset","channelCount","channels","peakArray","peakOffset","c","i","push","rand","Math","random","componentDidMount","current","getContext","alpha","fillStyle","lineWidth","shadowBlur","componentWillUnmount","length","count","timer","setInterval","update","draw","onPlayStateChanged","undefined","clearInterval","togglePlay","pos","floor","len","width","offsetWidth","height","offsetHeight","halfHeight","widthStep","startX","strokeStyle","strokeColor","fillRect","currentIdx","beginPath","moveTo","lineTo","stroke","setHandlePosition","getCanvas","render","style","display","flexDirection","ref"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ScrollBar from './ScrollBar';\r\n\r\nclass CanvasGraph extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.canvasRef = React.createRef();\r\n        this.canvasContext = null;\r\n        this.scrollBarRef = null;\r\n        this.isPlaying = false;\r\n\r\n        //Bind Functions\r\n        this.play = this.play.bind(this);\r\n        this.stop = this.stop.bind(this);\r\n        this.setoffset = this.setoffset.bind(this);\r\n        \r\n        var channelCount = props.channels;\r\n        this.peakArray = [];\r\n        this.peakOffset = [];\r\n\r\n        //Create Test Samples\r\n        var c;\r\n        var i;\r\n        for (c = 0; c < channelCount; c++){\r\n            this.peakArray.push([]);\r\n            this.peakOffset.push(0);\r\n\r\n            for (i = 0; i < 100000; i++){\r\n                var rand = (Math.random() - 0.5) * 2;\r\n                this.peakArray[c].push(rand);\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.canvasContext = this.canvasRef.current.getContext('2d', {alpha: false});\r\n        this.canvasContext.fillStyle = 'black';\r\n        this.canvasContext.lineWidth = 1;\r\n        this.canvasContext.shadowBlur = 0;\r\n        this.play();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.stop();\r\n    }\r\n\r\n    //Play\r\n    play (){\r\n        //Rewind\r\n        if (this.peakOffset[0] === this.peakArray[0].length - this.props.count - 1){\r\n            for(var i = 0; i < this.props.channels; i++){\r\n                this.peakOffset[i] = 0; \r\n            }\r\n        }\r\n        \r\n        this.timer = setInterval(()=>{this.update(); this.draw();}, 5);\r\n        this.isPlaying = true;\r\n\r\n        if (this.props.onPlayStateChanged !== undefined)\r\n            this.props.onPlayStateChanged();\r\n    }\r\n\r\n    stop(){\r\n        if (this.timer == null)\r\n            return;\r\n\r\n        clearInterval(this.timer);\r\n        this.timer = null;\r\n        this.isPlaying = false;\r\n\r\n        if (this.props.onPlayStateChanged !== undefined)\r\n            this.props.onPlayStateChanged();\r\n    }\r\n\r\n    togglePlay (){\r\n        if (this.isPlaying)\r\n            this.stop();\r\n        else\r\n            this.play();\r\n    }\r\n\r\n    //Events\r\n    setoffset(pos){\r\n        for (var i = 0; i < this.peakArray.length; i++){\r\n            this.peakOffset[i] = Math.floor((this.peakArray[i].length - this.props.count - 1) * pos);\r\n        }\r\n\r\n        this.draw();\r\n    }\r\n\r\n    //Play Loop\r\n    update (){\r\n        for (var i = 0; i < this.peakArray.length; i++){\r\n            this.peakOffset[i] += 40;\r\n        }\r\n\r\n        if (this.peakOffset[0] > this.peakArray[0].length - this.props.count - 1){\r\n            for (i = 0; i < this.peakArray.length; i++){\r\n                this.peakOffset[i] = this.peakArray[i].length - this.props.count - 1;\r\n            }\r\n            this.stop();\r\n        }\r\n    }\r\n\r\n    draw (){\r\n        if (this.peakArray[0].length < 2)\r\n            return;\r\n        \r\n        var channelCount = this.props.channels > this.peakArray.length ? this.peakArray.length : this.props.channels;\r\n\r\n        var len = this.props.count < this.peakArray[0].length ? this.props.count : this.peakArray[0].length;\r\n        var width = this.canvasRef.current.offsetWidth;\r\n        var height = this.canvasRef.current.offsetHeight;\r\n        var halfHeight = height / 2 / channelCount;\r\n        var widthStep = width / this.props.count;\r\n\r\n        var startX = width - (len * widthStep) + 0.5;\r\n        \r\n        this.canvasContext.strokeStyle = this.props.strokeColor;\r\n        this.canvasContext.fillRect(0, 0, width, height);\r\n        //this.canvasContext.clearRect(0, 0, width, height);\r\n\r\n        var currentIdx = 0;\r\n        this.canvasContext.beginPath();\r\n        for (var c = 0; c < channelCount; c++){\r\n            this.canvasContext.moveTo(startX, (this.peakArray[c][0] * halfHeight) + (halfHeight * (c * 2 + 1)));\r\n\r\n            for(var i = 1; i < len; i++){\r\n                currentIdx = (i + this.peakOffset[c]) % this.peakArray[c].length;\r\n                this.canvasContext.lineTo(startX + (widthStep * i), (this.peakArray[c][currentIdx] * halfHeight) + (halfHeight * (c * 2 + 1)));\r\n            }\r\n        }\r\n        this.canvasContext.stroke();\r\n\r\n        if (this.scrollBarRef != null)\r\n            this.scrollBarRef.setHandlePosition(this.peakOffset[0] / (this.peakArray[0].length - this.props.count - 1));\r\n    }\r\n\r\n    getCanvas(){\r\n        return this.canvasRef.current;\r\n    }\r\n\r\n    render(){\r\n        var style={\r\n            display: 'flex',\r\n            flexDirection: 'column'\r\n        };\r\n\r\n        if (this.canvasRef.current != null)\r\n            this.draw();\r\n\r\n        return  <div style={style}>\r\n                    <canvas ref={this.canvasRef} \r\n                    width={this.props.width} height={this.props.channels * this.props.height}/>\r\n                    <ScrollBar ref={ref=>{this.scrollBarRef = ref;}}\r\n                    width={this.props.width} height='20'\r\n                    handleWidth={this.props.count / this.peakArray[0].length}\r\n                    onDragStart={this.stop}\r\n                    onDrag={this.setoffset}/>\r\n                </div>\r\n    }\r\n}\r\n\r\nexport default CanvasGraph;"]},"metadata":{},"sourceType":"module"}