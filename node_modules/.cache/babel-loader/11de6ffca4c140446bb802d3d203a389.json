{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\tank6\\\\Desktop\\\\React\\\\brainwave_webviewer\\\\src\\\\pages\\\\GLGraph.js\";\nimport React from 'react';\nimport ScrollBar from './ScrollBar';\n\nclass GLGraph extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = /*#__PURE__*/React.createRef();\n    this.gridCanvasRef = /*#__PURE__*/React.createRef();\n    this.gridContext = null;\n    this.scrollBarRef = null;\n    this.isPlaying = false;\n    this.count = 1000;\n    this.compressionRate = 5;\n    this.deltaTime = 0;\n    this.prevTime = 0;\n    this.textWidth = 100;\n    this.timelineHeight = 50;\n    this.verticalScrollPos = 0; //WebGL\n\n    this.glContext = null;\n    this.vertexBuffer = null;\n    this.shaderProgram = null;\n    this.vertexShader = null;\n    this.fragShader = null;\n    this.coordAttr = null;\n    this.resolutionUniform = null; //Bind Functions\n\n    this.loop = this.loop.bind(this);\n    this.play = this.play.bind(this);\n    this.stop = this.stop.bind(this);\n    this.setoffset = this.setoffset.bind(this);\n    this.updatecount = this.updatecount.bind(this);\n    var channelCount = props.channels;\n    this.originPeakArray = [];\n    this.compressedPeakArray = [];\n    this.currentCompressionRate = 1;\n    this.currentPeakArray = [];\n    this.peakLength = 0;\n    this.channelEnabled = [];\n    this.channelNames = [];\n    this.peakOffset = props.count / -2;\n    this.peakPosition = 0;\n    this.peakMaxOffset = 0;\n    this.peakMinOffset = props.count / -2; //Create Test Samples\n\n    var c;\n    var i;\n\n    for (c = 0; c < channelCount; c++) {\n      this.originPeakArray.push([]);\n      this.channelEnabled.push(true);\n      this.channelNames.push(c.toString().padStart(4, '0'));\n\n      for (i = 0; i < 100000; i++) {\n        this.originPeakArray[c].push(0);\n      }\n    }\n\n    this.currentPeakArray = this.originPeakArray;\n    this.peakLength = 100000;\n    this.peakMaxOffset = this.peakLength - this.count / 2;\n  }\n\n  componentDidMount() {\n    this.gridContext = this.gridCanvasRef.current.getContext('2d');\n    this.gridContext.fillStyle = 'black';\n    this.gridContext.lineWidth = 1;\n    this.gridContext.shadowBlur = 0;\n    this.gridContext.font = 16 + 'px malgun gothic';\n    var canvas = this.canvasRef.current;\n\n    try {\n      this.glContext = canvas.getContext(\"webgl\") || canvas.getContext(\"experimental-webgl\");\n    } catch (e) {}\n\n    if (this.glContext) {\n      this.initWebGL(this.glContext);\n    } else {\n      alert(\"Unable to initialize WebGL. Your browser may not support it.\");\n      this.glContext = null;\n    }\n\n    this.draw(true);\n  }\n\n  componentDidUpdate(prevProps) {\n    //Use Compressed Array\n    if (this.props.timescale !== prevProps.timescale) {\n      if (this.props.timescale > 4000) {\n        this.currentPeakArray = this.compressedPeakArray;\n        this.currentCompressionRate = this.compressionRate;\n      } else {\n        this.currentPeakArray = this.originPeakArray;\n        this.currentCompressionRate = 1;\n      }\n\n      this.updatecount();\n      this.peakLength = this.currentPeakArray[0].length;\n      this.peakMaxOffset = this.peakLength - this.count / 2;\n      this.peakMinOffset = this.count / -2;\n    }\n\n    this.draw(true);\n  }\n\n  componentWillUnmount() {\n    this.stop();\n  }\n\n  initWebGL(gl) {\n    //#####Vertex Buffer#####\n    this.vertexBuffer = gl.createBuffer(); //#####Shader#####\n\n    var vsCode = 'attribute vec2 coordinates;' + 'uniform vec2 u_resolution;' + 'void main(void) {' + 'vec2 zeroToOne = coordinates / u_resolution;' + 'vec2 zeroToTwo = zeroToOne * 2.0;' + 'vec2 clipSpace = zeroToTwo - 1.0;' + 'gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);' + '}';\n    var fsCode = 'void main(void) {' + 'gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);' + '}';\n    this.vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    this.fragShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(this.vertexShader, vsCode);\n    gl.compileShader(this.vertexShader);\n    gl.shaderSource(this.fragShader, fsCode);\n    gl.compileShader(this.fragShader);\n    var compiled = gl.getShaderParameter(this.vertexShader, gl.COMPILE_STATUS);\n    console.log('Shader compiled successfully: ' + compiled);\n    var compilationLog = gl.getShaderInfoLog(this.vertexShader);\n    console.log('Shader compiler log: ' + compilationLog); //Create shader program\n\n    this.shaderProgram = gl.createProgram();\n    gl.attachShader(this.shaderProgram, this.vertexShader);\n    gl.attachShader(this.shaderProgram, this.fragShader);\n    gl.linkProgram(this.shaderProgram);\n\n    if (!gl.getProgramParameter(this.shaderProgram, gl.LINK_STATUS)) {\n      var info = gl.getProgramInfoLog(this.shaderProgram);\n      alert('Could not compile WebGL program. \\n\\n' + info);\n    }\n\n    this.coordAttr = gl.getAttribLocation(this.shaderProgram, 'coordinates');\n    this.resolutionUniform = gl.getUniformLocation(this.shaderProgram, \"u_resolution\");\n    this.glContext.useProgram(this.shaderProgram);\n    console.log('WebGL Initialized Successfully');\n  } //Play\n\n\n  play() {\n    if (this.isPlaying) return; //Rewind\n\n    if (this.peakOffset === this.peakMaxOffset) {\n      this.peakOffset = this.peakMinOffset;\n      this.peakPosition = 0;\n    }\n\n    this.prevTime = new Date().getTime();\n    this.isPlaying = true;\n    this.drawGrid();\n    requestAnimationFrame(this.loop);\n    if (this.props.onPlayStateChanged !== undefined) this.props.onPlayStateChanged();\n  }\n\n  stop() {\n    if (!this.isPlaying) return;\n    this.isPlaying = false;\n    if (this.props.onPlayStateChanged !== undefined) this.props.onPlayStateChanged();\n  }\n\n  togglePlay() {\n    if (this.isPlaying) this.stop();else this.play();\n  } //Controls\n\n\n  setfile(file) {\n    this.currentFile = file; //file.getFilteredAmpData(60, 10, file.sampleRate);\n\n    if (file.notchFilterMode === 0) {\n      this.originPeakArray = file.getNormalizedAmpData();\n    } else {\n      var notchFreq = file.notchFilterMode === 1 ? 50 : 60;\n      this.originPeakArray = file.getFilteredAmpData(notchFreq, 10, file.sampleRate);\n    }\n\n    this.currentPeakArray = this.originPeakArray;\n    this.peakLength = this.currentFile.timestamps.length; //Compress Peaks\n\n    var c = 0;\n    var i = 0;\n    var j = 0;\n    var len = Math.ceil(this.peakLength / this.compressionRate);\n\n    for (c = 0; c < this.originPeakArray.length; c++) {\n      this.compressedPeakArray.push([]);\n\n      for (i = 0; i < len; i++) {\n        var value = 0.0;\n\n        for (j = 0; j < this.compressionRate; j++) {\n          var idx = i * this.compressionRate + j;\n          if (idx === this.originPeakArray[c].length) break;else if (Math.abs(this.originPeakArray[c][idx]) > value) {\n            value = this.originPeakArray[c][idx];\n          }\n        }\n\n        this.compressedPeakArray[c].push(value);\n      }\n    } //Update Properties\n\n\n    this.updatecount();\n    this.peakMaxOffset = this.peakLength - this.count / 2;\n    this.peakMinOffset = this.count / -2;\n    this.peakOffset = this.peakMinOffset;\n    this.peakPosition = 0;\n    this.channelEnabled = [];\n\n    for (i = 0; i < this.originPeakArray.length; i++) {\n      this.channelEnabled.push(true);\n    }\n\n    var channelData = file.getChannelData();\n    this.channelNames = [];\n\n    for (i = 0; i < channelData.length; i++) {\n      this.channelNames.push(channelData[i].customName);\n    }\n\n    this.scrollBarRef.setHandlePosition(0);\n    this.draw(true);\n    if (this.props.onOffsetChanged !== undefined) this.props.onOffsetChanged(0);\n  }\n\n  setchannelsenabled(arr) {\n    var j = 0;\n\n    for (var i = 0; i < this.channelEnabled.length; i++) {\n      if (arr[j] === i) {\n        this.channelEnabled[i] = true;\n\n        if (j < arr.length - 1) {\n          j++;\n        }\n      } else {\n        this.channelEnabled[i] = false;\n      }\n    }\n\n    this.verticalScrollPos = 0;\n    this.draw(true);\n  }\n\n  setoffset(pos) {\n    this.peakOffset = Math.floor((this.peakMaxOffset + this.count / 2) * pos) - this.count / 2;\n    this.peakPosition = Math.floor(this.peakLength * pos);\n    if (!this.isPlaying) this.draw();\n    if (this.props.onOffsetChanged !== undefined) this.props.onOffsetChanged(pos);\n  }\n\n  updatecount() {\n    if (this.currentFile === undefined) this.count = 1000;else this.count = this.currentFile.sampleRate / 1000 * (this.props.timescale / this.currentCompressionRate);\n  }\n\n  addverticalscroll(v) {\n    var maxPos = 0;\n\n    for (var i = 0; i < this.channelEnabled.length; i++) {\n      if (this.channelEnabled[i]) maxPos++;\n    }\n\n    var currentHeight = Math.max(50, Math.min(150, (this.props.height - this.timelineHeight - this.props.margin * maxPos) / maxPos));\n    maxPos = Math.max(0, (currentHeight + this.props.margin) * maxPos - (this.props.height - this.timelineHeight));\n    this.verticalScrollPos = Math.max(0, Math.min(maxPos, this.verticalScrollPos + v));\n    if (!this.isPlaying) this.draw();\n    this.drawGrid();\n  }\n\n  next() {\n    if (this.isPlaying) this.peakOffset += Math.round((this.currentFile === undefined ? 100 : this.currentFile.sampleRate) * this.props.speed);else this.peakOffset += this.count;\n    this.peakOffset = Math.min(this.peakOffset, this.peakMaxOffset);\n    this.peakOffset = Math.max(this.peakOffset, this.peakMinOffset);\n    if (!this.isPlaying) this.draw();\n    var pos = (this.peakOffset + this.count / 2) / (this.peakMaxOffset + this.count / 2);\n    this.scrollBarRef.setHandlePosition(pos);\n    if (this.props.onOffsetChanged !== undefined) this.props.onOffsetChanged(pos);\n  }\n\n  prev() {\n    if (this.isPlaying) this.peakOffset -= Math.round((this.currentFile === undefined ? 100 : this.currentFile.sampleRate) * this.props.speed);else this.peakOffset -= this.count;\n    this.peakOffset = Math.min(this.peakOffset, this.peakMaxOffset);\n    this.peakOffset = Math.max(this.peakOffset, this.peakMinOffset);\n    if (!this.isPlaying) this.draw();\n    var pos = (this.peakOffset + this.count / 2) / (this.peakMaxOffset + this.count / 2);\n    this.scrollBarRef.setHandlePosition(pos);\n    if (this.props.onOffsetChanged !== undefined) this.props.onOffsetChanged(pos);\n  } //Play Loop\n\n\n  loop() {\n    if (!this.isPlaying) return;\n    var now = new Date().getTime();\n    this.deltaTime = now - this.prevTime;\n    this.prevTime = now;\n    this.update();\n    this.draw();\n    requestAnimationFrame(this.loop);\n  }\n\n  update() {\n    this.updatecount();\n    this.peakOffset += Math.round((this.currentFile === undefined ? 100 : this.currentFile.sampleRate) * (this.deltaTime * 0.001) * this.props.speed / this.currentCompressionRate);\n    this.peakPosition += Math.round((this.currentFile === undefined ? 100 : this.currentFile.sampleRate) * (this.deltaTime * 0.001) * this.props.speed / this.currentCompressionRate);\n\n    if (this.peakOffset > this.peakMaxOffset) {\n      this.peakOffset = this.peakMaxOffset;\n      this.stop();\n    }\n\n    if (this.props.onOffsetChanged !== undefined) this.props.onOffsetChanged((this.peakOffset + this.count / 2) / (this.peakMaxOffset + this.count / 2));\n    if (this.scrollBarRef != null) this.scrollBarRef.setHandlePosition((this.peakOffset + this.count / 2) / (this.peakMaxOffset + this.count / 2));\n  }\n\n  draw(isUpdateGrid) {\n    if (this.peakLength < 2) return;\n    this.updatecount();\n    var channelCount = this.props.channels > this.currentPeakArray.length ? this.currentPeakArray.length : this.props.channels;\n    var len = this.peakPosition % this.count;\n    var width = this.props.width - this.textWidth;\n    var widthStep = width / this.count;\n    var currentHeight = Math.max(50, (this.props.height - this.timelineHeight - this.props.margin * channelCount) / channelCount); //Math.max(50, Math.min(150, (this.props.height - this.timelineHeight - (this.props.margin * channelCount)) / channelCount));\n\n    var halfHeight = currentHeight / 2;\n    var startX = widthStep * Math.min(this.peakOffset, 0) * -1 + this.textWidth;\n    var startY = 0;\n    var topMargin = Math.max(this.props.height - this.timelineHeight - (currentHeight + this.props.margin) * channelCount, 0) / 2;\n    this.glContext.clearColor(0.0, 0.0, 0.0, 1.0);\n    this.glContext.clear(this.glContext.COLOR_BUFFER_BIT);\n    this.glContext.viewport(0, 0, this.canvasRef.current.width, this.canvasRef.current.height); //Draw Graphs\n\n    var currentIdx = 0;\n    var x = 0;\n    var y = 0;\n    var vertices = [];\n    var c = 0;\n    var i = 0;\n    var drawnChannels = 0;\n\n    for (c = 0; c < this.currentPeakArray.length; c++) {\n      if (!this.channelEnabled[c]) continue;\n      startY = halfHeight * (drawnChannels * 2 + 1) + this.props.margin * drawnChannels + topMargin + this.timelineHeight - this.verticalScrollPos; //Culling\n\n      if (startY < -1 * currentHeight - this.props.margin) {\n        drawnChannels++;\n        continue;\n      } else if (startY > this.props.height) break; //Push GL Vertex\n\n\n      vertices.push(this.textWidth);\n      vertices.push(this.currentPeakArray[c][(this.peakPosition, 0)] * halfHeight + startY); //Draw graph\n\n      for (i = 1; i < len; i++) {\n        currentIdx = Math.floor(this.peakPosition - len + i);\n        if (currentIdx > this.currentPeakArray[c].length) continue;\n        x = Math.floor(widthStep * i + this.textWidth);\n        y = Math.floor(this.currentPeakArray[c][currentIdx] * halfHeight + startY);\n        vertices.push(x);\n        vertices.push(y); //this.canvasContext.lineTo(x, y);\n      }\n\n      vertices.push(this.props.width);\n      vertices.push(NaN);\n      drawnChannels++;\n    }\n\n    this.glContext.enableVertexAttribArray(this.coordAttr);\n    this.glContext.vertexAttribPointer(this.coordAttr, 2, this.glContext.FLOAT, false, 0, 0);\n    this.glContext.uniform2f(this.resolutionUniform, this.canvasRef.current.width, this.canvasRef.current.height); // Pass the vertex data to the buffer\n\n    this.glContext.bindBuffer(this.glContext.ARRAY_BUFFER, this.vertexBuffer);\n    this.glContext.bufferData(this.glContext.ARRAY_BUFFER, new Float32Array(vertices), this.glContext.STATIC_DRAW);\n    this.glContext.drawArrays(this.glContext.LINE_STRIP, 0, Math.floor(vertices.length / 2));\n    if (isUpdateGrid) this.drawGrid();\n  }\n\n  drawGrid() {\n    var channelCount = this.props.channels > this.currentPeakArray.length ? this.currentPeakArray.length : this.props.channels;\n    var width = this.props.width - this.textWidth;\n    var widthStep = width / this.count;\n    var currentHeight = Math.max(50, (this.props.height - this.timelineHeight - this.props.margin * channelCount) / channelCount);\n    var halfHeight = currentHeight / 2; //var startX = widthStep * Math.min(this.peakOffset, 0) * -1 + this.textWidth;\n\n    var startY = 0;\n    var topMargin = Math.max(this.props.height - this.timelineHeight - (currentHeight + this.props.margin) * channelCount, 0) / 2;\n    var c = 0;\n    var drawnChannels = 0;\n    this.gridContext.fillStyle = 'white';\n    this.gridContext.clearRect(0, 0, this.props.width, this.props.height);\n\n    for (c = 0; c < this.currentPeakArray.length; c++) {\n      if (!this.channelEnabled[c]) continue;\n      startY = halfHeight * (drawnChannels * 2 + 1) + this.props.margin * drawnChannels + topMargin + this.timelineHeight - this.verticalScrollPos;\n\n      if (startY < -1 * currentHeight - this.props.margin) {\n        drawnChannels++;\n        continue;\n      } else if (startY > this.props.height) break; //Draw canvas channel text\n\n\n      this.gridContext.fillText(this.channelNames[c], 0, startY); //this.gridContext.moveTo(startX, (this.currentPeakArray[c][Math.max(this.peakOffset, 0)] * halfHeight) + startY);\n\n      drawnChannels++;\n    } //Draw Canvas Grids\n\n\n    var y = this.timelineHeight;\n    this.gridContext.beginPath();\n    this.gridContext.strokeStyle = 'red';\n    this.gridContext.lineWidth = 0.5;\n\n    for (c = 0; c < channelCount; c++) {\n      y = c * (currentHeight + this.props.margin) + this.timelineHeight + topMargin - this.verticalScrollPos;\n      this.gridContext.moveTo(this.textWidth, y);\n      this.gridContext.lineTo(this.textWidth + width, y);\n      y += currentHeight;\n      this.gridContext.moveTo(this.textWidth, y);\n      this.gridContext.lineTo(this.textWidth + width, y);\n    }\n\n    this.gridContext.stroke();\n  } //etc\n\n\n  getCanvas() {\n    return this.canvasRef.current;\n  }\n\n  render() {\n    var style = {\n      display: 'flex',\n      flexDirection: 'column'\n    };\n    var graphStyle = {\n      display: 'flex',\n      zIndex: '1',\n      minHeight: Math.floor(this.props.height) + 'px'\n    };\n    var gridStyle = {\n      display: 'flex',\n      position: 'absolute',\n      zIndex: '2'\n    };\n    var scrollStyle = {\n      display: 'flex',\n      position: 'relative',\n      zIndex: '3'\n    };\n    this.peakMaxOffset = this.peakLength - this.count / 2;\n    this.peakMinOffset = this.count / -2;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: style,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: style,\n        children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: this.canvasRef,\n          style: graphStyle,\n          id: \"graphCanvas\",\n          width: this.props.width,\n          height: Math.floor(this.props.height)\n          /*this.props.channels * (this.props.height + this.props.margin) + this.timelineHeight*/\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 567,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: this.gridCanvasRef,\n          style: gridStyle,\n          id: \"gridCanvas\",\n          width: this.props.width,\n          height: Math.floor(this.props.height)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ScrollBar, {\n        ref: ref => {\n          this.scrollBarRef = ref;\n        },\n        style: scrollStyle,\n        width: this.props.width,\n        height: \"20\",\n        handleWidth: this.count / (this.peakLength + this.count / 2),\n        onDragStart: this.stop,\n        onDrag: this.setoffset\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 565,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default GLGraph;","map":{"version":3,"sources":["C:/Users/tank6/Desktop/React/brainwave_webviewer/src/pages/GLGraph.js"],"names":["React","ScrollBar","GLGraph","Component","constructor","props","canvasRef","createRef","gridCanvasRef","gridContext","scrollBarRef","isPlaying","count","compressionRate","deltaTime","prevTime","textWidth","timelineHeight","verticalScrollPos","glContext","vertexBuffer","shaderProgram","vertexShader","fragShader","coordAttr","resolutionUniform","loop","bind","play","stop","setoffset","updatecount","channelCount","channels","originPeakArray","compressedPeakArray","currentCompressionRate","currentPeakArray","peakLength","channelEnabled","channelNames","peakOffset","peakPosition","peakMaxOffset","peakMinOffset","c","i","push","toString","padStart","componentDidMount","current","getContext","fillStyle","lineWidth","shadowBlur","font","canvas","e","initWebGL","alert","draw","componentDidUpdate","prevProps","timescale","length","componentWillUnmount","gl","createBuffer","vsCode","fsCode","createShader","VERTEX_SHADER","FRAGMENT_SHADER","shaderSource","compileShader","compiled","getShaderParameter","COMPILE_STATUS","console","log","compilationLog","getShaderInfoLog","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","info","getProgramInfoLog","getAttribLocation","getUniformLocation","useProgram","Date","getTime","drawGrid","requestAnimationFrame","onPlayStateChanged","undefined","togglePlay","setfile","file","currentFile","notchFilterMode","getNormalizedAmpData","notchFreq","getFilteredAmpData","sampleRate","timestamps","j","len","Math","ceil","value","idx","abs","channelData","getChannelData","customName","setHandlePosition","onOffsetChanged","setchannelsenabled","arr","pos","floor","addverticalscroll","v","maxPos","currentHeight","max","min","height","margin","next","round","speed","prev","now","update","isUpdateGrid","width","widthStep","halfHeight","startX","startY","topMargin","clearColor","clear","COLOR_BUFFER_BIT","viewport","currentIdx","x","y","vertices","drawnChannels","NaN","enableVertexAttribArray","vertexAttribPointer","FLOAT","uniform2f","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","drawArrays","LINE_STRIP","clearRect","fillText","beginPath","strokeStyle","moveTo","lineTo","stroke","getCanvas","render","style","display","flexDirection","graphStyle","zIndex","minHeight","gridStyle","position","scrollStyle","ref"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ScrollBar from './ScrollBar';\r\n\r\nclass GLGraph extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.canvasRef = React.createRef();\r\n        this.gridCanvasRef = React.createRef();\r\n        this.gridContext = null;\r\n        this.scrollBarRef = null;\r\n        this.isPlaying = false;\r\n        this.count = 1000;\r\n        this.compressionRate = 5;\r\n        this.deltaTime = 0;\r\n        this.prevTime = 0;\r\n        this.textWidth = 100;\r\n        this.timelineHeight = 50;\r\n        this.verticalScrollPos = 0;\r\n\r\n        //WebGL\r\n        this.glContext = null;\r\n        this.vertexBuffer = null;\r\n        this.shaderProgram = null;\r\n        this.vertexShader = null;\r\n        this.fragShader = null;\r\n        this.coordAttr = null;\r\n        this.resolutionUniform = null;\r\n\r\n        //Bind Functions\r\n        this.loop = this.loop.bind(this);\r\n\r\n        this.play = this.play.bind(this);\r\n        this.stop = this.stop.bind(this);\r\n        this.setoffset = this.setoffset.bind(this);\r\n        this.updatecount = this.updatecount.bind(this);\r\n\r\n        var channelCount = props.channels;\r\n        this.originPeakArray = [];\r\n        this.compressedPeakArray = [];\r\n        this.currentCompressionRate = 1;\r\n        this.currentPeakArray = [];\r\n        this.peakLength = 0;\r\n        this.channelEnabled = [];\r\n        this.channelNames = [];\r\n        this.peakOffset = props.count / -2;\r\n        this.peakPosition = 0;\r\n        this.peakMaxOffset = 0;\r\n        this.peakMinOffset = props.count / -2;\r\n\r\n        //Create Test Samples\r\n        var c;\r\n        var i;\r\n        for (c = 0; c < channelCount; c++){\r\n            this.originPeakArray.push([]);\r\n            this.channelEnabled.push(true);\r\n            this.channelNames.push(c.toString().padStart(4, '0'));\r\n\r\n            for (i = 0; i < 100000; i++){\r\n                this.originPeakArray[c].push(0);\r\n            }\r\n        }\r\n        this.currentPeakArray = this.originPeakArray;\r\n        this.peakLength = 100000;\r\n        this.peakMaxOffset = this.peakLength - this.count / 2;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.gridContext = this.gridCanvasRef.current.getContext('2d');\r\n        this.gridContext.fillStyle = 'black';\r\n        this.gridContext.lineWidth = 1;\r\n        this.gridContext.shadowBlur = 0;\r\n        this.gridContext.font = (16) + 'px malgun gothic';\r\n\r\n        var canvas = this.canvasRef.current;\r\n\r\n        try{\r\n            this.glContext = canvas.getContext(\"webgl\") || canvas.getContext(\"experimental-webgl\");\r\n        }\r\n        catch (e){}\r\n\r\n        if (this.glContext){\r\n            this.initWebGL(this.glContext);\r\n        }\r\n        else{\r\n            alert(\"Unable to initialize WebGL. Your browser may not support it.\");\r\n            this.glContext = null;\r\n        }\r\n\r\n        this.draw(true);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        //Use Compressed Array\r\n        if (this.props.timescale !== prevProps.timescale){\r\n            if (this.props.timescale > 4000){\r\n                this.currentPeakArray = this.compressedPeakArray;\r\n                this.currentCompressionRate = this.compressionRate;\r\n            }\r\n            else{\r\n                this.currentPeakArray = this.originPeakArray;\r\n                this.currentCompressionRate = 1;\r\n            }\r\n\r\n            this.updatecount();\r\n            this.peakLength = this.currentPeakArray[0].length;\r\n            this.peakMaxOffset = this.peakLength - this.count / 2;\r\n            this.peakMinOffset = this.count / -2;\r\n        }\r\n\r\n        this.draw(true);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.stop();\r\n    }\r\n\r\n    initWebGL (gl){\r\n        //#####Vertex Buffer#####\r\n        this.vertexBuffer = gl.createBuffer();\r\n\r\n        //#####Shader#####\r\n        var vsCode =\r\n            'attribute vec2 coordinates;' +\r\n            'uniform vec2 u_resolution;' +\r\n            'void main(void) {' +\r\n                'vec2 zeroToOne = coordinates / u_resolution;' +\r\n                'vec2 zeroToTwo = zeroToOne * 2.0;' +\r\n                'vec2 clipSpace = zeroToTwo - 1.0;' +\r\n                'gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);' + \r\n            '}';\r\n        \r\n        var fsCode =\r\n            'void main(void) {' +\r\n               'gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);' +\r\n            '}';\r\n\r\n        this.vertexShader = gl.createShader(gl.VERTEX_SHADER);\r\n        this.fragShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n        \r\n        gl.shaderSource(this.vertexShader, vsCode);\r\n        gl.compileShader(this.vertexShader);\r\n        gl.shaderSource(this.fragShader, fsCode);\r\n        gl.compileShader(this.fragShader);\r\n\r\n        var compiled = gl.getShaderParameter(this.vertexShader, gl.COMPILE_STATUS);\r\n        console.log('Shader compiled successfully: ' + compiled);\r\n        var compilationLog = gl.getShaderInfoLog(this.vertexShader);\r\n        console.log('Shader compiler log: ' + compilationLog);\r\n        \r\n        //Create shader program\r\n        this.shaderProgram = gl.createProgram();\r\n        \r\n        gl.attachShader(this.shaderProgram, this.vertexShader);\r\n        gl.attachShader(this.shaderProgram, this.fragShader);\r\n\r\n        gl.linkProgram(this.shaderProgram);\r\n\r\n        if ( !gl.getProgramParameter( this.shaderProgram, gl.LINK_STATUS) ) {\r\n            var info = gl.getProgramInfoLog(this.shaderProgram);\r\n            alert('Could not compile WebGL program. \\n\\n' + info);\r\n        }\r\n\r\n        this.coordAttr = gl.getAttribLocation(this.shaderProgram, 'coordinates');\r\n        this.resolutionUniform = gl.getUniformLocation(this.shaderProgram, \"u_resolution\");\r\n        this.glContext.useProgram(this.shaderProgram);\r\n\r\n        console.log('WebGL Initialized Successfully');\r\n    }\r\n\r\n    //Play\r\n    play (){\r\n        if (this.isPlaying)\r\n            return;\r\n\r\n        //Rewind\r\n        if (this.peakOffset === this.peakMaxOffset){\r\n            this.peakOffset = this.peakMinOffset;\r\n            this.peakPosition = 0;\r\n        }\r\n        \r\n        this.prevTime = new Date().getTime();\r\n        this.isPlaying = true;\r\n        this.drawGrid();\r\n        requestAnimationFrame(this.loop);\r\n\r\n        if (this.props.onPlayStateChanged !== undefined)\r\n            this.props.onPlayStateChanged();\r\n    }\r\n    \r\n    stop(){\r\n        if (!this.isPlaying)\r\n            return;\r\n\r\n        this.isPlaying = false;\r\n\r\n        if (this.props.onPlayStateChanged !== undefined)\r\n            this.props.onPlayStateChanged();\r\n    }\r\n\r\n    togglePlay (){\r\n        if (this.isPlaying)\r\n            this.stop();\r\n        else\r\n            this.play();\r\n    }\r\n    \r\n    //Controls\r\n    setfile(file){\r\n        this.currentFile = file;\r\n\r\n        //file.getFilteredAmpData(60, 10, file.sampleRate);\r\n        \r\n        if (file.notchFilterMode === 0){\r\n            this.originPeakArray = file.getNormalizedAmpData();\r\n        }\r\n        else {\r\n            var notchFreq = file.notchFilterMode === 1 ? 50 : 60;\r\n            this.originPeakArray = file.getFilteredAmpData(notchFreq, 10, file.sampleRate);\r\n        }\r\n        this.currentPeakArray = this.originPeakArray;\r\n        this.peakLength = this.currentFile.timestamps.length;\r\n\r\n        //Compress Peaks\r\n        var c = 0;\r\n        var i = 0;\r\n        var j = 0;\r\n\r\n        var len = Math.ceil(this.peakLength / this.compressionRate);\r\n        for (c = 0; c < this.originPeakArray.length; c++){\r\n            this.compressedPeakArray.push([]);\r\n\r\n            for (i = 0; i < len; i++){\r\n                var value = 0.0;\r\n\r\n                for (j = 0; j < this.compressionRate; j++){\r\n                    var idx = i * this.compressionRate + j;\r\n\r\n                    if (idx === this.originPeakArray[c].length)\r\n                        break;\r\n                    else if (Math.abs(this.originPeakArray[c][idx]) > value){\r\n                        value = this.originPeakArray[c][idx];\r\n                    }\r\n                }\r\n                \r\n                this.compressedPeakArray[c].push(value);\r\n            }\r\n        }\r\n\r\n        //Update Properties\r\n        this.updatecount();\r\n        this.peakMaxOffset = this.peakLength - this.count / 2;\r\n        this.peakMinOffset = this.count / -2;\r\n        this.peakOffset = this.peakMinOffset;\r\n        this.peakPosition = 0;\r\n        \r\n        this.channelEnabled = [];\r\n        for (i = 0; i < this.originPeakArray.length; i++){\r\n            this.channelEnabled.push(true);\r\n        }\r\n\r\n        var channelData = file.getChannelData();\r\n        this.channelNames = [];\r\n        for (i = 0; i < channelData.length; i++){\r\n            this.channelNames.push(channelData[i].customName);\r\n        }\r\n\r\n        this.scrollBarRef.setHandlePosition(0);\r\n        this.draw(true);\r\n\r\n        if (this.props.onOffsetChanged !== undefined)\r\n            this.props.onOffsetChanged(0);\r\n    }\r\n\r\n    setchannelsenabled(arr){\r\n        var j = 0;\r\n        for (var i = 0; i < this.channelEnabled.length; i++){\r\n            if (arr[j] === i){\r\n                this.channelEnabled[i] = true;\r\n                if(j < arr.length - 1){\r\n                    j++;\r\n                }\r\n            }\r\n            else{\r\n                this.channelEnabled[i] = false;\r\n            }\r\n        }\r\n\r\n        this.verticalScrollPos = 0;\r\n        this.draw(true);\r\n    }\r\n\r\n    setoffset(pos){\r\n        this.peakOffset = Math.floor((this.peakMaxOffset + (this.count / 2)) * pos) - (this.count / 2);\r\n        this.peakPosition = Math.floor(this.peakLength * pos);\r\n\r\n        if (!this.isPlaying)\r\n            this.draw();\r\n\r\n        if (this.props.onOffsetChanged !== undefined)\r\n            this.props.onOffsetChanged(pos);\r\n    }\r\n\r\n    updatecount(){\r\n        if (this.currentFile === undefined)\r\n            this.count = 1000;\r\n        else\r\n            this.count = this.currentFile.sampleRate / 1000 * (this.props.timescale / this.currentCompressionRate);\r\n    }\r\n\r\n    addverticalscroll(v){\r\n        var maxPos = 0;\r\n\r\n        for (var i = 0; i < this.channelEnabled.length; i++){\r\n            if (this.channelEnabled[i])\r\n                maxPos++;\r\n        }\r\n        \r\n        var currentHeight = Math.max(50, Math.min(150, (this.props.height - this.timelineHeight - (this.props.margin * maxPos)) / maxPos));\r\n        maxPos = Math.max(0, ((currentHeight + this.props.margin) * maxPos) - (this.props.height - this.timelineHeight));\r\n\r\n        this.verticalScrollPos = Math.max(0, Math.min(maxPos, this.verticalScrollPos + v));\r\n        \r\n        if (!this.isPlaying)\r\n            this.draw();\r\n            \r\n        this.drawGrid();\r\n    }\r\n\r\n    next(){\r\n        if (this.isPlaying)\r\n            this.peakOffset += Math.round((this.currentFile === undefined ? 100 : this.currentFile.sampleRate) * this.props.speed);\r\n        else\r\n            this.peakOffset += this.count;\r\n        this.peakOffset = Math.min(this.peakOffset, this.peakMaxOffset);\r\n        this.peakOffset = Math.max(this.peakOffset, this.peakMinOffset);\r\n\r\n        if (!this.isPlaying)\r\n            this.draw();\r\n\r\n        var pos = (this.peakOffset + (this.count / 2)) / (this.peakMaxOffset + (this.count / 2));\r\n        this.scrollBarRef.setHandlePosition(pos);\r\n\r\n        if (this.props.onOffsetChanged !== undefined)\r\n            this.props.onOffsetChanged(pos);\r\n    }\r\n\r\n    prev(){\r\n        if (this.isPlaying)\r\n            this.peakOffset -= Math.round((this.currentFile === undefined ? 100 : this.currentFile.sampleRate) * this.props.speed);\r\n        else\r\n            this.peakOffset -= this.count;\r\n        this.peakOffset = Math.min(this.peakOffset, this.peakMaxOffset);\r\n        this.peakOffset = Math.max(this.peakOffset, this.peakMinOffset);\r\n\r\n        if (!this.isPlaying)\r\n            this.draw();\r\n\r\n        var pos = (this.peakOffset + (this.count / 2)) / (this.peakMaxOffset + (this.count / 2));\r\n        this.scrollBarRef.setHandlePosition(pos);\r\n\r\n        if (this.props.onOffsetChanged !== undefined)\r\n            this.props.onOffsetChanged(pos);\r\n    }\r\n\r\n    //Play Loop\r\n    loop(){\r\n        if (!this.isPlaying)\r\n            return;\r\n        \r\n        var now = new Date().getTime();\r\n        this.deltaTime = now - this.prevTime;\r\n        this.prevTime = now;\r\n        this.update();\r\n        this.draw();\r\n        requestAnimationFrame(this.loop);\r\n    }\r\n\r\n    update (){\r\n        this.updatecount();\r\n        this.peakOffset += Math.round((this.currentFile === undefined ? 100 : this.currentFile.sampleRate) * (this.deltaTime * 0.001) * this.props.speed / this.currentCompressionRate);\r\n        this.peakPosition += Math.round((this.currentFile === undefined ? 100 : this.currentFile.sampleRate) * (this.deltaTime * 0.001) * this.props.speed / this.currentCompressionRate);\r\n\r\n        if (this.peakOffset > this.peakMaxOffset){\r\n            this.peakOffset = this.peakMaxOffset;\r\n            this.stop();\r\n        }\r\n\r\n        if (this.props.onOffsetChanged !== undefined)\r\n            this.props.onOffsetChanged((this.peakOffset + (this.count / 2)) / (this.peakMaxOffset + (this.count / 2)));\r\n\r\n        if (this.scrollBarRef != null)\r\n            this.scrollBarRef.setHandlePosition((this.peakOffset + (this.count / 2)) / (this.peakMaxOffset + (this.count / 2)));\r\n    }\r\n\r\n    draw (isUpdateGrid){\r\n        if (this.peakLength < 2)\r\n            return;\r\n        \r\n        this.updatecount();\r\n            \r\n        var channelCount = this.props.channels > this.currentPeakArray.length ? this.currentPeakArray.length : this.props.channels;\r\n\r\n        var len = this.peakPosition % this.count;\r\n        var width = this.props.width - this.textWidth;\r\n        var widthStep = width / this.count;\r\n        var currentHeight = Math.max(50, (this.props.height - this.timelineHeight - (this.props.margin * channelCount)) / channelCount); //Math.max(50, Math.min(150, (this.props.height - this.timelineHeight - (this.props.margin * channelCount)) / channelCount));\r\n        var halfHeight = currentHeight / 2;\r\n\r\n        var startX = widthStep * Math.min(this.peakOffset, 0) * -1 + this.textWidth;\r\n        var startY = 0;\r\n        var topMargin = Math.max(this.props.height - this.timelineHeight - ((currentHeight + this.props.margin) * channelCount), 0) / 2;\r\n        \r\n        this.glContext.clearColor(0.0, 0.0, 0.0, 1.0);\r\n        this.glContext.clear(this.glContext.COLOR_BUFFER_BIT);\r\n        this.glContext.viewport(0, 0, this.canvasRef.current.width, this.canvasRef.current.height);\r\n\r\n        //Draw Graphs\r\n        var currentIdx = 0;\r\n        var x = 0;\r\n        var y = 0;\r\n        \r\n        var vertices = [];\r\n        var c = 0;\r\n        var i = 0;\r\n        var drawnChannels = 0;\r\n        \r\n        for (c = 0; c < this.currentPeakArray.length; c++){\r\n            if (!this.channelEnabled[c])\r\n                continue;\r\n            \r\n            startY = halfHeight * (drawnChannels * 2 + 1) + (this.props.margin * drawnChannels) + topMargin + this.timelineHeight - this.verticalScrollPos;\r\n            \r\n            //Culling\r\n            if (startY < -1 * currentHeight - this.props.margin)\r\n            {\r\n                drawnChannels++;\r\n                continue;\r\n            }\r\n            else if (startY > this.props.height)\r\n                break;\r\n                        \r\n            //Push GL Vertex\r\n            vertices.push(this.textWidth);\r\n            vertices.push((this.currentPeakArray[c][this.peakPosition, 0] * halfHeight) + startY);\r\n\r\n            //Draw graph\r\n            for(i = 1; i < len; i++){\r\n                currentIdx = Math.floor((this.peakPosition - len) + i);\r\n                if (currentIdx > this.currentPeakArray[c].length)\r\n                    continue;\r\n\r\n                x = Math.floor(widthStep * i + this.textWidth);\r\n                y = Math.floor((this.currentPeakArray[c][currentIdx] * halfHeight) + startY);\r\n                vertices.push(x);\r\n                vertices.push(y);\r\n                //this.canvasContext.lineTo(x, y);\r\n            }\r\n            \r\n            vertices.push(this.props.width);\r\n            vertices.push(NaN);\r\n\r\n            drawnChannels++;\r\n        }\r\n\r\n        this.glContext.enableVertexAttribArray(this.coordAttr);\r\n        this.glContext.vertexAttribPointer(this.coordAttr, 2, this.glContext.FLOAT, false, 0, 0);\r\n        this.glContext.uniform2f(this.resolutionUniform, this.canvasRef.current.width, this.canvasRef.current.height);\r\n        \r\n        // Pass the vertex data to the buffer\r\n        this.glContext.bindBuffer(this.glContext.ARRAY_BUFFER, this.vertexBuffer);\r\n        this.glContext.bufferData(this.glContext.ARRAY_BUFFER, new Float32Array(vertices), this.glContext.STATIC_DRAW);\r\n        this.glContext.drawArrays(this.glContext.LINE_STRIP, 0, Math.floor(vertices.length / 2));\r\n    \r\n        if (isUpdateGrid)\r\n            this.drawGrid();\r\n    }\r\n\r\n    drawGrid(){\r\n        var channelCount = this.props.channels > this.currentPeakArray.length ? this.currentPeakArray.length : this.props.channels;\r\n\r\n        var width = this.props.width - this.textWidth;\r\n        var widthStep = width / this.count;\r\n        var currentHeight = Math.max(50, (this.props.height - this.timelineHeight - (this.props.margin * channelCount)) / channelCount);\r\n        var halfHeight = currentHeight / 2;\r\n\r\n        //var startX = widthStep * Math.min(this.peakOffset, 0) * -1 + this.textWidth;\r\n        var startY = 0;\r\n        var topMargin = Math.max(this.props.height - this.timelineHeight - ((currentHeight + this.props.margin) * channelCount), 0) / 2;\r\n        \r\n        var c = 0;\r\n        var drawnChannels = 0;\r\n\r\n        this.gridContext.fillStyle = 'white';\r\n        this.gridContext.clearRect(0, 0, this.props.width, this.props.height);\r\n\r\n        for (c = 0; c < this.currentPeakArray.length; c++){\r\n            if (!this.channelEnabled[c])\r\n                continue;\r\n            \r\n            startY = halfHeight * (drawnChannels * 2 + 1) + (this.props.margin * drawnChannels) + topMargin + this.timelineHeight - this.verticalScrollPos;\r\n            \r\n            if (startY < -1 * currentHeight - this.props.margin){\r\n                drawnChannels++;\r\n                continue;\r\n            }\r\n            else if (startY > this.props.height)\r\n                break;\r\n            \r\n            //Draw canvas channel text\r\n            this.gridContext.fillText(this.channelNames[c], 0, startY);\r\n            //this.gridContext.moveTo(startX, (this.currentPeakArray[c][Math.max(this.peakOffset, 0)] * halfHeight) + startY);\r\n\r\n            drawnChannels++;\r\n        }\r\n\r\n        //Draw Canvas Grids\r\n        var y = this.timelineHeight;\r\n\r\n        this.gridContext.beginPath();\r\n        this.gridContext.strokeStyle = 'red';\r\n        this.gridContext.lineWidth = 0.5;\r\n        for (c = 0; c < channelCount; c++){\r\n            y = c * (currentHeight + this.props.margin) + this.timelineHeight + topMargin - this.verticalScrollPos;\r\n\r\n            this.gridContext.moveTo(this.textWidth, y);\r\n            this.gridContext.lineTo(this.textWidth + width, y);\r\n            \r\n            y += currentHeight;\r\n            this.gridContext.moveTo(this.textWidth, y);\r\n            this.gridContext.lineTo(this.textWidth + width, y);\r\n        }\r\n        this.gridContext.stroke();\r\n    }\r\n\r\n    //etc\r\n    getCanvas(){\r\n        return this.canvasRef.current;\r\n    }\r\n\r\n    render(){\r\n        var style={\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n        };\r\n        var graphStyle={\r\n            display: 'flex',\r\n            zIndex: '1',\r\n            minHeight: Math.floor(this.props.height) + 'px'\r\n        };\r\n        var gridStyle={\r\n            display: 'flex',\r\n            position: 'absolute',\r\n            zIndex: '2'\r\n        };\r\n        var scrollStyle={\r\n            display: 'flex',\r\n            position: 'relative',\r\n            zIndex: '3'\r\n        };\r\n        \r\n        this.peakMaxOffset = this.peakLength - this.count / 2;\r\n        this.peakMinOffset = this.count / -2;\r\n\r\n        return (\r\n        <div style={style}>\r\n            <div style={style}>\r\n                <canvas ref={this.canvasRef} style={graphStyle} id='graphCanvas'\r\n                width={this.props.width} height={Math.floor(this.props.height)/*this.props.channels * (this.props.height + this.props.margin) + this.timelineHeight*/}/>\r\n                <canvas ref={this.gridCanvasRef} style={gridStyle} id='gridCanvas'\r\n                width={this.props.width} height={Math.floor(this.props.height)}/>\r\n            </div>\r\n            <ScrollBar ref={ref=>{this.scrollBarRef = ref;}} style={scrollStyle}\r\n            width={this.props.width} height='20'\r\n            handleWidth={this.count / (this.peakLength + this.count / 2)}\r\n            onDragStart={this.stop}\r\n            onDrag={this.setoffset}/>\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default GLGraph;"]},"metadata":{},"sourceType":"module"}