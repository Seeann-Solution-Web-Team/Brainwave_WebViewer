{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\tank6\\\\Desktop\\\\React\\\\brainwave_webviewer\\\\src\\\\pages\\\\CanvasGraph.js\";\nimport React from 'react';\nimport ScrollBar from './ScrollBar';\n\nclass CanvasGraph extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = /*#__PURE__*/React.createRef();\n    this.canvasContext = null;\n    this.scrollBarRef = null;\n    this.isPlaying = false; //Bind Functions\n\n    this.play = this.play.bind(this);\n    this.stop = this.stop.bind(this);\n    this.setoffset = this.setoffset.bind(this);\n    this.keyDownEvent = this.keyDownEvent.bind(this);\n    var channelCount = props.channels;\n    this.peakArray = [];\n    this.peakOffset = []; //Create Test Samples\n\n    var c;\n    var i;\n\n    for (c = 0; c < channelCount; c++) {\n      this.peakArray.push([]);\n      this.peakOffset.push(0);\n\n      for (i = 0; i < 100000; i++) {\n        var rand = (Math.random() - 0.5) * 2;\n        this.peakArray[c].push(rand);\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.canvasContext = this.canvasRef.current.getContext('2d', {\n      alpha: false\n    });\n    this.canvasContext.fillStyle = 'black';\n    this.canvasContext.lineWidth = 1;\n    this.canvasContext.shadowBlur = 0;\n    this.play();\n    document.addEventListener(\"keydown\", this.keyDownEvent);\n  }\n\n  componentWillUnmount() {\n    this.stop();\n    document.removeEventListener(\"keydown\", this.keyDownEvent);\n  } //Play\n\n\n  play() {\n    this.timer = setInterval(() => {\n      this.update();\n      this.draw();\n    }, 5);\n    this.isPlaying = true;\n    if (this.props.onPlayStateChanged !== undefined) this.props.onPlayStateChanged();\n  }\n\n  stop() {\n    if (this.timer == null) return;\n    clearInterval(this.timer);\n    this.timer = null;\n    this.isPlaying = false;\n    if (this.props.onPlayStateChanged !== undefined) this.props.onPlayStateChanged();\n  }\n\n  togglePlay() {\n    if (this.isPlaying) this.stop();else this.play();\n  } //Events\n\n\n  keyDownEvent(e) {\n    if (e.keyCode === 32) this.togglePlay();\n  }\n\n  setoffset(pos) {\n    for (var i = 0; i < this.peakArray.length; i++) {\n      this.peakOffset[i] = Math.floor((this.peakArray[i].length - this.props.count - 1) * pos);\n    }\n\n    this.draw();\n  } //Play Loop\n\n\n  update() {\n    for (var i = 0; i < this.peakArray.length; i++) {\n      this.peakOffset[i] += 40;\n    }\n\n    if (this.peakOffset[0] > this.peakArray[0].length - this.props.count - 1) {\n      for (i = 0; i < this.peakArray.length; i++) {\n        this.peakOffset[i] = this.peakArray[i].length - this.props.count - 1;\n      }\n\n      this.stop();\n    }\n  }\n\n  draw() {\n    if (this.peakArray[0].length < 2) return;\n    var len = this.props.count < this.peakArray[0].length ? this.props.count : this.peakArray[0].length;\n    var width = this.canvasRef.current.offsetWidth;\n    var height = this.canvasRef.current.offsetHeight;\n    var halfHeight = height / 2 / this.peakArray.length;\n    var widthStep = width / this.props.count;\n    var startX = width - len * widthStep + 0.5;\n    this.canvasContext.strokeStyle = this.props.strokeColor;\n    this.canvasContext.fillRect(0, 0, width, height); //this.canvasContext.clearRect(0, 0, width, height);\n\n    var currentIdx = 0;\n    this.canvasContext.beginPath();\n\n    for (var c = 0; c < this.peakArray.length; c++) {\n      this.canvasContext.moveTo(startX, this.peakArray[c][0] * halfHeight + halfHeight * (c * 2 + 1));\n\n      for (var i = 1; i < len; i++) {\n        currentIdx = (i + this.peakOffset[c]) % this.peakArray[c].length;\n        this.canvasContext.lineTo(startX + widthStep * i, this.peakArray[c][currentIdx] * halfHeight + halfHeight * (c * 2 + 1));\n      }\n    }\n\n    this.canvasContext.stroke();\n    if (this.scrollBarRef != null) this.scrollBarRef.setHandlePosition(this.peakOffset[0] / (this.peakArray[0].length - this.props.count - 1));\n  }\n\n  render() {\n    var style = {\n      display: 'flex',\n      flexDirection: 'column'\n    };\n    var w = 100;\n    if (this.canvasRef.current) w = this.canvasRef.current.getBoundingClientRect().width;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: style,\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: this.canvasRef,\n        width: this.props.width,\n        height: this.peakArray.length * 100\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ScrollBar, {\n        ref: ref => {\n          this.scrollBarRef = ref;\n        },\n        width: this.props.width,\n        height: \"20\",\n        handleWidth: this.props.count / this.peakArray[0].length,\n        onDragStart: this.stop,\n        onDrag: this.setoffset\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nexport default CanvasGraph;","map":{"version":3,"sources":["C:/Users/tank6/Desktop/React/brainwave_webviewer/src/pages/CanvasGraph.js"],"names":["React","ScrollBar","CanvasGraph","Component","constructor","props","canvasRef","createRef","canvasContext","scrollBarRef","isPlaying","play","bind","stop","setoffset","keyDownEvent","channelCount","channels","peakArray","peakOffset","c","i","push","rand","Math","random","componentDidMount","current","getContext","alpha","fillStyle","lineWidth","shadowBlur","document","addEventListener","componentWillUnmount","removeEventListener","timer","setInterval","update","draw","onPlayStateChanged","undefined","clearInterval","togglePlay","e","keyCode","pos","length","floor","count","len","width","offsetWidth","height","offsetHeight","halfHeight","widthStep","startX","strokeStyle","strokeColor","fillRect","currentIdx","beginPath","moveTo","lineTo","stroke","setHandlePosition","render","style","display","flexDirection","w","getBoundingClientRect","ref"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ScrollBar from './ScrollBar';\r\n\r\nclass CanvasGraph extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.canvasRef = React.createRef();\r\n        this.canvasContext = null;\r\n        this.scrollBarRef = null;\r\n        this.isPlaying = false;\r\n\r\n        //Bind Functions\r\n        this.play = this.play.bind(this);\r\n        this.stop = this.stop.bind(this);\r\n        this.setoffset = this.setoffset.bind(this);\r\n        this.keyDownEvent = this.keyDownEvent.bind(this);\r\n        \r\n        var channelCount = props.channels;\r\n        this.peakArray = [];\r\n        this.peakOffset = [];\r\n\r\n        //Create Test Samples\r\n        var c;\r\n        var i;\r\n        for (c = 0; c < channelCount; c++){\r\n            this.peakArray.push([]);\r\n            this.peakOffset.push(0);\r\n\r\n            for (i = 0; i < 100000; i++){\r\n                var rand = (Math.random() - 0.5) * 2;\r\n                this.peakArray[c].push(rand);\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.canvasContext = this.canvasRef.current.getContext('2d', {alpha: false});\r\n        this.canvasContext.fillStyle = 'black';\r\n        this.canvasContext.lineWidth = 1;\r\n        this.canvasContext.shadowBlur = 0;\r\n        this.play();\r\n\r\n        document.addEventListener(\"keydown\", this.keyDownEvent);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.stop();\r\n        document.removeEventListener(\"keydown\", this.keyDownEvent);\r\n    }\r\n\r\n    //Play\r\n    play (){\r\n        this.timer = setInterval(()=>{this.update(); this.draw();}, 5);\r\n        this.isPlaying = true;\r\n\r\n        if (this.props.onPlayStateChanged !== undefined)\r\n            this.props.onPlayStateChanged();\r\n    }\r\n\r\n    stop(){\r\n        if (this.timer == null)\r\n            return;\r\n\r\n        clearInterval(this.timer);\r\n        this.timer = null;\r\n        this.isPlaying = false;\r\n\r\n        if (this.props.onPlayStateChanged !== undefined)\r\n            this.props.onPlayStateChanged();\r\n    }\r\n\r\n    togglePlay (){\r\n        if (this.isPlaying)\r\n            this.stop();\r\n        else\r\n            this.play();\r\n    }\r\n\r\n    //Events\r\n    keyDownEvent (e){\r\n        if (e.keyCode === 32)\r\n            this.togglePlay();\r\n    }\r\n\r\n    setoffset(pos){\r\n        for (var i = 0; i < this.peakArray.length; i++){\r\n            this.peakOffset[i] = Math.floor((this.peakArray[i].length - this.props.count - 1) * pos);\r\n        }\r\n\r\n        this.draw();\r\n    }\r\n\r\n    //Play Loop\r\n    update (){\r\n        for (var i = 0; i < this.peakArray.length; i++){\r\n            this.peakOffset[i] += 40;\r\n        }\r\n\r\n        if (this.peakOffset[0] > this.peakArray[0].length - this.props.count - 1){\r\n            for (i = 0; i < this.peakArray.length; i++){\r\n                this.peakOffset[i] = this.peakArray[i].length - this.props.count - 1;\r\n            }\r\n            this.stop();\r\n        }\r\n    }\r\n\r\n    draw (){\r\n        if (this.peakArray[0].length < 2)\r\n            return;\r\n\r\n        var len = this.props.count < this.peakArray[0].length ? this.props.count : this.peakArray[0].length;\r\n        var width = this.canvasRef.current.offsetWidth;\r\n        var height = this.canvasRef.current.offsetHeight;\r\n        var halfHeight = height / 2 / this.peakArray.length;\r\n        var widthStep = width / this.props.count;\r\n\r\n        var startX = width - (len * widthStep) + 0.5;\r\n        \r\n        this.canvasContext.strokeStyle = this.props.strokeColor;\r\n        this.canvasContext.fillRect(0, 0, width, height);\r\n        //this.canvasContext.clearRect(0, 0, width, height);\r\n\r\n        var currentIdx = 0;\r\n        this.canvasContext.beginPath();\r\n        for (var c = 0; c < this.peakArray.length; c++){\r\n            this.canvasContext.moveTo(startX, (this.peakArray[c][0] * halfHeight) + (halfHeight * (c * 2 + 1)));\r\n\r\n            for(var i = 1; i < len; i++){\r\n                currentIdx = (i + this.peakOffset[c]) % this.peakArray[c].length;\r\n                this.canvasContext.lineTo(startX + (widthStep * i), (this.peakArray[c][currentIdx] * halfHeight) + (halfHeight * (c * 2 + 1)));\r\n            }\r\n        }\r\n        this.canvasContext.stroke();\r\n\r\n        if (this.scrollBarRef != null)\r\n            this.scrollBarRef.setHandlePosition(this.peakOffset[0] / (this.peakArray[0].length - this.props.count - 1));\r\n    }\r\n\r\n    render(){\r\n        var style={\r\n            display: 'flex',\r\n            flexDirection: 'column'\r\n        };\r\n\r\n        var w = 100;\r\n        if (this.canvasRef.current)\r\n            w = this.canvasRef.current.getBoundingClientRect().width;\r\n\r\n        return  <div style={style}>\r\n                    <canvas ref={this.canvasRef} \r\n                    width={this.props.width} height={this.peakArray.length * 100}/>\r\n                    <ScrollBar ref={ref=>{this.scrollBarRef = ref;}}\r\n                    width={this.props.width} height='20'\r\n                    handleWidth={this.props.count / this.peakArray[0].length}\r\n                    onDragStart={this.stop}\r\n                    onDrag={this.setoffset}/>\r\n                </div>\r\n    }\r\n}\r\n\r\nexport default CanvasGraph;"]},"metadata":{},"sourceType":"module"}