{"ast":null,"code":"class RHSFile {\n  constructor() {}\n\n  load(path) {\n    console.log(\"loading \" + path);\n    this.filestream = null;\n    this.onProgress = this.onProgress.bind(this);\n    this.onLoad = this.onLoad.bind(this);\n    this.onError = this.onError.bind(this); //Test\n\n    var localPath = \"http://localhost:3001/sample/\" + path;\n    this.request = new XMLHttpRequest();\n    this.request.open(\"GET\", localPath, true);\n    this.request.onprogress = this.onProgress;\n    this.request.onload = this.onLoad;\n    this.request.onerror = this.onError;\n    this.request.overrideMimeType(\"text/plain; charset=x-user-defined\");\n    this.request.send(null);\n  }\n\n  onProgress(e) {\n    var percentage = e.loaded / e.total * 100;\n    console.log(e.loaded + ' / ' + e.total + \" (\" + percentage + '%)');\n  }\n\n  onLoad(e) {\n    if (this.request.readyState === 4) {\n      if (this.request.status === 200 || this.request.status === 0) {\n        /*\r\n        var reader = new FileReader();\r\n        \r\n        reader.onload = function(e){\r\n            console.log(e.target.result);\r\n        };\r\n         reader.readAsBinaryString(this.response);\r\n        */\n        this.filestream = this.request.responseText;\n        console.log('file loaded successfully');\n      }\n    } else {\n      alert('Failed to read file');\n    }\n  }\n\n  onError(e) {\n    console.log('Error : ' + this.request.statusText);\n  } //Utilities\n\n\n  getByte(index) {\n    if (this.filestream) return this.filestream.charCodeAt(index) & 0xff;else return 0x00;\n  }\n\n}\n\nexport default RHSFile;","map":{"version":3,"sources":["C:/Users/tank6/Desktop/React/brainwave_webviewer/src/pages/RHSFile.js"],"names":["RHSFile","constructor","load","path","console","log","filestream","onProgress","bind","onLoad","onError","localPath","request","XMLHttpRequest","open","onprogress","onload","onerror","overrideMimeType","send","e","percentage","loaded","total","readyState","status","responseText","alert","statusText","getByte","index","charCodeAt"],"mappings":"AAAA,MAAMA,OAAN,CAAa;AACTC,EAAAA,WAAW,GAAE,CACZ;;AAEDC,EAAAA,IAAI,CAAEC,IAAF,EAAO;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAaF,IAAzB;AACA,SAAKG,UAAL,GAAkB,IAAlB;AACA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKC,MAAL,GAAc,KAAKA,MAAL,CAAYD,IAAZ,CAAiB,IAAjB,CAAd;AACA,SAAKE,OAAL,GAAe,KAAKA,OAAL,CAAaF,IAAb,CAAkB,IAAlB,CAAf,CALO,CAOP;;AACA,QAAIG,SAAS,GAAG,kCAAkCR,IAAlD;AAEA,SAAKS,OAAL,GAAe,IAAIC,cAAJ,EAAf;AACA,SAAKD,OAAL,CAAaE,IAAb,CAAkB,KAAlB,EAAyBH,SAAzB,EAAoC,IAApC;AACA,SAAKC,OAAL,CAAaG,UAAb,GAA0B,KAAKR,UAA/B;AACA,SAAKK,OAAL,CAAaI,MAAb,GAAsB,KAAKP,MAA3B;AACA,SAAKG,OAAL,CAAaK,OAAb,GAAuB,KAAKP,OAA5B;AACA,SAAKE,OAAL,CAAaM,gBAAb,CAA8B,oCAA9B;AACA,SAAKN,OAAL,CAAaO,IAAb,CAAkB,IAAlB;AACH;;AAEDZ,EAAAA,UAAU,CAACa,CAAD,EAAG;AACT,QAAIC,UAAU,GAAGD,CAAC,CAACE,MAAF,GAAWF,CAAC,CAACG,KAAb,GAAqB,GAAtC;AACAnB,IAAAA,OAAO,CAACC,GAAR,CAAYe,CAAC,CAACE,MAAF,GAAW,KAAX,GAAmBF,CAAC,CAACG,KAArB,GAA6B,IAA7B,GAAoCF,UAApC,GAAiD,IAA7D;AACH;;AAEDZ,EAAAA,MAAM,CAAEW,CAAF,EAAI;AACN,QAAG,KAAKR,OAAL,CAAaY,UAAb,KAA4B,CAA/B,EAAkC;AAC9B,UAAG,KAAKZ,OAAL,CAAaa,MAAb,KAAwB,GAAxB,IAA+B,KAAKb,OAAL,CAAaa,MAAb,KAAwB,CAA1D,EAA6D;AACzD;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACgB,aAAKnB,UAAL,GAAkB,KAAKM,OAAL,CAAac,YAA/B;AACAtB,QAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACH;AACJ,KAbD,MAcI;AACAsB,MAAAA,KAAK,CAAC,qBAAD,CAAL;AACH;AACJ;;AAEDjB,EAAAA,OAAO,CAAEU,CAAF,EAAI;AACPhB,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAa,KAAKO,OAAL,CAAagB,UAAtC;AACH,GAlDQ,CAoDT;;;AACAC,EAAAA,OAAO,CAAEC,KAAF,EAAS;AACZ,QAAI,KAAKxB,UAAT,EACI,OAAO,KAAKA,UAAL,CAAgByB,UAAhB,CAA2BD,KAA3B,IAAoC,IAA3C,CADJ,KAGI,OAAO,IAAP;AACP;;AA1DQ;;AA+Db,eAAe9B,OAAf","sourcesContent":["class RHSFile{\r\n    constructor(){\r\n    }\r\n\r\n    load (path){\r\n        console.log(\"loading \" + path);\r\n        this.filestream = null;\r\n        this.onProgress = this.onProgress.bind(this);\r\n        this.onLoad = this.onLoad.bind(this);\r\n        this.onError = this.onError.bind(this);\r\n\r\n        //Test\r\n        var localPath = \"http://localhost:3001/sample/\" + path;\r\n\r\n        this.request = new XMLHttpRequest();\r\n        this.request.open(\"GET\", localPath, true);\r\n        this.request.onprogress = this.onProgress;\r\n        this.request.onload = this.onLoad;\r\n        this.request.onerror = this.onError;\r\n        this.request.overrideMimeType(\"text/plain; charset=x-user-defined\");\r\n        this.request.send(null);\r\n    }\r\n\r\n    onProgress(e){\r\n        var percentage = e.loaded / e.total * 100;\r\n        console.log(e.loaded + ' / ' + e.total + \" (\" + percentage + '%)');\r\n    }\r\n\r\n    onLoad (e){\r\n        if(this.request.readyState === 4) {\r\n            if(this.request.status === 200 || this.request.status === 0) {\r\n                /*\r\n                var reader = new FileReader();\r\n                \r\n                reader.onload = function(e){\r\n                    console.log(e.target.result);\r\n                };\r\n                 reader.readAsBinaryString(this.response);\r\n                */\r\n                this.filestream = this.request.responseText;\r\n                console.log('file loaded successfully');\r\n            }\r\n        }\r\n        else{\r\n            alert('Failed to read file');\r\n        }\r\n    }\r\n\r\n    onError (e){\r\n        console.log('Error : ' + this.request.statusText);\r\n    }\r\n    \r\n    //Utilities\r\n    getByte (index) {\r\n        if (this.filestream)\r\n            return this.filestream.charCodeAt(index) & 0xff;\r\n        else\r\n            return 0x00;\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default RHSFile;"]},"metadata":{},"sourceType":"module"}