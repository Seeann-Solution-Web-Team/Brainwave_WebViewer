{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\tank6\\\\Desktop\\\\React\\\\brainwave_webviewer\\\\src\\\\pages\\\\CanvasGraph.js\";\nimport React from 'react';\nimport ScrollBar from './ScrollBar';\n\nclass CanvasGraph extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = /*#__PURE__*/React.createRef();\n    this.canvasContext = null;\n    this.scrollBarRef = null;\n    this.isPlaying = false;\n    this.deltaTime = 0;\n    this.prevTime = 0;\n    this.textWidth = 100;\n    this.timelineHeight = 50;\n    this.verticalScrollPos = 0; //Bind Functions\n\n    this.loop = this.loop.bind(this);\n    this.play = this.play.bind(this);\n    this.stop = this.stop.bind(this);\n    this.setoffset = this.setoffset.bind(this);\n    var channelCount = props.channels;\n    this.peakArray = [];\n    this.channelEnabled = [];\n    this.channelNames = [];\n    this.peakOffset = props.count / -2;\n    this.peakMaxOffset = 0;\n    this.peakMinOffset = props.count / -2; //Create Test Samples\n\n    var c;\n    var i;\n\n    for (c = 0; c < channelCount; c++) {\n      this.peakArray.push([]);\n      this.channelEnabled.push(true);\n      this.channelNames.push(c.toString().padStart(4, '0'));\n\n      for (i = 0; i < 100000; i++) {\n        this.peakArray[c].push(0);\n      }\n    }\n\n    this.peakMaxOffset = this.peakArray[0].length - this.props.count / 2;\n  }\n\n  componentDidMount() {\n    this.canvasContext = this.canvasRef.current.getContext('2d', {\n      alpha: false\n    });\n    this.canvasContext.fillStyle = 'black';\n    this.canvasContext.lineWidth = 1;\n    this.canvasContext.shadowBlur = 0;\n    this.canvasContext.font = 16 + 'px malgun gothic';\n  }\n\n  componentDidUpdate() {\n    this.draw();\n  }\n\n  componentWillUnmount() {\n    this.stop();\n  } //Play\n\n\n  play() {\n    if (this.isPlaying) return; //Rewind\n\n    if (this.peakOffset === this.peakMaxOffset) {\n      this.peakOffset = this.peakMinOffset;\n    }\n\n    this.prevTime = new Date().getTime();\n    this.isPlaying = true;\n    requestAnimationFrame(this.loop);\n    if (this.props.onPlayStateChanged !== undefined) this.props.onPlayStateChanged();\n  }\n\n  stop() {\n    if (!this.isPlaying) return;\n    this.isPlaying = false;\n    if (this.props.onPlayStateChanged !== undefined) this.props.onPlayStateChanged();\n  }\n\n  togglePlay() {\n    if (this.isPlaying) this.stop();else this.play();\n  } //Controls\n\n\n  setfile(file) {\n    this.currentFile = file;\n    this.peakArray = file.getFilteredAmpData(50, 10, file.sampleRate);\n    /*\r\n    if (file.notchFilterMode == 0){\r\n        this.peakArray = file.getNormalizedAmpData();\r\n    }\r\n    else {\r\n        var notchFreq = file.notchFilterMode == 1 ? 50 : 60;\r\n        this.peakArray = file.getFilteredAmpData(notchFreq, 10, file.sampleRate);\r\n    }\r\n    */\n\n    this.peakOffset = this.peakMinOffset;\n    this.peakMaxOffset = this.peakArray[0].length - this.props.count / 2;\n    var i = 0;\n    this.channelEnabled = [];\n\n    for (i = 0; i < this.peakArray.length; i++) {\n      this.channelEnabled.push(true);\n    }\n\n    var channelData = file.getChannelData();\n    this.channelNames = [];\n\n    for (i = 0; i < channelData.length; i++) {\n      this.channelNames.push(channelData[i].customName);\n    }\n\n    this.scrollBarRef.setHandlePosition(0);\n    this.draw();\n    if (this.props.onOffsetChanged !== undefined) this.props.onOffsetChanged(0);\n  }\n\n  setchannelsenabled(arr) {\n    var j = 0;\n\n    for (var i = 0; i < this.channelEnabled.length; i++) {\n      if (arr[j] === i) {\n        this.channelEnabled[i] = true;\n\n        if (j < arr.length - 1) {\n          j++;\n        }\n      } else {\n        this.channelEnabled[i] = false;\n      }\n    }\n\n    this.verticalScrollPos = 0;\n    this.draw();\n  }\n\n  setoffset(pos) {\n    this.peakOffset = Math.floor((this.peakMaxOffset + this.props.count / 2) * pos) - this.props.count / 2;\n    this.draw();\n    if (this.props.onOffsetChanged !== undefined) this.props.onOffsetChanged(pos);\n  }\n\n  addverticalscroll(v) {\n    var maxPos = 0;\n\n    for (var i = 0; i < this.channelEnabled.length; i++) {\n      if (this.channelEnabled[i]) maxPos++;\n    }\n\n    var currentHeight = Math.max(50, Math.min(150, (this.props.height - this.timelineHeight - this.props.margin * maxPos) / maxPos));\n    maxPos = Math.max(0, (currentHeight + this.props.margin) * maxPos - (this.props.height - this.timelineHeight));\n    this.verticalScrollPos = Math.max(0, Math.min(maxPos, this.verticalScrollPos + v));\n    this.draw();\n  }\n\n  next() {\n    this.peakOffset += Math.round((this.currentFile === undefined ? 100 : this.currentFile.sampleRate) * this.props.speed);\n    this.peakOffset = Math.min(this.peakOffset, this.peakMaxOffset);\n    this.peakOffset = Math.max(this.peakOffset, this.peakMinOffset);\n    this.draw();\n    var pos = (this.peakOffset + this.props.count / 2) / (this.peakMaxOffset + this.props.count / 2);\n    this.scrollBarRef.setHandlePosition(pos);\n    if (this.props.onOffsetChanged !== undefined) this.props.onOffsetChanged(pos);\n  }\n\n  prev() {\n    this.peakOffset -= Math.round((this.currentFile === undefined ? 100 : this.currentFile.sampleRate) * this.props.speed);\n    this.peakOffset = Math.min(this.peakOffset, this.peakMaxOffset);\n    this.peakOffset = Math.max(this.peakOffset, this.peakMinOffset);\n    this.draw();\n    var pos = (this.peakOffset + this.props.count / 2) / (this.peakMaxOffset + this.props.count / 2);\n    this.scrollBarRef.setHandlePosition(pos);\n    if (this.props.onOffsetChanged !== undefined) this.props.onOffsetChanged(pos);\n  } //Play Loop\n\n\n  loop() {\n    if (!this.isPlaying) return;\n    var now = new Date().getTime();\n    this.deltaTime = now - this.prevTime;\n    this.prevTime = now;\n    this.update();\n    this.draw();\n    requestAnimationFrame(this.loop);\n  }\n\n  update() {\n    this.peakOffset += Math.round((this.currentFile === undefined ? 100 : this.currentFile.sampleRate) * (this.deltaTime * 0.001) * this.props.speed);\n\n    if (this.peakOffset > this.peakMaxOffset) {\n      this.peakOffset = this.peakMaxOffset;\n      this.stop();\n    }\n\n    if (this.props.onOffsetChanged !== undefined) this.props.onOffsetChanged((this.peakOffset + this.props.count / 2) / this.peakMaxOffset);\n    if (this.scrollBarRef != null) this.scrollBarRef.setHandlePosition((this.peakOffset + this.props.count / 2) / (this.peakMaxOffset + this.props.count / 2));\n  }\n\n  draw() {\n    if (this.peakArray[0].length < 2) return;\n    var channelCount = this.props.channels > this.peakArray.length ? this.peakArray.length : this.props.channels;\n    var len = this.props.count < this.peakArray[0].length ? this.props.count : this.peakArray[0].length;\n    var width = this.canvasRef.current.offsetWidth - this.textWidth;\n    var widthStep = width / this.props.count;\n    var currentHeight = Math.max(50, Math.min(150, (this.props.height - this.timelineHeight - this.props.margin * channelCount) / channelCount));\n    var halfHeight = currentHeight / 2;\n    var startX = widthStep * Math.min(this.peakOffset, 0) * -1 + this.textWidth;\n    var startY = 0;\n    var topMargin = Math.max(this.props.height - this.timelineHeight - (currentHeight + this.props.margin) * channelCount, 0) / 2;\n    this.canvasContext.strokeStyle = this.props.strokeColor;\n    this.canvasContext.fillStyle = 'black';\n    this.canvasContext.fillRect(0, 0, width + this.textWidth, this.props.height); //this.canvasContext.clearRect(0, 0, width, height);\n\n    var i = 0; //Draw Graphs\n\n    var currentIdx = 0;\n    var x = 0;\n    var y = 0;\n    this.canvasContext.fillStyle = 'white';\n    this.canvasContext.lineWidth = 1;\n    this.canvasContext.beginPath();\n    var c = 0;\n    var drawnChannels = 0;\n\n    for (c = 0; c < this.peakArray.length; c++) {\n      if (!this.channelEnabled[c]) continue;\n      startY = halfHeight * (drawnChannels * 2 + 1) + this.props.margin * drawnChannels + topMargin + this.timelineHeight - this.verticalScrollPos; //Draw channel text\n\n      this.canvasContext.fillText(this.channelNames[c], 0, startY);\n      this.canvasContext.moveTo(startX, this.peakArray[c][Math.max(this.peakOffset, 0)] * halfHeight + startY); //Draw graph\n\n      for (i = 1; i < len; i++) {\n        currentIdx = Math.max(i + this.peakOffset, i);\n        if (currentIdx > this.peakArray[c].length) continue;\n        x = widthStep * i + startX + 0.1;\n        y = this.peakArray[c][currentIdx] * halfHeight + startY + 0.1;\n        this.canvasContext.lineTo(x, y);\n      }\n\n      drawnChannels++;\n    }\n\n    this.canvasContext.stroke(); //Draw Grids\n\n    this.canvasContext.beginPath();\n    this.canvasContext.strokeStyle = 'red';\n    this.canvasContext.lineWidth = 0.5;\n    this.canvasContext.moveTo(width / 2 + this.textWidth, this.timelineHeight);\n    this.canvasContext.lineTo(width / 2 + this.textWidth, this.props.height);\n\n    for (c = 0; c < channelCount; c++) {\n      this.canvasContext.moveTo(this.textWidth, c * (currentHeight + this.props.margin) + this.timelineHeight + topMargin - this.verticalScrollPos);\n      this.canvasContext.lineTo(this.textWidth + width, c * (currentHeight + this.props.margin) + this.timelineHeight + topMargin - this.verticalScrollPos);\n      this.canvasContext.moveTo(this.textWidth, c * (currentHeight + this.props.margin) + currentHeight + this.timelineHeight + topMargin - this.verticalScrollPos);\n      this.canvasContext.lineTo(this.textWidth + width, c * (currentHeight + this.props.margin) + currentHeight + this.timelineHeight + topMargin - this.verticalScrollPos);\n    }\n\n    this.canvasContext.stroke(); //Draw timeline\n\n    this.canvasContext.fillStyle = 'black';\n    this.canvasContext.fillRect(0, 0, width + this.textWidth, this.timelineHeight);\n    this.canvasContext.fillStyle = 'white';\n    var currentTime = 0;\n\n    if (this.currentFile) {\n      for (i = 0; i < len; i++) {\n        currentIdx = Math.max(i + this.peakOffset, i);\n        currentTime = currentIdx / this.currentFile.sampleRate;\n        currentTime = Math.floor(currentTime * 100) * 0.01;\n\n        if (currentIdx % Math.floor(this.currentFile.sampleRate / 100) === 0) {\n          this.canvasContext.fillText(currentTime.toString(), startX + i * widthStep, this.timelineHeight * 0.5);\n        }\n      }\n    }\n  }\n\n  getCanvas() {\n    return this.canvasRef.current;\n  }\n\n  render() {\n    var style = {\n      display: 'flex',\n      flexDirection: 'column',\n      height: '95%'\n    };\n    this.peakMaxOffset = this.peakArray[0].length - this.props.count / 2;\n    this.peakMinOffset = this.props.count / -2;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: style,\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: this.canvasRef,\n        style: style,\n        id: \"graphCanvas\",\n        width: this.props.width,\n        height: this.props.height\n        /*this.props.channels * (this.props.height + this.props.margin) + this.timelineHeight*/\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ScrollBar, {\n        ref: ref => {\n          this.scrollBarRef = ref;\n        },\n        width: this.props.width,\n        height: \"20\",\n        handleWidth: this.props.count / (this.peakArray[0].length + this.props.count / 2),\n        onDragStart: this.stop,\n        onDrag: this.setoffset\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default CanvasGraph;","map":{"version":3,"sources":["C:/Users/tank6/Desktop/React/brainwave_webviewer/src/pages/CanvasGraph.js"],"names":["React","ScrollBar","CanvasGraph","Component","constructor","props","canvasRef","createRef","canvasContext","scrollBarRef","isPlaying","deltaTime","prevTime","textWidth","timelineHeight","verticalScrollPos","loop","bind","play","stop","setoffset","channelCount","channels","peakArray","channelEnabled","channelNames","peakOffset","count","peakMaxOffset","peakMinOffset","c","i","push","toString","padStart","length","componentDidMount","current","getContext","alpha","fillStyle","lineWidth","shadowBlur","font","componentDidUpdate","draw","componentWillUnmount","Date","getTime","requestAnimationFrame","onPlayStateChanged","undefined","togglePlay","setfile","file","currentFile","getFilteredAmpData","sampleRate","channelData","getChannelData","customName","setHandlePosition","onOffsetChanged","setchannelsenabled","arr","j","pos","Math","floor","addverticalscroll","v","maxPos","currentHeight","max","min","height","margin","next","round","speed","prev","now","update","len","width","offsetWidth","widthStep","halfHeight","startX","startY","topMargin","strokeStyle","strokeColor","fillRect","currentIdx","x","y","beginPath","drawnChannels","fillText","moveTo","lineTo","stroke","currentTime","getCanvas","render","style","display","flexDirection","ref"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ScrollBar from './ScrollBar';\r\n\r\nclass CanvasGraph extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.canvasRef = React.createRef();\r\n        this.canvasContext = null;\r\n        this.scrollBarRef = null;\r\n        this.isPlaying = false;\r\n        this.deltaTime = 0;\r\n        this.prevTime = 0;\r\n        this.textWidth = 100;\r\n        this.timelineHeight = 50;\r\n        this.verticalScrollPos = 0;\r\n\r\n        //Bind Functions\r\n        this.loop = this.loop.bind(this);\r\n\r\n        this.play = this.play.bind(this);\r\n        this.stop = this.stop.bind(this);\r\n        this.setoffset = this.setoffset.bind(this);\r\n\r\n        var channelCount = props.channels;\r\n        this.peakArray = [];\r\n        this.channelEnabled = [];\r\n        this.channelNames = [];\r\n        this.peakOffset = props.count / -2;\r\n        this.peakMaxOffset = 0;\r\n        this.peakMinOffset = props.count / -2;\r\n\r\n        //Create Test Samples\r\n        var c;\r\n        var i;\r\n        for (c = 0; c < channelCount; c++){\r\n            this.peakArray.push([]);\r\n            this.channelEnabled.push(true);\r\n            this.channelNames.push(c.toString().padStart(4, '0'));\r\n\r\n            for (i = 0; i < 100000; i++){\r\n                this.peakArray[c].push(0);\r\n            }\r\n        }\r\n\r\n        this.peakMaxOffset = this.peakArray[0].length - this.props.count / 2;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.canvasContext = this.canvasRef.current.getContext('2d', {alpha: false});\r\n        this.canvasContext.fillStyle = 'black';\r\n        this.canvasContext.lineWidth = 1;\r\n        this.canvasContext.shadowBlur = 0;\r\n\r\n        this.canvasContext.font = (16) + 'px malgun gothic';\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.draw();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.stop();\r\n    }\r\n\r\n    //Play\r\n    play (){\r\n        if (this.isPlaying)\r\n            return;\r\n\r\n        //Rewind\r\n        if (this.peakOffset === this.peakMaxOffset){\r\n            this.peakOffset = this.peakMinOffset;\r\n        }\r\n        \r\n        this.prevTime = new Date().getTime();\r\n        this.isPlaying = true;\r\n        requestAnimationFrame(this.loop);\r\n\r\n        if (this.props.onPlayStateChanged !== undefined)\r\n            this.props.onPlayStateChanged();\r\n    }\r\n    \r\n    stop(){\r\n        if (!this.isPlaying)\r\n            return;\r\n\r\n        this.isPlaying = false;\r\n\r\n        if (this.props.onPlayStateChanged !== undefined)\r\n            this.props.onPlayStateChanged();\r\n    }\r\n\r\n    togglePlay (){\r\n        if (this.isPlaying)\r\n            this.stop();\r\n        else\r\n            this.play();\r\n    }\r\n    \r\n    //Controls\r\n    setfile(file){\r\n        this.currentFile = file;\r\n\r\n        this.peakArray = file.getFilteredAmpData(50, 10, file.sampleRate);\r\n        /*\r\n        if (file.notchFilterMode == 0){\r\n            this.peakArray = file.getNormalizedAmpData();\r\n        }\r\n        else {\r\n            var notchFreq = file.notchFilterMode == 1 ? 50 : 60;\r\n            this.peakArray = file.getFilteredAmpData(notchFreq, 10, file.sampleRate);\r\n        }\r\n        */\r\n        this.peakOffset = this.peakMinOffset;\r\n        this.peakMaxOffset = this.peakArray[0].length - this.props.count / 2;\r\n        \r\n        var i = 0;\r\n        this.channelEnabled = [];\r\n        for (i = 0; i < this.peakArray.length; i++){\r\n            this.channelEnabled.push(true);\r\n        }\r\n\r\n        var channelData = file.getChannelData();\r\n        this.channelNames = [];\r\n        for (i = 0; i < channelData.length; i++){\r\n            this.channelNames.push(channelData[i].customName);\r\n        }\r\n\r\n        this.scrollBarRef.setHandlePosition(0);\r\n        this.draw();\r\n\r\n        if (this.props.onOffsetChanged !== undefined)\r\n            this.props.onOffsetChanged(0);\r\n    }\r\n\r\n    setchannelsenabled(arr){\r\n        var j = 0;\r\n        for (var i = 0; i < this.channelEnabled.length; i++){\r\n            if (arr[j] === i){\r\n                this.channelEnabled[i] = true;\r\n                if(j < arr.length - 1){\r\n                    j++;\r\n                }\r\n            }\r\n            else{\r\n                this.channelEnabled[i] = false;\r\n            }\r\n        }\r\n\r\n        this.verticalScrollPos = 0;\r\n        this.draw();\r\n    }\r\n\r\n    setoffset(pos){\r\n        this.peakOffset = Math.floor((this.peakMaxOffset + (this.props.count / 2)) * pos) - (this.props.count / 2);\r\n        this.draw();\r\n\r\n        if (this.props.onOffsetChanged !== undefined)\r\n            this.props.onOffsetChanged(pos);\r\n    }\r\n\r\n    addverticalscroll(v){\r\n        var maxPos = 0;\r\n\r\n        for (var i = 0; i < this.channelEnabled.length; i++){\r\n            if (this.channelEnabled[i])\r\n                maxPos++;\r\n        }\r\n        \r\n        var currentHeight = Math.max(50, Math.min(150, (this.props.height - this.timelineHeight - (this.props.margin * maxPos)) / maxPos));\r\n        maxPos = Math.max(0, ((currentHeight + this.props.margin) * maxPos) - (this.props.height - this.timelineHeight));\r\n\r\n        this.verticalScrollPos = Math.max(0, Math.min(maxPos, this.verticalScrollPos + v));\r\n        this.draw();\r\n    }\r\n\r\n    next(){\r\n        this.peakOffset += Math.round((this.currentFile === undefined ? 100 : this.currentFile.sampleRate) * this.props.speed);\r\n        this.peakOffset = Math.min(this.peakOffset, this.peakMaxOffset);\r\n        this.peakOffset = Math.max(this.peakOffset, this.peakMinOffset);\r\n\r\n        this.draw();\r\n        var pos = (this.peakOffset + (this.props.count / 2)) / (this.peakMaxOffset + (this.props.count / 2));\r\n        this.scrollBarRef.setHandlePosition(pos);\r\n\r\n        if (this.props.onOffsetChanged !== undefined)\r\n            this.props.onOffsetChanged(pos);\r\n    }\r\n\r\n    prev(){\r\n        this.peakOffset -= Math.round((this.currentFile === undefined ? 100 : this.currentFile.sampleRate) * this.props.speed);\r\n        this.peakOffset = Math.min(this.peakOffset, this.peakMaxOffset);\r\n        this.peakOffset = Math.max(this.peakOffset, this.peakMinOffset);\r\n\r\n        this.draw();\r\n        var pos = (this.peakOffset + (this.props.count / 2)) / (this.peakMaxOffset + (this.props.count / 2));\r\n        this.scrollBarRef.setHandlePosition(pos);\r\n\r\n        if (this.props.onOffsetChanged !== undefined)\r\n            this.props.onOffsetChanged(pos);\r\n    }\r\n\r\n    //Play Loop\r\n    loop(){\r\n        if (!this.isPlaying)\r\n            return;\r\n        \r\n        var now = new Date().getTime();\r\n        this.deltaTime = now - this.prevTime;\r\n        this.prevTime = now;\r\n        this.update();\r\n        this.draw();\r\n        requestAnimationFrame(this.loop);\r\n    }\r\n\r\n    update (){\r\n        this.peakOffset += Math.round((this.currentFile === undefined ? 100 : this.currentFile.sampleRate) * (this.deltaTime * 0.001) * this.props.speed);\r\n\r\n        if (this.peakOffset > this.peakMaxOffset){\r\n            this.peakOffset = this.peakMaxOffset;\r\n            this.stop();\r\n        }\r\n\r\n        if (this.props.onOffsetChanged !== undefined)\r\n            this.props.onOffsetChanged((this.peakOffset + (this.props.count / 2)) / this.peakMaxOffset);\r\n\r\n        if (this.scrollBarRef != null)\r\n            this.scrollBarRef.setHandlePosition((this.peakOffset + (this.props.count / 2)) / (this.peakMaxOffset + (this.props.count / 2)));\r\n    }\r\n\r\n    draw (){\r\n        if (this.peakArray[0].length < 2)\r\n            return;\r\n        \r\n        var channelCount = this.props.channels > this.peakArray.length ? this.peakArray.length : this.props.channels;\r\n\r\n        var len = this.props.count < this.peakArray[0].length ? this.props.count : this.peakArray[0].length;\r\n        var width = this.canvasRef.current.offsetWidth - this.textWidth;\r\n        var widthStep = width / this.props.count;\r\n        var currentHeight = Math.max(50, Math.min(150, (this.props.height - this.timelineHeight - (this.props.margin * channelCount)) / channelCount));\r\n        var halfHeight = currentHeight / 2;\r\n\r\n        var startX = widthStep * Math.min(this.peakOffset, 0) * -1 + this.textWidth;\r\n        var startY = 0;\r\n        var topMargin = Math.max(this.props.height - this.timelineHeight - ((currentHeight + this.props.margin) * channelCount), 0) / 2;\r\n        \r\n        this.canvasContext.strokeStyle = this.props.strokeColor;\r\n        this.canvasContext.fillStyle = 'black';\r\n        this.canvasContext.fillRect(0, 0, width + this.textWidth, this.props.height);\r\n        //this.canvasContext.clearRect(0, 0, width, height);\r\n        var i = 0;\r\n\r\n        //Draw Graphs\r\n        var currentIdx = 0;\r\n        var x = 0;\r\n        var y = 0;\r\n\r\n        this.canvasContext.fillStyle = 'white';\r\n        this.canvasContext.lineWidth = 1;\r\n        this.canvasContext.beginPath();\r\n\r\n        var c = 0;\r\n        var drawnChannels = 0;\r\n        for (c = 0; c < this.peakArray.length; c++){\r\n            if (!this.channelEnabled[c])\r\n                continue;\r\n            \r\n            startY = halfHeight * (drawnChannels * 2 + 1) + (this.props.margin * drawnChannels) + topMargin + this.timelineHeight - this.verticalScrollPos;\r\n            \r\n            //Draw channel text\r\n            this.canvasContext.fillText(this.channelNames[c], 0, startY);\r\n            this.canvasContext.moveTo(startX, (this.peakArray[c][Math.max(this.peakOffset, 0)] * halfHeight) + startY);\r\n\r\n            //Draw graph\r\n            for(i = 1; i < len; i++){\r\n                currentIdx = Math.max(i + this.peakOffset, i);\r\n                if (currentIdx > this.peakArray[c].length)\r\n                    continue;\r\n\r\n                x = (widthStep * i) + startX + 0.1;\r\n                y = (this.peakArray[c][currentIdx] * halfHeight) + startY + 0.1;\r\n                this.canvasContext.lineTo(x, y);\r\n            }\r\n\r\n            drawnChannels++;\r\n        }\r\n        this.canvasContext.stroke();\r\n        \r\n        //Draw Grids\r\n        this.canvasContext.beginPath();\r\n        this.canvasContext.strokeStyle = 'red';\r\n        this.canvasContext.lineWidth = 0.5;\r\n        this.canvasContext.moveTo(width / 2 + this.textWidth, this.timelineHeight);\r\n        this.canvasContext.lineTo (width / 2 + this.textWidth, this.props.height);\r\n        for (c = 0; c < channelCount; c++){\r\n            this.canvasContext.moveTo(this.textWidth, c * (currentHeight + this.props.margin) + this.timelineHeight + topMargin - this.verticalScrollPos);\r\n            this.canvasContext.lineTo(this.textWidth + width, c * (currentHeight + this.props.margin) + this.timelineHeight + topMargin - this.verticalScrollPos);\r\n            \r\n            this.canvasContext.moveTo(this.textWidth, c * (currentHeight + this.props.margin) + currentHeight + this.timelineHeight + topMargin - this.verticalScrollPos);\r\n            this.canvasContext.lineTo(this.textWidth + width, c * (currentHeight + this.props.margin) + currentHeight + this.timelineHeight + topMargin - this.verticalScrollPos);\r\n        }\r\n        this.canvasContext.stroke();\r\n\r\n        //Draw timeline\r\n        this.canvasContext.fillStyle = 'black';\r\n        this.canvasContext.fillRect(0, 0, width + this.textWidth, this.timelineHeight);\r\n        this.canvasContext.fillStyle = 'white';\r\n\r\n        var currentTime = 0;\r\n\r\n        if (this.currentFile){\r\n            for (i = 0; i < len; i++){\r\n                currentIdx = Math.max(i + this.peakOffset, i);\r\n                currentTime = currentIdx / this.currentFile.sampleRate;\r\n                currentTime = Math.floor(currentTime * 100) * 0.01;\r\n\r\n                if (currentIdx % Math.floor(this.currentFile.sampleRate / 100) === 0){\r\n                    this.canvasContext.fillText(currentTime.toString(), startX + (i * widthStep), this.timelineHeight * 0.5);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    getCanvas(){\r\n        return this.canvasRef.current;\r\n    }\r\n\r\n    render(){\r\n        var style={\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            height: '95%'\r\n        };\r\n        \r\n        this.peakMaxOffset = this.peakArray[0].length - this.props.count / 2;\r\n        this.peakMinOffset = this.props.count / -2;\r\n\r\n        return (\r\n        <div style={style}>\r\n            <canvas ref={this.canvasRef} style={style} id='graphCanvas'\r\n            width={this.props.width} height={this.props.height/*this.props.channels * (this.props.height + this.props.margin) + this.timelineHeight*/}/>\r\n            <ScrollBar ref={ref=>{this.scrollBarRef = ref;}}\r\n            width={this.props.width} height='20'\r\n            handleWidth={this.props.count / (this.peakArray[0].length + this.props.count / 2)}\r\n            onDragStart={this.stop}\r\n            onDrag={this.setoffset}/>\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default CanvasGraph;"]},"metadata":{},"sourceType":"module"}