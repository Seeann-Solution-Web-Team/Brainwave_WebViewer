{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\tank6\\\\Desktop\\\\React\\\\brainwave_webviewer\\\\src\\\\pages\\\\CanvasGraph.js\";\nimport React from 'react';\nimport ScrollBar from './ScrollBar';\n\nclass CanvasGraph extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = /*#__PURE__*/React.createRef();\n    this.canvasContext = null;\n    this.scrollBarRef = null;\n    this.isPlaying = false; //Bind Functions\n\n    this.play = this.play.bind(this);\n    this.stop = this.stop.bind(this);\n    this.setoffset = this.setoffset.bind(this);\n    this.setpeaks = this.setpeaks.bind(this);\n    var channelCount = props.channels;\n    this.peakArray = [];\n    this.peakOffset = 0; //Create Test Samples\n\n    var c;\n    var i;\n\n    for (c = 0; c < channelCount; c++) {\n      this.peakArray.push([]);\n\n      for (i = 0; i < 100000; i++) {\n        this.peakArray[c].push(0);\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.canvasContext = this.canvasRef.current.getContext('2d', {\n      alpha: false\n    });\n    this.canvasContext.fillStyle = 'black';\n    this.canvasContext.lineWidth = 1;\n    this.canvasContext.shadowBlur = 0;\n    this.play();\n  }\n\n  componentWillUnmount() {\n    this.stop();\n  } //Play\n\n\n  play() {\n    //Rewind\n    if (this.peakOffset === this.peakArray[0].length - this.props.count - 1) {\n      for (var i = 0; i < this.props.channels; i++) {\n        this.peakOffset = 0;\n      }\n    }\n\n    this.timer = setInterval(() => {\n      this.update();\n      this.draw();\n    }, 5);\n    this.isPlaying = true;\n    if (this.props.onPlayStateChanged !== undefined) this.props.onPlayStateChanged();\n  }\n\n  stop() {\n    if (this.timer == null) return;\n    clearInterval(this.timer);\n    this.timer = null;\n    this.isPlaying = false;\n    if (this.props.onPlayStateChanged !== undefined) this.props.onPlayStateChanged();\n  }\n\n  togglePlay() {\n    if (this.isPlaying) this.stop();else this.play();\n  } //Controls\n\n\n  setpeaks(arr) {\n    this.peakArray = arr;\n    this.peakOffset = 0;\n    this.scrollBarRef.setHandlePosition(0);\n    this.draw();\n    if (this.props.onOffsetChanged !== undefined) this.props.onOffsetChanged(0);\n  }\n\n  setoffset(pos) {\n    this.peakOffset = Math.floor((this.peakArray[0].length - this.props.count - 1) * pos);\n    this.draw();\n    if (this.props.onOffsetChanged !== undefined) this.props.onOffsetChanged(pos);\n  } //Play Loop\n\n\n  update() {\n    this.peakOffset += this.props.speed;\n\n    if (this.peakOffset > this.peakArray[0].length - this.props.count - 1) {\n      this.peakOffset = this.peakArray[0].length - this.props.count - 1;\n      this.stop();\n    }\n\n    if (this.props.onOffsetChanged !== undefined) this.props.onOffsetChanged(this.peakOffset / (this.peakArray[0].length - this.props.count - 1));\n    if (this.scrollBarRef != null) this.scrollBarRef.setHandlePosition(this.peakOffset / (this.peakArray[0].length - this.props.count - 1));\n  }\n\n  draw() {\n    if (this.peakArray[0].length < 2) return;\n    var channelCount = this.props.channels > this.peakArray.length ? this.peakArray.length : this.props.channels;\n    var len = this.props.count < this.peakArray[0].length ? this.props.count : this.peakArray[0].length;\n    var width = this.canvasRef.current.offsetWidth;\n    var height = this.canvasRef.current.offsetHeight;\n    var halfHeight = height / 2 / channelCount;\n    var widthStep = width / this.props.count;\n    var startX = width - len * widthStep + width * 0.5;\n    var startY = 0;\n    this.canvasContext.strokeStyle = this.props.strokeColor;\n    this.canvasContext.fillRect(0, 0, width, height); //this.canvasContext.clearRect(0, 0, width, height);\n\n    var currentIdx = 0;\n    var x = 0;\n    var y = 0;\n    this.canvasContext.beginPath();\n\n    for (var c = 0; c < channelCount; c++) {\n      startY = halfHeight * (c * 2 + 1) + this.props.margin * c;\n      this.canvasContext.moveTo(startX, this.peakArray[c][0] * halfHeight + startY);\n\n      for (var i = 1; i < len; i++) {\n        currentIdx = i + this.peakOffset;\n        if (currentIdx < 0 || currentIdx > this.peakArray[i].length) continue;\n        x = widthStep * i + startX;\n        y = this.peakArray[c][currentIdx] * halfHeight + startY;\n        this.canvasContext.lineTo(x, y);\n      }\n    }\n\n    this.canvasContext.stroke();\n  }\n\n  getCanvas() {\n    return this.canvasRef.current;\n  }\n\n  render() {\n    var style = {\n      display: 'flex',\n      flexDirection: 'column'\n    };\n    if (this.canvasRef.current != null) this.draw();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: style,\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: this.canvasRef,\n        width: this.props.width,\n        height: this.props.channels * this.props.height + this.props.margin * (this.props.channels - 1)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ScrollBar, {\n        ref: ref => {\n          this.scrollBarRef = ref;\n        },\n        width: this.props.width,\n        height: \"20\",\n        handleWidth: this.props.count / this.peakArray[0].length,\n        onDragStart: this.stop,\n        onDrag: this.setoffset\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default CanvasGraph;","map":{"version":3,"sources":["C:/Users/tank6/Desktop/React/brainwave_webviewer/src/pages/CanvasGraph.js"],"names":["React","ScrollBar","CanvasGraph","Component","constructor","props","canvasRef","createRef","canvasContext","scrollBarRef","isPlaying","play","bind","stop","setoffset","setpeaks","channelCount","channels","peakArray","peakOffset","c","i","push","componentDidMount","current","getContext","alpha","fillStyle","lineWidth","shadowBlur","componentWillUnmount","length","count","timer","setInterval","update","draw","onPlayStateChanged","undefined","clearInterval","togglePlay","arr","setHandlePosition","onOffsetChanged","pos","Math","floor","speed","len","width","offsetWidth","height","offsetHeight","halfHeight","widthStep","startX","startY","strokeStyle","strokeColor","fillRect","currentIdx","x","y","beginPath","margin","moveTo","lineTo","stroke","getCanvas","render","style","display","flexDirection","ref"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ScrollBar from './ScrollBar';\r\n\r\nclass CanvasGraph extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.canvasRef = React.createRef();\r\n        this.canvasContext = null;\r\n        this.scrollBarRef = null;\r\n        this.isPlaying = false;\r\n\r\n        //Bind Functions\r\n        this.play = this.play.bind(this);\r\n        this.stop = this.stop.bind(this);\r\n        this.setoffset = this.setoffset.bind(this);\r\n        this.setpeaks = this.setpeaks.bind(this);\r\n\r\n        var channelCount = props.channels;\r\n        this.peakArray = [];\r\n        this.peakOffset = 0;\r\n\r\n        //Create Test Samples\r\n        var c;\r\n        var i;\r\n        for (c = 0; c < channelCount; c++){\r\n            this.peakArray.push([]);\r\n\r\n            for (i = 0; i < 100000; i++){\r\n                this.peakArray[c].push(0);\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.canvasContext = this.canvasRef.current.getContext('2d', {alpha: false});\r\n        this.canvasContext.fillStyle = 'black';\r\n        this.canvasContext.lineWidth = 1;\r\n        this.canvasContext.shadowBlur = 0;\r\n        this.play();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.stop();\r\n    }\r\n\r\n    //Play\r\n    play (){\r\n        //Rewind\r\n        if (this.peakOffset === this.peakArray[0].length - this.props.count - 1){\r\n            for(var i = 0; i < this.props.channels; i++){\r\n                this.peakOffset = 0; \r\n            }\r\n        }\r\n        \r\n        this.timer = setInterval(()=>{this.update(); this.draw();}, 5);\r\n        this.isPlaying = true;\r\n\r\n        if (this.props.onPlayStateChanged !== undefined)\r\n            this.props.onPlayStateChanged();\r\n    }\r\n\r\n    stop(){\r\n        if (this.timer == null)\r\n            return;\r\n\r\n        clearInterval(this.timer);\r\n        this.timer = null;\r\n        this.isPlaying = false;\r\n\r\n        if (this.props.onPlayStateChanged !== undefined)\r\n            this.props.onPlayStateChanged();\r\n    }\r\n\r\n    togglePlay (){\r\n        if (this.isPlaying)\r\n            this.stop();\r\n        else\r\n            this.play();\r\n    }\r\n    \r\n    //Controls\r\n    setpeaks(arr){\r\n        this.peakArray = arr;\r\n        this.peakOffset = 0;\r\n\r\n        this.scrollBarRef.setHandlePosition(0);\r\n        this.draw();\r\n\r\n        if (this.props.onOffsetChanged !== undefined)\r\n            this.props.onOffsetChanged(0);\r\n    }\r\n\r\n    setoffset(pos){\r\n        this.peakOffset = Math.floor((this.peakArray[0].length - this.props.count - 1) * pos);\r\n        this.draw();\r\n\r\n        if (this.props.onOffsetChanged !== undefined)\r\n            this.props.onOffsetChanged(pos);\r\n    }\r\n\r\n    //Play Loop\r\n    update (){\r\n        this.peakOffset += this.props.speed;\r\n\r\n        if (this.peakOffset > this.peakArray[0].length - this.props.count - 1){\r\n            this.peakOffset = this.peakArray[0].length - this.props.count - 1;\r\n            this.stop();\r\n        }\r\n\r\n        if (this.props.onOffsetChanged !== undefined)\r\n            this.props.onOffsetChanged(this.peakOffset / (this.peakArray[0].length - this.props.count - 1));\r\n\r\n        if (this.scrollBarRef != null)\r\n            this.scrollBarRef.setHandlePosition(this.peakOffset/ (this.peakArray[0].length - this.props.count - 1));\r\n    }\r\n\r\n    draw (){\r\n        if (this.peakArray[0].length < 2)\r\n            return;\r\n        \r\n        var channelCount = this.props.channels > this.peakArray.length ? this.peakArray.length : this.props.channels;\r\n\r\n        var len = this.props.count < this.peakArray[0].length ? this.props.count : this.peakArray[0].length;\r\n        var width = this.canvasRef.current.offsetWidth;\r\n        var height = this.canvasRef.current.offsetHeight;\r\n        var halfHeight = height / 2 / channelCount;\r\n        var widthStep = width / this.props.count;\r\n\r\n        var startX = width - (len * widthStep) + (width * 0.5);\r\n        var startY = 0;\r\n        \r\n        this.canvasContext.strokeStyle = this.props.strokeColor;\r\n        this.canvasContext.fillRect(0, 0, width, height);\r\n        //this.canvasContext.clearRect(0, 0, width, height);\r\n\r\n        var currentIdx = 0;\r\n        var x = 0;\r\n        var y = 0;\r\n\r\n        this.canvasContext.beginPath();\r\n        for (var c = 0; c < channelCount; c++){\r\n            startY = halfHeight * (c * 2 + 1) + (this.props.margin * c);\r\n            this.canvasContext.moveTo(startX, (this.peakArray[c][0] * halfHeight) + startY);\r\n\r\n            for(var i = 1; i < len; i++){\r\n                currentIdx = (i + this.peakOffset);\r\n                if (currentIdx < 0 || currentIdx > this.peakArray[i].length)\r\n                    continue;\r\n\r\n                x = (widthStep * i) + startX;\r\n                y = (this.peakArray[c][currentIdx] * halfHeight) + startY;\r\n                this.canvasContext.lineTo(x, y);\r\n            }\r\n        }\r\n        this.canvasContext.stroke();\r\n    }\r\n\r\n    getCanvas(){\r\n        return this.canvasRef.current;\r\n    }\r\n\r\n    render(){\r\n        var style={\r\n            display: 'flex',\r\n            flexDirection: 'column'\r\n        };\r\n\r\n        if (this.canvasRef.current != null)\r\n            this.draw();\r\n\r\n        return (\r\n        <div style={style}>\r\n            <canvas ref={this.canvasRef} \r\n            width={this.props.width} height={this.props.channels * this.props.height + (this.props.margin * (this.props.channels - 1))}/>\r\n            <ScrollBar ref={ref=>{this.scrollBarRef = ref;}}\r\n            width={this.props.width} height='20'\r\n            handleWidth={this.props.count / this.peakArray[0].length}\r\n            onDragStart={this.stop}\r\n            onDrag={this.setoffset}/>\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default CanvasGraph;"]},"metadata":{},"sourceType":"module"}