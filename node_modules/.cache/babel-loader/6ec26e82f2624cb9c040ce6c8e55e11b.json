{"ast":null,"code":"class RHSFile {\n  constructor() {\n    this.dataView = null;\n    this.isInitialized = false;\n    this.filePos = -1;\n    this.onProgress = this.onProgress.bind(this);\n    this.onLoad = this.onLoad.bind(this);\n    this.onError = this.onError.bind(this);\n  }\n\n  load(path, onLoadedCallback, onProgressCallback) {\n    console.log(\"loading \" + path); //Test\n\n    this.request = new XMLHttpRequest();\n    this.request.open(\"GET\", \"http://localhost:3001/sample/\" + path, true);\n    this.request.responseType = \"arraybuffer\";\n    this.request.onprogress = this.onProgress;\n    this.request.onload = this.onLoad;\n    this.request.onerror = this.onError;\n    this.request.overrideMimeType(\"text/plain; charset=x-user-defined\");\n    this.request.send(null);\n    this.path = path;\n    this.onLoadedCallback = onLoadedCallback;\n    this.onProgressCallback = onProgressCallback;\n  } //#####Events#####\n\n\n  onProgress(e) {\n    var percentage = e.loaded / e.total * 100; //console.log(e.loaded + ' / ' + e.total + \" (\" + percentage + '%)');\n\n    if (this.onProgressCallback !== undefined) this.onProgressCallback(this, percentage);\n  }\n\n  onLoad(e) {\n    if (this.request.readyState === 4) {\n      if (this.request.status === 200 || this.request.status === 0) {\n        this.dataView = new DataView(this.request.response);\n        this.dataLength = this.dataView.byteLength;\n        this.filePos = 0;\n        console.log('file loaded successfully');\n        this.parse();\n        if (this.onLoadedCallback !== undefined) this.onLoadedCallback(this);\n      }\n    } else {\n      alert('Failed to read file');\n    }\n  }\n\n  onError(e) {\n    console.log('Error : ' + this.request.statusText);\n  }\n\n  parse() {\n    //Validate Magin-number\n    var magicNum = [0xD6, 0x91, 0x27, 0xAC];\n    var nmValues = this.getBytes(4);\n    var i = 0;\n    var j = 0;\n\n    for (i = 0; i < nmValues.length; i++) {\n      if (magicNum[i] !== nmValues[i]) {\n        console.log('Wrong magic number detected');\n        return;\n      }\n    }\n\n    console.log('Magic number found'); //==Load header==\n\n    this.version = this.getInt16();\n    this.secondaryVersion = this.getInt16();\n    this.sampleRate = this.getSingle();\n    this.DSPEnabled = this.getInt16();\n    this.actialDSPCutoffFrequency = this.getSingle();\n    this.actualLowerBandwidth = this.getSingle();\n    this.actualLowerSettleBandwidth = this.getSingle();\n    this.actualUpperBandwidth = this.getSingle();\n    this.desiredDSPCutoffFrequency = this.getSingle();\n    this.desiredLowerBandwidth = this.getSingle();\n    this.desiredLowerSettleBandwidth = this.getSingle();\n    this.desiredUpperBandwidth = this.getSingle();\n    this.notchFilterMode = this.getInt16();\n    this.desiredImpedanceTestFrequency = this.getSingle();\n    this.actualImpedanceTestFrequency = this.getSingle();\n    this.ampSettleMode = this.getInt16();\n    this.cahrgeRecoveryMode = this.getInt16();\n    this.stimStepSize = this.getSingle();\n    this.chargeRecoveryCurrentLimit = this.getSingle();\n    this.chargeRecoveryTargetVoltage = this.getSingle();\n    this.note1 = this.getQString();\n    this.note2 = this.getQString();\n    this.note3 = this.getQString();\n    this.DCAmplifierDataSaved = this.getInt16();\n    this.boardName = this.getInt16();\n    this.referenceChannelName = this.getQString();\n    this.signalGroupCount = this.getInt16();\n    console.log('version: ' + this.version);\n    console.log('sample rate: ' + this.sampleRate);\n    console.log('DSP Enabled: ' + this.DSPEnabled); //==Read signal group and channel descriptions==\n\n    this.signalGroups = [];\n    var ampCount = 0;\n    var adcCount = 0;\n    var dacCount = 0;\n    var digInCount = 0;\n    var digOutCount = 0;\n\n    for (i = 0; i < this.signalGroupCount; i++) {\n      //Push new signal group\n      this.signalGroups.push({\n        name: this.getQString(),\n        prefix: this.getQString(),\n        enabled: this.getInt16(),\n        channelCount: this.getInt16(),\n        amplifierChannelCount: this.getInt16(),\n        channels: []\n      }); //read channel descriptions\n\n      var count = this.signalGroups[i].channelCount;\n\n      for (j = 0; j < count; j++) {\n        this.signalGroups[i].channels.push({\n          nativeName: this.getQString(),\n          customName: this.getQString(),\n          nativeOrder: this.getInt16(),\n          customOrder: this.getInt16(),\n          signalType: this.getInt16(),\n          enabled: this.getInt16(),\n          chipChannel: this.getInt16(),\n          commandStream: this.getInt16(),\n          boardStream: this.getInt16(),\n          spikeScopeVoltageTriggerMode: this.getInt16(),\n          spikeScopeVoltageThreshold: this.getInt16(),\n          spikeScopeDigitalTriggerChannel: this.getInt16(),\n          spikeScopeDigitalEdgePolarity: this.getInt16(),\n          electrodeImpedanceMagnitude: this.getSingle(),\n          electrodeImpedancePhase: this.getSingle()\n        });\n\n        if (this.signalGroups[i].channels[j].enabled) {\n          var type = this.signalGroups[i].channels[j].signalType;\n          if (type === 0) ampCount++;else if (type === 3) adcCount++;else if (type === 4) dacCount++;else if (type === 5) digInCount++;else if (type === 6) digOutCount++;\n        }\n      }\n    }\n\n    console.log('amplifier channels: ' + ampCount);\n    console.log('ADC channels: ' + adcCount);\n    console.log('DAC channels: ' + dacCount);\n    console.log('Digital Input channels: ' + digInCount);\n    console.log('Digital Output channels: ' + digOutCount); //==Read Data Blocks==\n\n    var blockSize = this.getDataBlockSize(this.DCAmplifierDataSaved === 1, ampCount, adcCount, dacCount, digInCount, digOutCount);\n    var blockCount = Math.floor((this.dataLength - this.filePos) / blockSize);\n    console.log('Data Block Size : ' + blockSize + ', Data Block Count : ' + blockCount);\n    var timestamps = [];\n    var ampData = [];\n    var dcAmpData = [];\n    var stimData = [];\n    var adcData = [];\n    var dacData = [];\n    var digInData = [];\n    var digOutData = [];\n\n    for (i = 0; i < ampCount; i++) ampData.push([]);\n\n    for (i = 0; i < ampCount; i++) dcAmpData.push([]);\n\n    for (i = 0; i < ampCount; i++) stimData.push([]);\n\n    for (i = 0; i < adcCount; i++) adcData.push([]);\n\n    for (i = 0; i < dacCount; i++) dacData.push([]);\n\n    var k = 0;\n\n    for (i = 0; i < blockCount; i++) {\n      //Read one Data Block\n      //Timestamps\n      for (j = 0; j < 128; j++) {\n        timestamps.push(this.getInt32());\n      } //Amplifier\n\n\n      if (ampCount > 0) {\n        for (j = 0; j < ampCount; j++) {\n          for (k = 0; k < 128; k++) {\n            ampData[j].push(this.getInt16());\n          }\n        }\n\n        if (this.DCAmplifierDataSaved === 1) {\n          for (j = 0; j < ampCount; j++) {\n            for (k = 0; k < 128; k++) {\n              dcAmpData[j].push(this.getInt16());\n            }\n          }\n        }\n\n        for (j = 0; j < ampCount; j++) {\n          for (k = 0; k < 128; k++) {\n            stimData[j].push(this.getInt16());\n          }\n        }\n      } //ADC\n\n\n      for (j = 0; j < adcCount; j++) {\n        for (k = 0; k < 128; k++) {\n          adcData[j].push(this.getInt16());\n        }\n      } //DAC\n\n\n      for (j = 0; j < dacCount; j++) {\n        for (k = 0; k < 128; k++) {\n          dacData[j].push(this.getInt16());\n        }\n      } //Board digital input\n\n\n      if (digInCount > 0) {\n        for (j = 0; j < 128; j++) {\n          digInData.push(this.getInt16());\n        }\n      } //Board digital output\n\n\n      if (digOutCount > 0) {\n        for (j = 0; j < 128; j++) {\n          digOutData.push(this.getInt16());\n        }\n      }\n    }\n\n    this.timestamps = timestamps;\n    this.ampData = ampData;\n    this.dcAmpData = dcAmpData;\n    this.stimData = stimData;\n    this.adcData = adcData;\n    this.dacData = dacData;\n    this.digInData = digInData;\n    this.digOutData = digOutData;\n    this.recordLength = Math.round(blockCount * 128 / this.sampleRate);\n    console.log('record length is ' + this.recordLength + 'seconds');\n    this.isInitialized = true;\n    console.log('rhs file is loaded successfully');\n  } //#####Get data functions#####\n  //little-endian\n\n\n  getBytes(count) {\n    var array = [];\n\n    for (var i = count - 1; i > -1; i--) {\n      array.push(this.dataView.getUint8(this.filePos + i));\n    }\n\n    this.filePos += count;\n    return array;\n  }\n\n  getUint16() {\n    this.filePos += 2;\n    return this.dataView.getUint16(this.filePos - 2, true);\n  }\n\n  getInt16() {\n    this.filePos += 2;\n    return this.dataView.getInt16(this.filePos - 2, true);\n  }\n\n  getUint32() {\n    this.filePos += 4;\n    return this.dataView.getUint32(this.filePos - 4, true);\n  }\n\n  getInt32() {\n    this.filePos += 4;\n    return this.dataView.getInt32(this.filePos - 4, true);\n  }\n\n  getSingle() {\n    this.filePos += 4;\n    return this.dataView.getFloat32(this.filePos - 4, true);\n  }\n\n  getDouble() {\n    this.filePos += 8;\n    return this.dataView.getFloat64(this.filePos - 8, true);\n  }\n\n  getQString() {\n    var length = this.dataView.getUint32(this.filePos, true);\n    this.filePos += 4;\n    if (length < 1) return \"\";\n    var arr = [];\n    length = length / 2;\n\n    for (var i = 0; i < length; i++) {\n      arr = arr.concat(this.getBytes(2));\n    }\n\n    var buffer = new Uint8Array(arr);\n    return new TextDecoder('utf-16be').decode(buffer);\n  }\n\n  getDataBlockSize(isDcAmpSaved, ampCount, adcCount, dacCount, digInCount, digOutCount) {\n    var N = 128;\n    var size = N * 4; //timestamp\n\n    size += N * 2 * ampCount;\n    if (isDcAmpSaved) size += N * 2 * ampCount;\n    size += N * 2 * ampCount;\n    size += N * 2 * adcCount;\n    size += N * 2 * dacCount;\n    if (digInCount > 0) size += N * 2;\n    if (digOutCount > 0) size += N * 2;\n    return size;\n  }\n\n  getRawAmpData() {\n    var nor = [];\n\n    for (var i = 0; i < this.ampData.length; i++) {\n      nor.push([]);\n\n      for (var j = 0; j < this.timestamps.length; j++) {\n        nor[i].push(this.ampData[i][j]);\n      }\n    }\n\n    return nor;\n  }\n\n  getNormalizedAmpData() {\n    var nor = [];\n\n    for (var i = 0; i < this.ampData.length; i++) {\n      var max = this.max(this.ampData[i]);\n      var min = this.min(this.ampData[i]);\n      var mmax = Math.max(max, Math.abs(min));\n      nor.push([]);\n\n      for (var j = 0; j < this.timestamps.length; j++) {\n        nor[i].push(this.ampData[i][j] / mmax);\n      }\n    }\n\n    return nor;\n  }\n\n  getFilteredAmpData(notchFreq, bandwidth, sampleFreq) {\n    var arr = this.getRawAmpData();\n    var filtered = []; // Calculate biquad IIR filter coefficients.\n\n    var d = Math.exp(-Math.PI * bandwidth / sampleFreq);\n    var a1 = -(1.0 + d * d) * Math.cos(2.0 * Math.PI * notchFreq / sampleFreq);\n    var a2 = d * d;\n    var b0 = (1 + d * d) / 2.0;\n    var b1 = a1;\n    var b2 = b0;\n    var value = 0;\n\n    for (var c = 0; c < arr.length; c++) {\n      filtered.push([]);\n      filtered[c].push(0);\n      filtered[c].push(0);\n\n      for (var i = 2; i < arr[c].length; i++) {\n        value = b0 * arr[c][i] + b1 * arr[c][i - 1] + b2 * arr[c][i - 2] - a1 * filtered[c][i - 1] - a2 * filtered[c][i - 2];\n      }\n    }\n\n    var normalized = [];\n\n    for (c = 0; c < arr.length; c++) {\n      var max = this.max(arr[c]);\n      var min = this.min(arr[c]);\n      var mmax = Math.max(max, Math.abs(min));\n      normalized.push([]);\n\n      for (i = 0; i < arr[c].length; i++) {\n        normalized[i].push(arr[c][i] / mmax);\n      }\n    }\n\n    return nor;\n  }\n\n  getChannelData() {\n    var arr = [];\n    var i = 0;\n    var j = 0;\n\n    for (i = 0; i < this.signalGroups.length; i++) {\n      for (j = 0; j < this.signalGroups[i].channels.length; j++) {\n        if (this.signalGroups[i].channels[j].signalType === 0) {\n          arr.push(this.signalGroups[i].channels[j]);\n        }\n      }\n    }\n\n    return arr;\n  }\n\n  max(arr) {\n    var m = -100000;\n\n    for (var i = 0; i < arr.length; i++) {\n      if (arr[i] > m) m = arr[i];\n    }\n\n    return m;\n  }\n\n  min(arr) {\n    var m = 100000;\n\n    for (var i = 0; i < arr.length; i++) {\n      if (arr[i] < m) m = arr[i];\n    }\n\n    return m;\n  }\n\n}\n\nexport default RHSFile;","map":{"version":3,"sources":["C:/Users/tank6/Desktop/React/brainwave_webviewer/src/pages/RHSFile.js"],"names":["RHSFile","constructor","dataView","isInitialized","filePos","onProgress","bind","onLoad","onError","load","path","onLoadedCallback","onProgressCallback","console","log","request","XMLHttpRequest","open","responseType","onprogress","onload","onerror","overrideMimeType","send","e","percentage","loaded","total","undefined","readyState","status","DataView","response","dataLength","byteLength","parse","alert","statusText","magicNum","nmValues","getBytes","i","j","length","version","getInt16","secondaryVersion","sampleRate","getSingle","DSPEnabled","actialDSPCutoffFrequency","actualLowerBandwidth","actualLowerSettleBandwidth","actualUpperBandwidth","desiredDSPCutoffFrequency","desiredLowerBandwidth","desiredLowerSettleBandwidth","desiredUpperBandwidth","notchFilterMode","desiredImpedanceTestFrequency","actualImpedanceTestFrequency","ampSettleMode","cahrgeRecoveryMode","stimStepSize","chargeRecoveryCurrentLimit","chargeRecoveryTargetVoltage","note1","getQString","note2","note3","DCAmplifierDataSaved","boardName","referenceChannelName","signalGroupCount","signalGroups","ampCount","adcCount","dacCount","digInCount","digOutCount","push","name","prefix","enabled","channelCount","amplifierChannelCount","channels","count","nativeName","customName","nativeOrder","customOrder","signalType","chipChannel","commandStream","boardStream","spikeScopeVoltageTriggerMode","spikeScopeVoltageThreshold","spikeScopeDigitalTriggerChannel","spikeScopeDigitalEdgePolarity","electrodeImpedanceMagnitude","electrodeImpedancePhase","type","blockSize","getDataBlockSize","blockCount","Math","floor","timestamps","ampData","dcAmpData","stimData","adcData","dacData","digInData","digOutData","k","getInt32","recordLength","round","array","getUint8","getUint16","getUint32","getFloat32","getDouble","getFloat64","arr","concat","buffer","Uint8Array","TextDecoder","decode","isDcAmpSaved","N","size","getRawAmpData","nor","getNormalizedAmpData","max","min","mmax","abs","getFilteredAmpData","notchFreq","bandwidth","sampleFreq","filtered","d","exp","PI","a1","cos","a2","b0","b1","b2","value","c","normalized","getChannelData","m"],"mappings":"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","sourcesContent":["class RHSFile{\r\n    constructor(){\r\n        this.dataView = null;\r\n        this.isInitialized = false;\r\n        this.filePos = -1;\r\n        this.onProgress = this.onProgress.bind(this);\r\n        this.onLoad = this.onLoad.bind(this);\r\n        this.onError = this.onError.bind(this);\r\n    }\r\n\r\n    load (path, onLoadedCallback, onProgressCallback){\r\n        console.log(\"loading \" + path);\r\n\r\n        //Test\r\n        this.request = new XMLHttpRequest();\r\n        this.request.open(\"GET\", \"http://localhost:3001/sample/\" + path, true);\r\n        this.request.responseType = \"arraybuffer\";\r\n        this.request.onprogress = this.onProgress;\r\n        this.request.onload = this.onLoad;\r\n        this.request.onerror = this.onError;\r\n        this.request.overrideMimeType(\"text/plain; charset=x-user-defined\");\r\n        this.request.send(null);\r\n\r\n        this.path = path;\r\n        this.onLoadedCallback = onLoadedCallback;\r\n        this.onProgressCallback = onProgressCallback;\r\n    }\r\n\r\n    //#####Events#####\r\n    onProgress(e){\r\n        var percentage = e.loaded / e.total * 100;\r\n        //console.log(e.loaded + ' / ' + e.total + \" (\" + percentage + '%)');\r\n\r\n        if (this.onProgressCallback !== undefined)\r\n            this.onProgressCallback(this, percentage);\r\n    }\r\n\r\n    onLoad (e){\r\n        if(this.request.readyState === 4) {\r\n            if(this.request.status === 200 || this.request.status === 0) {\r\n                this.dataView = new DataView(this.request.response);\r\n                this.dataLength = this.dataView.byteLength;\r\n                this.filePos = 0;\r\n                console.log('file loaded successfully');\r\n                this.parse();\r\n\r\n                if (this.onLoadedCallback !== undefined)\r\n                    this.onLoadedCallback(this);\r\n            }\r\n        }\r\n        else{\r\n            alert('Failed to read file');\r\n        }\r\n    }\r\n\r\n    onError (e){\r\n        console.log('Error : ' + this.request.statusText);\r\n    }\r\n\r\n    parse (){\r\n        //Validate Magin-number\r\n        var magicNum = [0xD6, 0x91, 0x27, 0xAC];\r\n        var nmValues = this.getBytes(4);\r\n        var i = 0;\r\n        var j = 0;\r\n        \r\n        for (i = 0; i < nmValues.length; i++){            \r\n            if (magicNum[i] !== nmValues[i]){\r\n                console.log('Wrong magic number detected');\r\n                return;\r\n            }\r\n        }\r\n        console.log('Magic number found');\r\n\r\n        //==Load header==\r\n        this.version = this.getInt16();\r\n        this.secondaryVersion = this.getInt16();\r\n        this.sampleRate = this.getSingle();\r\n\r\n        this.DSPEnabled = this.getInt16();\r\n\r\n        this.actialDSPCutoffFrequency = this.getSingle();\r\n        this.actualLowerBandwidth = this.getSingle();\r\n        this.actualLowerSettleBandwidth = this.getSingle();\r\n        this.actualUpperBandwidth = this.getSingle();\r\n        \r\n        this.desiredDSPCutoffFrequency = this.getSingle();\r\n        this.desiredLowerBandwidth = this.getSingle();\r\n        this.desiredLowerSettleBandwidth = this.getSingle();\r\n        this.desiredUpperBandwidth = this.getSingle();\r\n\r\n        this.notchFilterMode = this.getInt16();\r\n        this.desiredImpedanceTestFrequency = this.getSingle();\r\n        this.actualImpedanceTestFrequency = this.getSingle();\r\n\r\n        this.ampSettleMode = this.getInt16();\r\n        this.cahrgeRecoveryMode = this.getInt16();\r\n        \r\n        this.stimStepSize = this.getSingle();\r\n        this.chargeRecoveryCurrentLimit = this.getSingle();\r\n        this.chargeRecoveryTargetVoltage = this.getSingle();\r\n        \r\n        this.note1 = this.getQString();\r\n        this.note2 = this.getQString();\r\n        this.note3 = this.getQString();\r\n\r\n        this.DCAmplifierDataSaved = this.getInt16();\r\n        this.boardName = this.getInt16();\r\n        \r\n        this.referenceChannelName = this.getQString();\r\n        this.signalGroupCount = this.getInt16();\r\n\r\n        console.log('version: ' + this.version);\r\n        console.log('sample rate: ' + this.sampleRate);\r\n        console.log('DSP Enabled: ' + this.DSPEnabled);\r\n        \r\n        //==Read signal group and channel descriptions==\r\n        this.signalGroups = [];\r\n\r\n        var ampCount = 0;\r\n        var adcCount = 0;\r\n        var dacCount = 0;\r\n        var digInCount = 0;\r\n        var digOutCount = 0;\r\n\r\n        for (i = 0; i < this.signalGroupCount; i++){\r\n            //Push new signal group\r\n            this.signalGroups.push({\r\n                name: this.getQString(),\r\n                prefix: this.getQString(),\r\n                enabled: this.getInt16(),\r\n                channelCount: this.getInt16(),\r\n                amplifierChannelCount: this.getInt16(),\r\n                channels: []\r\n            });\r\n\r\n            //read channel descriptions\r\n            var count = this.signalGroups[i].channelCount;\r\n            for (j = 0; j < count; j++){\r\n                this.signalGroups[i].channels.push({\r\n                    nativeName: this.getQString(),\r\n                    customName: this.getQString(),\r\n                    nativeOrder: this.getInt16(),\r\n                    customOrder: this.getInt16(),\r\n                    signalType: this.getInt16(),\r\n                    enabled: this.getInt16(),\r\n                    chipChannel: this.getInt16(),\r\n                    commandStream: this.getInt16(),\r\n                    boardStream: this.getInt16(),\r\n                    spikeScopeVoltageTriggerMode: this.getInt16(),\r\n                    spikeScopeVoltageThreshold: this.getInt16(),\r\n                    spikeScopeDigitalTriggerChannel: this.getInt16(),\r\n                    spikeScopeDigitalEdgePolarity: this.getInt16(),\r\n                    electrodeImpedanceMagnitude: this.getSingle(),\r\n                    electrodeImpedancePhase: this.getSingle()\r\n                });\r\n                \r\n\r\n                if (this.signalGroups[i].channels[j].enabled){\r\n                    var type = this.signalGroups[i].channels[j].signalType;\r\n\r\n                    if(type === 0)\r\n                        ampCount++;\r\n                    else if (type === 3)\r\n                        adcCount++;\r\n                    else if (type === 4)\r\n                        dacCount++;\r\n                    else if (type === 5)\r\n                        digInCount++;\r\n                    else if (type === 6)\r\n                        digOutCount++;\r\n                }\r\n            }\r\n        }\r\n\r\n        console.log('amplifier channels: ' + ampCount);\r\n        console.log('ADC channels: ' + adcCount);\r\n        console.log('DAC channels: ' + dacCount);\r\n        console.log('Digital Input channels: ' + digInCount);\r\n        console.log('Digital Output channels: ' + digOutCount);\r\n\r\n        //==Read Data Blocks==\r\n        var blockSize = this.getDataBlockSize(this.DCAmplifierDataSaved === 1, ampCount, adcCount, dacCount, digInCount, digOutCount);\r\n        var blockCount = Math.floor((this.dataLength - this.filePos) / blockSize);\r\n\r\n        console.log('Data Block Size : ' + blockSize + ', Data Block Count : ' + blockCount);\r\n        \r\n        var timestamps = [];\r\n        var ampData = [];\r\n        var dcAmpData = [];\r\n        var stimData = [];\r\n        var adcData = [];\r\n        var dacData = [];\r\n        var digInData = [];\r\n        var digOutData = [];\r\n\r\n        for(i = 0; i < ampCount; i++)\r\n            ampData.push([]);\r\n        for(i = 0; i < ampCount; i++)\r\n            dcAmpData.push([]);\r\n        for(i = 0; i < ampCount; i++)\r\n            stimData.push([]);\r\n        for(i = 0; i < adcCount; i++)\r\n            adcData.push([]);\r\n        for(i = 0; i < dacCount; i++)\r\n            dacData.push([]);\r\n\r\n        var k = 0;\r\n        for (i = 0; i < blockCount; i++){\r\n            //Read one Data Block\r\n            //Timestamps\r\n            for(j = 0; j < 128; j++) {\r\n                timestamps.push(this.getInt32());\r\n            }\r\n\r\n            //Amplifier\r\n            if(ampCount > 0) {\r\n                for(j = 0; j < ampCount; j++){\r\n                    for(k = 0; k < 128; k++){\r\n                        ampData[j].push(this.getInt16());\r\n                    }\r\n                }\r\n\r\n                if (this.DCAmplifierDataSaved === 1){\r\n                    for(j = 0; j < ampCount; j++){\r\n                        for(k = 0; k < 128; k++){\r\n                            dcAmpData[j].push(this.getInt16());\r\n                        }\r\n                    }\r\n                }\r\n\r\n                for(j = 0; j < ampCount; j++){\r\n                    for(k = 0; k < 128; k++){\r\n                        stimData[j].push(this.getInt16());\r\n                    }\r\n                }\r\n            }\r\n\r\n            //ADC\r\n            for(j = 0; j < adcCount; j++){\r\n                for(k = 0; k < 128; k++){\r\n                    adcData[j].push(this.getInt16());\r\n                }\r\n            }\r\n\r\n            //DAC\r\n            for(j = 0; j < dacCount; j++){\r\n                for(k = 0; k < 128; k++){\r\n                    dacData[j].push(this.getInt16());\r\n                }\r\n            }\r\n\r\n            //Board digital input\r\n            if (digInCount > 0){\r\n                for (j = 0; j < 128; j++) {\r\n                    digInData.push(this.getInt16());\r\n                }\r\n            }\r\n\r\n            //Board digital output\r\n            if (digOutCount > 0){\r\n                for (j = 0; j < 128; j++) {\r\n                    digOutData.push(this.getInt16());\r\n                }\r\n            }\r\n        }\r\n\r\n        this.timestamps = timestamps;\r\n        this.ampData = ampData;\r\n        this.dcAmpData = dcAmpData;\r\n        this.stimData = stimData;\r\n        this.adcData = adcData;\r\n        this.dacData = dacData;\r\n        this.digInData = digInData;\r\n        this.digOutData = digOutData;\r\n\r\n        this.recordLength = Math.round((blockCount * 128) / this.sampleRate);\r\n        console.log('record length is ' + this.recordLength + 'seconds');\r\n\r\n        this.isInitialized = true;\r\n        console.log('rhs file is loaded successfully');\r\n    }\r\n    \r\n    //#####Get data functions#####\r\n    //little-endian\r\n    getBytes(count) {\r\n        var array = [];\r\n        for(var i = count - 1; i > -1; i--){\r\n            array.push(this.dataView.getUint8(this.filePos + i));\r\n        }\r\n\r\n        this.filePos += count;\r\n        return array;\r\n    }\r\n\r\n    getUint16(){\r\n        this.filePos += 2;\r\n        return this.dataView.getUint16(this.filePos - 2, true);\r\n    }\r\n\r\n    getInt16(){\r\n        this.filePos += 2;\r\n        return this.dataView.getInt16(this.filePos - 2, true);\r\n    }\r\n\r\n    getUint32(){\r\n        this.filePos += 4;\r\n        return this.dataView.getUint32(this.filePos - 4, true);\r\n    }\r\n\r\n    getInt32(){\r\n        this.filePos += 4;\r\n        return this.dataView.getInt32(this.filePos - 4, true);\r\n    }\r\n\r\n    getSingle(){\r\n        this.filePos += 4;\r\n        return this.dataView.getFloat32(this.filePos - 4, true);\r\n    }\r\n\r\n    getDouble(){\r\n        this.filePos += 8;\r\n        return this.dataView.getFloat64(this.filePos - 8, true);\r\n    }\r\n\r\n    getQString () {\r\n        var length = this.dataView.getUint32(this.filePos, true);        \r\n        this.filePos += 4;\r\n        if (length < 1)\r\n            return \"\";\r\n        \r\n        var arr = [];\r\n        length = length / 2;\r\n        \r\n        for (var i = 0; i < length; i++){\r\n            arr = arr.concat(this.getBytes(2));\r\n        }\r\n\r\n        var buffer = new Uint8Array(arr);\r\n        return new TextDecoder('utf-16be').decode(buffer);\r\n    }\r\n\r\n    getDataBlockSize (isDcAmpSaved, ampCount, adcCount, dacCount, digInCount, digOutCount){\r\n        var N = 128;\r\n        var size = N * 4; //timestamp\r\n        \r\n        size += N * 2 * ampCount;\r\n        \r\n        if (isDcAmpSaved)\r\n            size += N * 2 * ampCount;\r\n        \r\n        size += N * 2 * ampCount;\r\n        size += N * 2 * adcCount;\r\n        size += N * 2 * dacCount;\r\n        \r\n        if (digInCount > 0)\r\n            size += N * 2;\r\n        if (digOutCount > 0)\r\n            size += N * 2;\r\n\r\n        return size;\r\n    }\r\n\r\n    getRawAmpData(){\r\n        var nor = [];\r\n\r\n        for (var i = 0; i < this.ampData.length; i++){\r\n            nor.push([]);\r\n            for (var j = 0; j < this.timestamps.length; j++){\r\n                nor[i].push(this.ampData[i][j]);\r\n            }\r\n        }\r\n\r\n        return nor;\r\n    }\r\n\r\n    getNormalizedAmpData(){\r\n        var nor = [];\r\n\r\n        for (var i = 0; i < this.ampData.length; i++){\r\n            var max = this.max(this.ampData[i]);\r\n            var min = this.min(this.ampData[i]);\r\n            var mmax = Math.max(max, Math.abs(min));\r\n\r\n            nor.push([]);\r\n            for (var j = 0; j < this.timestamps.length; j++){\r\n                nor[i].push(this.ampData[i][j] / mmax);\r\n            }\r\n        }\r\n\r\n        return nor;\r\n    }\r\n\r\n    getFilteredAmpData(notchFreq, bandwidth, sampleFreq){\r\n        var arr = this.getRawAmpData();\r\n        var filtered = [];\r\n\r\n        // Calculate biquad IIR filter coefficients.\r\n        var d = Math.exp(-Math.PI * bandwidth / sampleFreq);\r\n        \r\n        var a1 = -(1.0 + d * d) * Math.cos(2.0 * Math.PI * notchFreq / sampleFreq);\r\n        var a2 = d * d;\r\n        var b0 = (1 + d * d) / 2.0;\r\n        var b1 = a1;\r\n        var b2 = b0;\r\n\r\n        \r\n        var value = 0;\r\n        for (var c = 0; c < arr.length; c++){\r\n            filtered.push([]);\r\n            filtered[c].push(0);\r\n            filtered[c].push(0);\r\n\r\n            for (var i = 2; i < arr[c].length; i++){\r\n                value = b0 * arr[c][i] +\r\n                        b1 * arr[c][i - 1] + \r\n                        b2 * arr[c][i - 2] -\r\n                        a1 * filtered[c][i - 1] -\r\n                        a2 * filtered[c][i - 2];\r\n            }\r\n        }\r\n\r\n        var normalized = [];\r\n        for (c = 0; c < arr.length; c++){\r\n            var max = this.max(arr[c]);\r\n            var min = this.min(arr[c]);\r\n            var mmax = Math.max(max, Math.abs(min));\r\n\r\n            normalized.push([]);\r\n            for (i = 0; i < arr[c].length; i++){\r\n                normalized[i].push(arr[c][i] / mmax);\r\n            }\r\n        }\r\n\r\n        return nor;\r\n    }\r\n\r\n    getChannelData(){\r\n        var arr = [];\r\n        var i = 0;\r\n        var j = 0;\r\n\r\n        for (i = 0; i < this.signalGroups.length; i++){\r\n            for (j = 0; j < this.signalGroups[i].channels.length; j++){\r\n                if (this.signalGroups[i].channels[j].signalType === 0){\r\n                    arr.push(this.signalGroups[i].channels[j]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return arr;\r\n    }\r\n\r\n    max(arr){\r\n        var m = -100000;\r\n        for (var i = 0; i < arr.length; i++){\r\n            if (arr[i] > m)\r\n                m = arr[i];\r\n        }\r\n\r\n        return m;\r\n    }\r\n\r\n    min(arr){\r\n        var m = 100000;\r\n        for (var i = 0; i < arr.length; i++){\r\n            if (arr[i] < m)\r\n                m = arr[i];\r\n        }\r\n\r\n        return m;\r\n    }\r\n}\r\n\r\nexport default RHSFile;"]},"metadata":{},"sourceType":"module"}